/**
 * vastRemainingTimePlugin - v1.0.0 - 13:35:15 11-05-2018
 * Author: TuanLDT
 */

!function(){var e=void 0;!function(t,r){"object"==typeof exports&&"undefined"!=typeof module?r(require("playercore"),require("react")):"function"==typeof e&&e.amd?e(["playercore","react"],r):r(t.Kenh14PlayerCore,t.React)}(this,function(e,t){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function n(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function o(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var a="default"in e?e.default:e;t=t&&t.hasOwnProperty("default")?t.default:t;var i=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),s=a.getSkinComponent("component"),l=a.getSkinComponent("remainingTime"),p=a.getSkinComponent("progressControl"),u=e.playerconfig.DEFAULT,c=function(e){function a(e){r(this,a);var o=n(this,(a.__proto__||Object.getPrototypeOf(a)).call(this,e));return o.state={isShow:!1,children:[t.createElement(l,{key:"remainingTime",player:o.props.player}),t.createElement(p,{key:"pregressControl",player:o.props.player,ref:function(e){o.progressControl=e}})]},o._handleVastStart=o._handleVastStart.bind(o),o._handleAdEnd=o._handleAdEnd.bind(o),o}return o(a,s),i(a,[{key:"componentDidMount",value:function(){var e=this.props.player;e.on(u.EVENT.VAST_AD_START,this._handleVastStart),e.on(u.EVENT.AD_END,this._handleAdEnd)}},{key:"componentWillUnmount",value:function(){var e=this.props.player;e.off(u.EVENT.VAST_AD_START,this._handleVastStart),e.off(u.EVENT.AD_END,this._handleAdEnd),clearTimeout(this.tryStartTimeout_)}},{key:"_registerUpdateProgress",value:function(){var e=this,t=this.props.player;try{var r=this.progressControl.progressSlider.playProgress;t.on("timeupdate",r.handleTimeUpdate)}catch(t){this.tryStartTimeout_=setTimeout(function(){e._registerUpdateProgress()},100)}}},{key:"_deregisterUpdateProgress",value:function(){var e=this.props.player;try{var t=this.progressControl.progressSlider.playProgress;e.off("timeupdate",t.handleTimeUpdate)}catch(e){}}},{key:"_handleVastStart",value:function(){this._registerUpdateProgress(),this.setState({isShow:!0})}},{key:"_handleAdEnd",value:function(){this._deregisterUpdateProgress(),this.setState({isShow:!1})}},{key:"renderEl",value:function(){return this.state.isShow?t.createElement("div",{className:"vast-remaining"},t.createElement("div",{className:"vast-remaining-title"},t.createElement("span",null,"Quảng cáo "))):null}}]),a}();c.propTypes={player:e.PropTypes.object.isRequired};a.registerPlugin("vastRemainingTimePlugin",function(){var e=this;e.one("ready",function(){var r=t.createElement(c,{key:"VastRemainingTime",player:e});e.container.controlBar.addChild(r)})})})}();/**
 * guidePlugin - v1.0.0 - 18:40:07 29-07-2019
 * Author: cuongtt
 */

!function(){var t=void 0;!function(e,n){"object"==typeof exports&&"undefined"!=typeof module?n(require("playercore"),require("react")):"function"==typeof t&&t.amd?t(["playercore","react"],n):n(e.Kenh14PlayerCore,e.React)}(this,function(t,e){"use strict";function n(t){return t&&t.__esModule&&Object.prototype.hasOwnProperty.call(t,"default")?t.default:t}function r(t,e){return e={exports:{}},t(e,e.exports),e.exports}var o="default"in t?t.default:t,i="default"in e?e.default:e,u=r(function(t){var e=t.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=e)}),c=r(function(t){var e=t.exports={version:"2.6.9"};"number"==typeof __e&&(__e=e)}),a=function(t){if("function"!=typeof t)throw TypeError(t+" is not a function!");return t},f=function(t,e,n){if(a(t),void 0===e)return t;switch(n){case 1:return function(n){return t.call(e,n)};case 2:return function(n,r){return t.call(e,n,r)};case 3:return function(n,r,o){return t.call(e,n,r,o)}}return function(){return t.apply(e,arguments)}},l=function(t){return"object"==typeof t?null!==t:"function"==typeof t},s=function(t){if(!l(t))throw TypeError(t+" is not an object!");return t},p=function(t){try{return!!t()}catch(t){return!0}},y=!p(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a}),d=u.document,h=l(d)&&l(d.createElement),v=function(t){return h?d.createElement(t):{}},b=!y&&!p(function(){return 7!=Object.defineProperty(v("div"),"a",{get:function(){return 7}}).a}),m=function(t,e){if(!l(t))return t;var n,r;if(e&&"function"==typeof(n=t.toString)&&!l(r=n.call(t)))return r;if("function"==typeof(n=t.valueOf)&&!l(r=n.call(t)))return r;if(!e&&"function"==typeof(n=t.toString)&&!l(r=n.call(t)))return r;throw TypeError("Can't convert object to primitive value")},_=Object.defineProperty,g={f:y?Object.defineProperty:function(t,e,n){if(s(t),e=m(e,!0),s(n),b)try{return _(t,e,n)}catch(t){}if("get"in n||"set"in n)throw TypeError("Accessors not supported!");return"value"in n&&(t[e]=n.value),t}},O=function(t,e){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}},S=y?function(t,e,n){return g.f(t,e,O(1,n))}:function(t,e,n){return t[e]=n,t},w={}.hasOwnProperty,j=function(t,e){return w.call(t,e)},P=function(t,e,n){var r,o,i,a=t&P.F,l=t&P.G,s=t&P.S,p=t&P.P,y=t&P.B,d=t&P.W,h=l?c:c[e]||(c[e]={}),v=h.prototype,b=l?u:s?u[e]:(u[e]||{}).prototype;l&&(n=e);for(r in n)(o=!a&&b&&void 0!==b[r])&&j(h,r)||(i=o?b[r]:n[r],h[r]=l&&"function"!=typeof b[r]?n[r]:y&&o?f(i,u):d&&b[r]==i?function(t){var e=function(e,n,r){if(this instanceof t){switch(arguments.length){case 0:return new t;case 1:return new t(e);case 2:return new t(e,n)}return new t(e,n,r)}return t.apply(this,arguments)};return e.prototype=t.prototype,e}(i):p&&"function"==typeof i?f(Function.call,i):i,p&&((h.virtual||(h.virtual={}))[r]=i,t&P.R&&v&&!v[r]&&S(v,r,i)))};P.F=1,P.G=2,P.S=4,P.P=8,P.B=16,P.W=32,P.U=64,P.R=128;var k=P,M={}.toString,E=function(t){return M.call(t).slice(8,-1)},T=Object("z").propertyIsEnumerable(0)?Object:function(t){return"String"==E(t)?t.split(""):Object(t)},F=function(t){if(void 0==t)throw TypeError("Can't call method on  "+t);return t},L=function(t){return T(F(t))},x=Math.ceil,D=Math.floor,C=function(t){return isNaN(t=+t)?0:(t>0?D:x)(t)},A=Math.min,N=function(t){return t>0?A(C(t),9007199254740991):0},z=Math.max,G=Math.min,I=function(t,e){return(t=C(t))<0?z(t+e,0):G(t,e)},R=r(function(t){var e=u["__core-js_shared__"]||(u["__core-js_shared__"]={});(t.exports=function(t,n){return e[t]||(e[t]=void 0!==n?n:{})})("versions",[]).push({version:c.version,mode:"pure",copyright:"© 2019 Denis Pushkarev (zloirock.ru)"})}),K=0,V=Math.random(),W=function(t){return"Symbol(".concat(void 0===t?"":t,")_",(++K+V).toString(36))},q=R("keys"),B=function(t){return q[t]||(q[t]=W(t))},H=function(t){return function(e,n,r){var o,i=L(e),u=N(i.length),c=I(r,u);if(t&&n!=n){for(;u>c;)if((o=i[c++])!=o)return!0}else for(;u>c;c++)if((t||c in i)&&i[c]===n)return t||c||0;return!t&&-1}}(!1),J=B("IE_PROTO"),U=function(t,e){var n,r=L(t),o=0,i=[];for(n in r)n!=J&&j(r,n)&&i.push(n);for(;e.length>o;)j(r,n=e[o++])&&(~H(i,n)||i.push(n));return i},Y="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(","),Q=Object.keys||function(t){return U(t,Y)},X={f:Object.getOwnPropertySymbols},Z={f:{}.propertyIsEnumerable},$=function(t){return Object(F(t))},tt=Object.assign,et=!tt||p(function(){var t={},e={},n=Symbol(),r="abcdefghijklmnopqrst";return t[n]=7,r.split("").forEach(function(t){e[t]=t}),7!=tt({},t)[n]||Object.keys(tt({},e)).join("")!=r})?function(t,e){for(var n=$(t),r=arguments.length,o=1,i=X.f,u=Z.f;r>o;)for(var c,a=T(arguments[o++]),f=i?Q(a).concat(i(a)):Q(a),l=f.length,s=0;l>s;)c=f[s++],y&&!u.call(a,c)||(n[c]=a[c]);return n}:tt;k(k.S+k.F,"Object",{assign:et});var nt=c.Object.assign,rt=r(function(t){t.exports={default:nt,__esModule:!0}});n(rt);var ot=n(r(function(t,e){e.__esModule=!0;var n=function(t){return t&&t.__esModule?t:{default:t}}(rt);e.default=n.default||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t}})),it=Object.getOwnPropertyDescriptor,ut={f:y?it:function(t,e){if(t=L(t),e=m(e,!0),b)try{return it(t,e)}catch(t){}if(j(t,e))return O(!Z.f.call(t,e),t[e])}},ct=function(t,e){var n=(c.Object||{})[t]||Object[t],r={};r[t]=e(n),k(k.S+k.F*p(function(){n(1)}),"Object",r)},at=ut.f;ct("getOwnPropertyDescriptor",function(){return function(t,e){return at(L(t),e)}});var ft=c.Object,lt=function(t,e){return ft.getOwnPropertyDescriptor(t,e)},st=n(r(function(t){t.exports={default:lt,__esModule:!0}})),pt=B("IE_PROTO"),yt=Object.prototype,dt=Object.getPrototypeOf||function(t){return t=$(t),j(t,pt)?t[pt]:"function"==typeof t.constructor&&t instanceof t.constructor?t.constructor.prototype:t instanceof Object?yt:null};ct("getPrototypeOf",function(){return function(t){return dt($(t))}});var ht=c.Object.getPrototypeOf,vt=n(r(function(t){t.exports={default:ht,__esModule:!0}})),bt=n(r(function(t,e){e.__esModule=!0,e.default=function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}}));k(k.S+k.F*!y,"Object",{defineProperty:g.f});var mt=c.Object,_t=function(t,e,n){return mt.defineProperty(t,e,n)},gt=r(function(t){t.exports={default:_t,__esModule:!0}});n(gt);var Ot=n(r(function(t,e){e.__esModule=!0;var n=function(t){return t&&t.__esModule?t:{default:t}}(gt);e.default=function(){function t(t,e){for(var r=0;r<e.length;r++){var o=e[r];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),(0,n.default)(t,o.key,o)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}()})),St=S,wt={},jt=y?Object.defineProperties:function(t,e){s(t);for(var n,r=Q(e),o=r.length,i=0;o>i;)g.f(t,n=r[i++],e[n]);return t},Pt=u.document,kt=Pt&&Pt.documentElement,Mt=B("IE_PROTO"),Et=function(){},Tt=function(){var t,e=v("iframe"),n=Y.length;for(e.style.display="none",kt.appendChild(e),e.src="javascript:",(t=e.contentWindow.document).open(),t.write("<script>document.F=Object<\/script>"),t.close(),Tt=t.F;n--;)delete Tt.prototype[Y[n]];return Tt()},Ft=Object.create||function(t,e){var n;return null!==t?(Et.prototype=s(t),n=new Et,Et.prototype=null,n[Mt]=t):n=Tt(),void 0===e?n:jt(n,e)},Lt=r(function(t){var e=R("wks"),n=u.Symbol,r="function"==typeof n;(t.exports=function(t){return e[t]||(e[t]=r&&n[t]||(r?n:W)("Symbol."+t))}).store=e}),xt=g.f,Dt=Lt("toStringTag"),Ct=function(t,e,n){t&&!j(t=n?t:t.prototype,Dt)&&xt(t,Dt,{configurable:!0,value:e})},At={};S(At,Lt("iterator"),function(){return this});var Nt=function(t,e,n){t.prototype=Ft(At,{next:O(1,n)}),Ct(t,e+" Iterator")},zt=Lt("iterator"),Gt=!([].keys&&"next"in[].keys()),It=function(){return this},Rt=function(t,e,n,r,o,i,u){Nt(n,e,r);var c,a,f,l=function(t){if(!Gt&&t in d)return d[t];switch(t){case"keys":case"values":return function(){return new n(this,t)}}return function(){return new n(this,t)}},s=e+" Iterator",p="values"==o,y=!1,d=t.prototype,h=d[zt]||d["@@iterator"]||o&&d[o],v=h||l(o),b=o?p?l("entries"):v:void 0,m="Array"==e?d.entries||h:h;if(m&&(f=dt(m.call(new t)))!==Object.prototype&&f.next&&Ct(f,s,!0),p&&h&&"values"!==h.name&&(y=!0,v=function(){return h.call(this)}),u&&(Gt||y||!d[zt])&&S(d,zt,v),wt[e]=v,wt[s]=It,o)if(c={values:p?v:l("values"),keys:i?v:l("keys"),entries:b},u)for(a in c)a in d||St(d,a,c[a]);else k(k.P+k.F*(Gt||y),e,c);return c},Kt=function(t){return function(e,n){var r,o,i=String(F(e)),u=C(n),c=i.length;return u<0||u>=c?t?"":void 0:(r=i.charCodeAt(u))<55296||r>56319||u+1===c||(o=i.charCodeAt(u+1))<56320||o>57343?t?i.charAt(u):r:t?i.slice(u,u+2):o-56320+(r-55296<<10)+65536}}(!0);Rt(String,"String",function(t){this._t=String(t),this._i=0},function(){var t,e=this._t,n=this._i;return n>=e.length?{value:void 0,done:!0}:(t=Kt(e,n),this._i+=t.length,{value:t,done:!1})});var Vt=function(t,e){return{value:e,done:!!t}};Rt(Array,"Array",function(t,e){this._t=L(t),this._i=0,this._k=e},function(){var t=this._t,e=this._k,n=this._i++;return!t||n>=t.length?(this._t=void 0,Vt(1)):"keys"==e?Vt(0,n):"values"==e?Vt(0,t[n]):Vt(0,[n,t[n]])},"values");wt.Arguments=wt.Array;for(var Wt=Lt("toStringTag"),qt="CSSRuleList,CSSStyleDeclaration,CSSValueList,ClientRectList,DOMRectList,DOMStringList,DOMTokenList,DataTransferItemList,FileList,HTMLAllCollection,HTMLCollection,HTMLFormElement,HTMLSelectElement,MediaList,MimeTypeArray,NamedNodeMap,NodeList,PaintRequestList,Plugin,PluginArray,SVGLengthList,SVGNumberList,SVGPathSegList,SVGPointList,SVGStringList,SVGTransformList,SourceBufferList,StyleSheetList,TextTrackCueList,TextTrackList,TouchList".split(","),Bt=0;Bt<qt.length;Bt++){var Ht=qt[Bt],Jt=u[Ht],Ut=Jt&&Jt.prototype;Ut&&!Ut[Wt]&&S(Ut,Wt,Ht),wt[Ht]=wt.Array}var Yt={f:Lt},Qt=Yt.f("iterator"),Xt=r(function(t){t.exports={default:Qt,__esModule:!0}});n(Xt);var Zt=r(function(t){var e=W("meta"),n=g.f,r=0,o=Object.isExtensible||function(){return!0},i=!p(function(){return o(Object.preventExtensions({}))}),u=function(t){n(t,e,{value:{i:"O"+ ++r,w:{}}})},c=t.exports={KEY:e,NEED:!1,fastKey:function(t,n){if(!l(t))return"symbol"==typeof t?t:("string"==typeof t?"S":"P")+t;if(!j(t,e)){if(!o(t))return"F";if(!n)return"E";u(t)}return t[e].i},getWeak:function(t,n){if(!j(t,e)){if(!o(t))return!0;if(!n)return!1;u(t)}return t[e].w},onFreeze:function(t){return i&&c.NEED&&o(t)&&!j(t,e)&&u(t),t}}}),$t=g.f,te=function(t){var e=c.Symbol||(c.Symbol={});"_"==t.charAt(0)||t in e||$t(e,t,{value:Yt.f(t)})},ee=function(t){var e=Q(t),n=X.f;if(n)for(var r,o=n(t),i=Z.f,u=0;o.length>u;)i.call(t,r=o[u++])&&e.push(r);return e},ne=Array.isArray||function(t){return"Array"==E(t)},re=Y.concat("length","prototype"),oe={f:Object.getOwnPropertyNames||function(t){return U(t,re)}},ie=oe.f,ue={}.toString,ce="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[],ae=function(t){try{return ie(t)}catch(t){return ce.slice()}},fe={f:function(t){return ce&&"[object Window]"==ue.call(t)?ae(t):ie(L(t))}},le=Zt.KEY,se=ut.f,pe=g.f,ye=fe.f,de=u.Symbol,he=u.JSON,ve=he&&he.stringify,be=Lt("_hidden"),me=Lt("toPrimitive"),_e={}.propertyIsEnumerable,ge=R("symbol-registry"),Oe=R("symbols"),Se=R("op-symbols"),we=Object.prototype,je="function"==typeof de&&!!X.f,Pe=u.QObject,ke=!Pe||!Pe.prototype||!Pe.prototype.findChild,Me=y&&p(function(){return 7!=Ft(pe({},"a",{get:function(){return pe(this,"a",{value:7}).a}})).a})?function(t,e,n){var r=se(we,e);r&&delete we[e],pe(t,e,n),r&&t!==we&&pe(we,e,r)}:pe,Ee=function(t){var e=Oe[t]=Ft(de.prototype);return e._k=t,e},Te=je&&"symbol"==typeof de.iterator?function(t){return"symbol"==typeof t}:function(t){return t instanceof de},Fe=function(t,e,n){return t===we&&Fe(Se,e,n),s(t),e=m(e,!0),s(n),j(Oe,e)?(n.enumerable?(j(t,be)&&t[be][e]&&(t[be][e]=!1),n=Ft(n,{enumerable:O(0,!1)})):(j(t,be)||pe(t,be,O(1,{})),t[be][e]=!0),Me(t,e,n)):pe(t,e,n)},Le=function(t,e){s(t);for(var n,r=ee(e=L(e)),o=0,i=r.length;i>o;)Fe(t,n=r[o++],e[n]);return t},xe=function(t){var e=_e.call(this,t=m(t,!0));return!(this===we&&j(Oe,t)&&!j(Se,t))&&(!(e||!j(this,t)||!j(Oe,t)||j(this,be)&&this[be][t])||e)},De=function(t,e){if(t=L(t),e=m(e,!0),t!==we||!j(Oe,e)||j(Se,e)){var n=se(t,e);return!n||!j(Oe,e)||j(t,be)&&t[be][e]||(n.enumerable=!0),n}},Ce=function(t){for(var e,n=ye(L(t)),r=[],o=0;n.length>o;)j(Oe,e=n[o++])||e==be||e==le||r.push(e);return r},Ae=function(t){for(var e,n=t===we,r=ye(n?Se:L(t)),o=[],i=0;r.length>i;)!j(Oe,e=r[i++])||n&&!j(we,e)||o.push(Oe[e]);return o};je||(St((de=function(){if(this instanceof de)throw TypeError("Symbol is not a constructor!");var t=W(arguments.length>0?arguments[0]:void 0),e=function(n){this===we&&e.call(Se,n),j(this,be)&&j(this[be],t)&&(this[be][t]=!1),Me(this,t,O(1,n))};return y&&ke&&Me(we,t,{configurable:!0,set:e}),Ee(t)}).prototype,"toString",function(){return this._k}),ut.f=De,g.f=Fe,oe.f=fe.f=Ce,Z.f=xe,X.f=Ae,Yt.f=function(t){return Ee(Lt(t))}),k(k.G+k.W+k.F*!je,{Symbol:de});for(var Ne="hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","),ze=0;Ne.length>ze;)Lt(Ne[ze++]);for(var Ge=Q(Lt.store),Ie=0;Ge.length>Ie;)te(Ge[Ie++]);k(k.S+k.F*!je,"Symbol",{for:function(t){return j(ge,t+="")?ge[t]:ge[t]=de(t)},keyFor:function(t){if(!Te(t))throw TypeError(t+" is not a symbol!");for(var e in ge)if(ge[e]===t)return e},useSetter:function(){ke=!0},useSimple:function(){ke=!1}}),k(k.S+k.F*!je,"Object",{create:function(t,e){return void 0===e?Ft(t):Le(Ft(t),e)},defineProperty:Fe,defineProperties:Le,getOwnPropertyDescriptor:De,getOwnPropertyNames:Ce,getOwnPropertySymbols:Ae});var Re=p(function(){X.f(1)});k(k.S+k.F*Re,"Object",{getOwnPropertySymbols:function(t){return X.f($(t))}}),he&&k(k.S+k.F*(!je||p(function(){var t=de();return"[null]"!=ve([t])||"{}"!=ve({a:t})||"{}"!=ve(Object(t))})),"JSON",{stringify:function(t){for(var e,n,r=[t],o=1;arguments.length>o;)r.push(arguments[o++]);if(n=e=r[1],(l(e)||void 0!==t)&&!Te(t))return ne(e)||(e=function(t,e){if("function"==typeof n&&(e=n.call(this,t,e)),!Te(e))return e}),r[1]=e,ve.apply(he,r)}}),de.prototype[me]||S(de.prototype,me,de.prototype.valueOf),Ct(de,"Symbol"),Ct(Math,"Math",!0),Ct(u.JSON,"JSON",!0),te("asyncIterator"),te("observable");var Ke=c.Symbol,Ve=r(function(t){t.exports={default:Ke,__esModule:!0}});n(Ve);var We=r(function(t,e){function n(t){return t&&t.__esModule?t:{default:t}}e.__esModule=!0;var r=n(Xt),o=n(Ve),i="function"==typeof o.default&&"symbol"==typeof r.default?function(t){return typeof t}:function(t){return t&&"function"==typeof o.default&&t.constructor===o.default&&t!==o.default.prototype?"symbol":typeof t};e.default="function"==typeof o.default&&"symbol"===i(r.default)?function(t){return void 0===t?"undefined":i(t)}:function(t){return t&&"function"==typeof o.default&&t.constructor===o.default&&t!==o.default.prototype?"symbol":void 0===t?"undefined":i(t)}});n(We);var qe=n(r(function(t,e){e.__esModule=!0;var n=function(t){return t&&t.__esModule?t:{default:t}}(We);e.default=function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!==(void 0===e?"undefined":(0,n.default)(e))&&"function"!=typeof e?t:e}})),Be=function(t,e){if(s(t),!l(e)&&null!==e)throw TypeError(e+": can't set as prototype!")},He={set:Object.setPrototypeOf||("__proto__"in{}?function(t,e,n){try{(n=f(Function.call,ut.f(Object.prototype,"__proto__").set,2))(t,[]),e=!(t instanceof Array)}catch(t){e=!0}return function(t,r){return Be(t,r),e?t.__proto__=r:n(t,r),t}}({},!1):void 0),check:Be};k(k.S,"Object",{setPrototypeOf:He.set});var Je=c.Object.setPrototypeOf,Ue=r(function(t){t.exports={default:Je,__esModule:!0}});n(Ue),k(k.S,"Object",{create:Ft});var Ye=c.Object,Qe=function(t,e){return Ye.create(t,e)},Xe=r(function(t){t.exports={default:Qe,__esModule:!0}});n(Xe);var Ze,$e,tn,en,nn,rn,on=n(r(function(t,e){function n(t){return t&&t.__esModule?t:{default:t}}e.__esModule=!0;var r=n(Ue),o=n(Xe),i=n(We);e.default=function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+(void 0===e?"undefined":(0,i.default)(e)));t.prototype=(0,o.default)(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(r.default?(0,r.default)(t,e):t.__proto__=e)}})),un=(tn=$e=function(t){function e(){var t,n,r,o;bt(this,e);for(var i=arguments.length,u=Array(i),c=0;c<i;c++)u[c]=arguments[c];return n=r=qe(this,(t=e.__proto__||vt(e)).call.apply(t,[this].concat(u))),r.state={is_show:!1},o=n,qe(r,o)}return on(e,t),Ot(e,[{key:"componentDidMount",value:function(){this.props.player.on("fullscreenchange",this.showGuildOnFullscreen)}},{key:"componentWillUnmount",value:function(){this.props.player.off("fullscreenchange",this.showGuildOnFullscreen)}},{key:"showGuildOnFullscreen",value:function(){var t=this.props.player;document.fullscreenElement||document.webkitIsFullScreen||document.mozFullScreen||document.msFullscreenElement||(this.setState({is_show:!1}),t.removeClass("player-fullscreen"),t.isFullscreen(!1),t.container.setState({is_fullscreen:!1})),t.isFullscreen()?this.setState({is_show:!0}):this.setState({is_show:!1})}},{key:"className",value:function(){var t=[];return this.state.is_show&&t.push("show-guide-fullscreen"),t.join(" ")}},{key:"render",value:function(){if(this.props.player.adSystem)return null;var t=this.className();return i.createElement("div",{className:t})}}]),e}(e.Component),$e.propTypes={player:t.PropTypes.object.isRequired},Ze=tn,function(t,e,n,r,o){var i={};Object.keys(r).forEach(function(t){i[t]=r[t]}),i.enumerable=!!i.enumerable,i.configurable=!!i.configurable,("value"in i||i.initializer)&&(i.writable=!0),i=n.slice().reverse().reduce(function(n,r){return r(t,e,n)||n},i),o&&void 0!==i.initializer&&(i.value=i.initializer?i.initializer.call(o):void 0,i.initializer=void 0),void 0===i.initializer&&(Object.defineProperty(t,e,i),i=null)}(Ze.prototype,"showGuildOnFullscreen",[t.autobind],st(Ze.prototype,"showGuildOnFullscreen"),Ze.prototype),Ze),cn=(rn=nn=function(t){function e(t){bt(this,e);var n=qe(this,(e.__proto__||vt(e)).call(this,t));return n.props.player.on("keydown",n._handleKeyDown),n}return on(e,t),Ot(e,[{key:"_handleKeyDown",value:function(t){var e=this.props,n=e.player,r=e.seekStep,o=e.volumeStep,i=void 0,u=void 0;switch(t.which){case 32:t.preventDefault(),n.paused()?n.play():n.pause();break;case 37:t.preventDefault(),i=n.currentTime()-r,n.currentTime()<=r&&(i=0);try{u=100*i/n.duration(),n.container.controlBar.progressControl.progressSlider.playProgress.update(u)}catch(t){}n.currentTime(i);break;case 39:t.preventDefault(),i=n.currentTime()+r;try{u=100*i/n.duration(),n.container.controlBar.progressControl.progressSlider.playProgress.update(u)}catch(t){}n.currentTime(i);break;case 40:t.preventDefault(),n.muted(!1),n.volume(n.volume()-o);break;case 38:t.preventDefault(),n.muted(!1),n.volume(n.volume()+o);break;case 77:n.muted()?n.muted(!1):n.muted(!0);break;case 70:n.isFullscreen()?n.exitFullscreen():n.requestFullscreen()}}}]),e}(t.Plugin),nn.defaultProps={seekStep:5,volumeStep:.1},en=rn,function(t,e,n,r,o){var i={};Object.keys(r).forEach(function(t){i[t]=r[t]}),i.enumerable=!!i.enumerable,i.configurable=!!i.configurable,("value"in i||i.initializer)&&(i.writable=!0),i=n.slice().reverse().reduce(function(n,r){return r(t,e,n)||n},i),o&&void 0!==i.initializer&&(i.value=i.initializer?i.initializer.call(o):void 0,i.initializer=void 0),void 0===i.initializer&&(Object.defineProperty(t,e,i),i=null)}(en.prototype,"_handleKeyDown",[t.autobind],st(en.prototype,"_handleKeyDown"),en.prototype),en);o.registerPlugin("guidePlugin",function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{seekStep:5},n=this;if(t.agent.isMobile)return null;n.one("ready",function(){var t=i.createElement(un,{key:"guidescreen",player:n});n.container.addChild(t,1)}),new cn(ot({player:n},e))})})}();/**
 * postrollPlugin - v1.0.62 - 17:14:18 15-11-2019
 * Author: cuongtt
 */

!function(){var t=void 0;!function(e,o){"object"==typeof exports&&"undefined"!=typeof module?o(require("playercore")):"function"==typeof t&&t.amd?t(["playercore"],o):o(e.Kenh14PlayerCore)}(this,function(t){"use strict";var e="default"in t?t.default:t,o=(function(){function t(t){this.value=t}function e(e){function o(n,a){try{var i=e[n](a),s=i.value;s instanceof t?Promise.resolve(s.value).then(function(t){o("next",t)},function(t){o("throw",t)}):r(i.done?"return":"normal",i.value)}catch(t){r("throw",t)}}function r(t,e){switch(t){case"return":n.resolve({value:e,done:!0});break;case"throw":n.reject(e);break;default:n.resolve({value:e,done:!1})}(n=n.next)?o(n.key,n.arg):a=null}var n,a;this._invoke=function(t,e){return new Promise(function(r,i){var s={key:t,arg:e,resolve:r,reject:i,next:null};a?a=a.next=s:(n=a=s,o(t,e))})},"function"!=typeof e.return&&(this.return=void 0)}"function"==typeof Symbol&&Symbol.asyncIterator&&(e.prototype[Symbol.asyncIterator]=function(){return this}),e.prototype.next=function(t){return this._invoke("next",t)},e.prototype.throw=function(t){return this._invoke("throw",t)},e.prototype.return=function(t){return this._invoke("return",t)}}(),function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}),r=function(){function t(t,e){for(var o=0;o<e.length;o++){var r=e[o];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,o,r){return o&&t(e.prototype,o),r&&t(e,r),e}}(),n=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var o=arguments[e];for(var r in o)Object.prototype.hasOwnProperty.call(o,r)&&(t[r]=o[r])}return t},a=function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)},i=function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e},s=t.playerconfig.DEFAULT,l={IDLE:"IDLE",PREPARE:"PREPARE",RUNNING:"RUNNING",SUCCESS:"SUCCESS"},c=function(t){function e(t){o(this,e);var r=i(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,t));r.defaultProps={number:-1},r.state={count:0,postrollstate:l.IDLE,prepareSuccess:!0,contentEnded:!1};var n=r.props,a=n.player,c=n.preLoad;return r.isPreparePost=!1,r.handleContentEnded=r.handleContentEnded.bind(r),r.checkDurationIsGreat=r.checkDurationIsGreat.bind(r),r.checkToStartPostroll=r.checkToStartPostroll.bind(r),a.on(s.EVENT.PLAYER_ENDED_CONTEND,r.handleContentEnded),a.on("durationchange",r.checkDurationIsGreat),a.on("play",r.checkDurationIsGreat),a.on("loadedmetadata",r.checkDurationIsGreat),c&&(a.on("timeupdate",r.checkToStartPostroll),r.setState({prepareSuccess:!1})),r}return a(e,t),r(e,[{key:"componentWillUnmount",value:function(){var t=this.props.player;t.off("durationchange",this.checkDurationIsGreat),t.off("play",this.checkDurationIsGreat),t.off("loadedmetadata",this.checkDurationIsGreat),t.off("timeupdate",this.checkToStartPostroll),t.off(s.EVENT.PLAYER_ENDED_CONTEND,this.handleContentEnded)}},{key:"checkToStartPostroll",value:function(){var t=this.props.player;this.isPreparePost||t.currentTime()+6>=t.duration()&&(this.isPreparePost=!0,this.preparePostroll())}},{key:"preparePostroll",value:function(){var t=this.props.player,e=this;t.trigger("preparePostrollVast"),t.one("preparePostrollSuccess",function(){e.setState({prepareSuccess:!0}),e.startPostroll()})}},{key:"_startPostroll",value:function(){var t=this.props.player,e=this;this.setState({postrollstate:l.RUNNING}),t.one(s.EVENT.AD_END,function(){e.setState({postrollstate:l.SUCCESS}),t.one("play",function(){e.setState({postrollstate:l.IDLE}),t.currentTime(0)}),t.trigger(s.EVENT.AD_ENDED_POSTROLL)}),t.trigger(s.EVENT.AD_ORDER_START_POSTROLL)}},{key:"checkDurationIsGreat",value:function(){var t=this.props.player,e=t.duration();if(!Number.isNaN(e)){var o=t.options().params;0!==e&&(o.postroll||(t.trigger("postrollignore"),t.off(s.EVENT.PLAYER_ENDED_CONTEND,this.handleContentEnded),t.off("durationchange",this.checkDurationIsGreat),t.off("play",this.checkDurationIsGreat),t.off("loadedmetadata",this.checkDurationIsGreat)))}}},{key:"startPostroll",value:function(){var t=this.props.player,e=this.state,o=e.prepareSuccess,r=e.contentEnded,n=e.postrollstate,a=this;o&&r?"RUNNING"!==n&&(this.setState({postrollstate:l.RUNNING}),t.one(s.EVENT.AD_END,function(){a.setState({postrollstate:l.SUCCESS,contentEnded:!1}),t.one("play",function(){a.setState({postrollstate:l.IDLE}),t.currentTime(0)}),a.isPreparePost=!1,t.trigger(s.EVENT.AD_ENDED_POSTROLL)}),t.trigger(s.EVENT.AD_ORDER_START_POSTROLL)):!o&&r&&t.trigger(s.EVENT.AD_ENDED_POSTROLL)}},{key:"handleContentEnded",value:function(){var t=this.state,e=t.count,o=t.postrollstate,r=this.props,n=r.player,a=r.number;if("IDLE"===o){if(this.setState({count:++e,contentEnded:!0}),e>a&&a>=0)return n.off(s.EVENT.PLAYER_ENDED_CONTEND,this.handleContentEnded),void(n.play=this.oriPlay);this.startPostroll()}}}]),e}(t.Plugin),u=e.getComponent("Player");e.registerPlugin("postrollPlugin",function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{number:1},o=this,r=o.options().params;if(r.postroll){var a=!1;t.agent.isIOS||r.noAdsLoad||!u.prototype.AdsPlayerPlugin||(a=!0);var i=document.createElement("div");i.innerHTML="&nbsp;",i.className="adsbox",document.body.appendChild(i),window.setTimeout(function(){i.remove()},100),new c(n({},e,{player:o,preLoad:a}))}})})}();/**
 * sharePlugin - v1.0.1 - 09:54:23 27-09-2018
 * Author: cuongtt
 */

!function(){var e=void 0;!function(t,n){"object"==typeof exports&&"undefined"!=typeof module?n(require("react"),require("playercore")):"function"==typeof e&&e.amd?e(["react","playercore"],n):n(t.React,t.Kenh14PlayerCore)}(this,function(e,t){"use strict";function n(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function r(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function a(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function s(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var l="default"in e?e.default:e,c="default"in t?t.default:t,u=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},p=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),h=function(t){function i(e){n(this,i);var t=o(this,(i.__proto__||Object.getPrototypeOf(i)).call(this,e));return t.state={hover:!1,copied:!1},t.handleClick=t.handleClick.bind(t),t.onHover=t.onHover.bind(t),t.onOut=t.onOut.bind(t),t.handleClickOutside=t.handleClickOutside.bind(t),t}return r(i,e.Component),p(i,[{key:"componentDidMount",value:function(){document.addEventListener("click",this.handleClickOutside)}},{key:"componentWillUnmount",value:function(){document.removeEventListener("click",this.handleClickOutside)}},{key:"handleClickOutside",value:function(e){var t=this.state,n=t.hover,o=t.copied;(n||o)&&this.wrapperRef&&!this.wrapperRef.contains(e.target)&&this.onOut()}},{key:"handleClick",value:function(e){var t={hover:!1,copied:!0};"Facebook"===this.props.label&&(t={hover:!0}),(this.props.onClick||function(){})(e),this.setState(u({},t))}},{key:"className",value:function(){var e=this.props.className;return["share-toggles",e].join(" ")}},{key:"onHover",value:function(){this.setState({hover:!0})}},{key:"onOut",value:function(){this.setState({hover:!1,copied:!1})}},{key:"render",value:function(){var e=this,t=this.className(),n=this.props.label;return l.createElement("div",{onMouseEnter:this.onHover,onMouseLeave:this.onOut,onClick:this.handleClick,className:t,ref:function(t){e.wrapperRef=t}},this.state.hover?l.createElement("span",{className:"text-label"},n):"",this.state.copied?l.createElement("span",{className:"text-label"},"Copied"):"")}}]),i}();h.propTypes={label:t.PropTypes.string.isRequired,player:t.PropTypes.object.isRequired,className:t.PropTypes.string,onClick:t.PropTypes.func},h.defaultProps={label:"share",className:""};var d=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),f=function(t){function n(e){i(this,n);var t=a(this,(n.__proto__||Object.getPrototypeOf(n)).call(this,e));return t.state={copySuccess:!1},t._onUserActive=t._onUserActive.bind(t),t._onUserInactive=t._onUserInactive.bind(t),t.handleShareFaceBook=t.handleShareFaceBook.bind(t),t.handleShareLink=t.handleShareLink.bind(t),t.handleShareEmbed=t.handleShareEmbed.bind(t),t}return s(n,e.Component),d(n,[{key:"componentDidMount",value:function(){var e=this.props.player;e.on("player_useractive",this._onUserActive),e.on("player_userinactive",this._onUserInactive)}},{key:"componentWillUnmount",value:function(){var e=this.props.player;e.off("player_useractive",this._onUserActive),e.off("player_userinactive",this._onUserInactive)}},{key:"_onUserActive",value:function(){this.setState({invisible:!1,hidden:!1}),clearTimeout(this.timeoutHidden_)}},{key:"_onUserInactive",value:function(){var e=this;this.setState({invisible:!0}),this.timeoutHidden_=setTimeout(function(){e.setState({hidden:!0})},1e3)}},{key:"className",value:function(){var e=this.props,t=e.className,n=e.site,o=e.player,r=this.state,i=r.invisible,a=r.hidden,s=["share-container",t];return n&&s.push("tn-share-container"),i&&s.push("invisible"),(a||o.height_<200)&&s.push("hidden"),s.join(" ")}},{key:"shareUrl",value:function(){var e,t=this.props.player;try{e=t.options().params.shareUrl||document.location.href||window.top.location.href||document.referrer,window.top!=window.self&&(e=document.referrer?document.referrer:location.href)}catch(e){return}return e}},{key:"handleShareFaceBook",value:function(){var e=this.shareUrl(),t=0,n=0;void 0!==window.screenLeft?(t=window.screenLeft,n=window.screenTop):void 0!==window.screenX&&(t=window.screenX,n=window.screenY);t+=(window.screen.width-600)/2,n+=(window.screen.height-260)/2,window.open("https://www.facebook.com/sharer/sharer.php?u="+e,"","menubar=no,toolbar=no,resizable=yes,scrollbars=yes,height=260,width=600,top="+n+",left="+t)}},{key:"_isinIframe",value:function(){try{return window.self!==window.top}catch(e){return!1}}},{key:"handleShareLink",value:function(){this.setState({disable:!0});var e=this.shareUrl();this.textInput.value=e,this._copyToClipboard()}},{key:"handleUrl",value:function(){var e=this.props,t=e.player,n=e.allow,o=t.options(),r=o.playerid,i=o.params,a=i.ads,s=i.autoplay,l=i.domain,c=i.mp4,u=i.pathname,p=i.vid,h=i._admParamTvc,d=i._info,f=i._listsuggest,v=i._site,y=void 0;return y="https://adminplayer.sohatv.vn/embed/"+r,void 0!==p&&(y=y+"/?vid="+p),void 0!==a&&(y=y+"&ads="+a),void 0!==s&&(y=y+"&autoplay="+s),void 0!==l&&(y=y+"&domain="+l),void 0!==c&&(y=y+"&mp4="+c),void 0!==u&&(y=y+"&pathname="+u),void 0!==h&&(y=y+"&_admParamTvc="+h),void 0!==d&&(y=y+"&_info="+d),void 0!==f&&(y=y+"&_listsuggest="+f),void 0!==v&&(y=y+"&_site="+v),void 0!==n&&(y=y+"&allow_all="+n),y}},{key:"handleShareEmbed",value:function(){var e=document.getElementById("context-stats").offsetHeight,t="<iframe width="+document.getElementById("context-stats").offsetWidth+" height="+e+" src="+this.handleUrl()+' data-type="video-iframe" frameborder="0" scrolling="no" allowfullscreen="" webkitallowfullscreen="" mozallowfullscreen="" oallowfullscreen="" msallowfullscreen=""></iframe>';this.textInput.value=t,this._copyToClipboard()}},{key:"insertString",value:function(e,t,n){var o=e.indexOf(n);return-1!==o?e.substr(0,o)+t+e.substr(o):"substring not found"}},{key:"_copyToClipboard",value:function(){var e=this,t=this.props.player;this.timeoutCopyClipboard_&&(clearTimeout(this.timeoutCopyClipboard_),delete this.timeoutCopyClipboard_),this.setState({copySuccess:!0});var n=document.getElementById(t.id_+"-input-copy");n.select(),document.execCommand("Copy"),n.blur(),this.timeoutCopyClipboard_=setTimeout(function(){e.setState({copySuccess:!1})},1e3)}},{key:"render",value:function(){var e=this,t=this.props.player,n=this.className();return l.createElement("div",{className:n},l.createElement(h,{player:t,className:"share-fb",label:"Facebook",onClick:this.handleShareFaceBook}),l.createElement(h,{player:t,className:"share-lks",label:"Link",onClick:this.handleShareLink}),l.createElement("input",{id:t.id_+"-input-copy",type:"text",className:"display-copy",ref:function(t){return e.textInput=t}}))}}]),n}();f.propTypes={player:t.PropTypes.object.isRequired,allow:t.PropTypes.bool,className:t.PropTypes.string,showHeader:t.PropTypes.bool,site:t.PropTypes.string,onCloseShare:t.PropTypes.func};c.registerPlugin("sharePlugin",function(e){var t=this,n=e.allow,o=e.site;t.one("ready",function(){var e=l.createElement(f,{key:"shareFrame",site:o,allow:n,player:t});t.container.addChild(e)})})})}();/**
 * vcTrackingPlugin - v1.0.0 - 17:18:36 04-03-2019
 * Author: TuanLDT
 */

!function(){var t=void 0;!function(e,n){"object"==typeof exports&&"undefined"!=typeof module?n(require("playercore")):"function"==typeof t&&t.amd?t(["playercore"],n):n(e.Kenh14PlayerCore)}(this,function(t){"use strict";function e(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:t;t=t<0?0:t;var n=Math.floor(t%60),a=Math.floor(t/60%60),r=Math.floor(t/3600),o=Math.floor(e/60%60);return(isNaN(t)||t===1/0)&&(r=a=n="-"),r=(r<10?"0"+r:r)+":",a=((r||o>=10)&&a<10?"0"+a:a)+":",n=n<10?"0"+n:n,r+a+n}function n(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function a(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function r(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}function o(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function i(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function l(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}function u(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function c(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function d(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}function s(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function p(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function h(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}function f(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function v(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function y(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}var _="default"in t?t.default:t,m="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},b=function t(e,n){var a,r=[];for(a in e)if(e.hasOwnProperty(a)){var o=n?n+"["+a+"]":a,i=e[a];r.push(null!==i&&"object"===(void 0===i?"undefined":m(i))?t(i,o):encodeURIComponent(o)+"="+encodeURIComponent(i))}return r.join("&")},E=function(){return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,function(t){var e=16*Math.random()|0;return("x"===t?e:3&e|8).toString(16)})},P={"afamily.vn":1,"autopro.com.vn":2,"cafef.vn":3,"dantri.com.vn":4,"gamek.vn":5,"genk.vn":6,"kenh14.vn":7,"soha.vn":8,"giadinh.net.vn":9,"nld.com.vn":10,"lazada.vn":11,"bds.rongbay.com":12,"muachung.vn":13,"6giosang.com":14,"m.dantri.com.vn":16,"cafebiz.vn":17,"m.kenh14.vn":18,"vccloud.vn":19,"m.soha.vn":20,"m.gamek.vn":21,"m.genk.vn":22,"m.autopro.com.vn":23,"m.afamily.vn":24,"m.cafebiz.vn":25,"m.cafef.vn":26,"m.giadinh.net.vn":27,"vneconomy.vn":28,"m.vneconomy.vn":29,"analytics.admicro.vn":30,"m.nld.com.vn":31,"nguyenkim.com":32,"publisher-website":35,vc:36,"suckhoedoisong.vn":38,"muare.vn":39,"tratu.soha.vn":40,"socnhi.com":41,"enbac.com":42,"ttvnol.com":43,"linkhay.com":44,"f319.com":45,"vtv.vn":46,"rongbay.com":47,"rongbay.vn":48,"m.vtv.vn":49,"m.linkhay.com":50,"m.enbac.com":51,"plaza.muachung.vn":52,"all.enbac.com":53,"oto.enbac.com":54,"waf.afamily.vn":55,"vntm.kenh14.vn":56,"herewego.kenh14.vn":59,"laodong.com.vn":60,"m.laodong.com.vn":61,"thanhnien.vn":62,"tuoitre.vn":63,"nemo.vn":64,"marketingit.admicro.vn":65,"nextgen.kenh14.vn":66,"quizz.kenh14.vn":67,"phimchat.net":69,"sannhac.com":70,"wechoice.vn":71,"card.sacombank.com.vn":73,"admicro1-3.thanhnien.vn":77,"thanhnien-other.thanhnien.vn":78,"eva.vn":79,"m.eva.vn":80,"m.thanhnien.vn":81,"thethao.thanhnien.vn":82},g={load:1,play:2,replay:3,pause:4,resume:5,fullscreen:6,normalscreen:7,firstQuartile:8,midpoint:9,thirdQuartile:10,endedcontent:11,changeQuality:12,poll:14,close:15,user_change_quality:16,auto_change_quality:17,current_resolution_change:18,error:20,waiting:21,adstart:22,"bit-receive":23,timetostart:24,adpoll:25,pausedAd:26},k=function(){function t(t,e){for(var n=0;n<e.length;n++){var a=e[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(t,a.key,a)}}return function(e,n,a){return n&&t(e.prototype,n),a&&t(e,a),e}}(),T=t.playerconfig.DEFAULT,A={preroll:1,midroll:2,postroll:3,interactive:4},w=0,S=function(o){function i(t){n(this,i);var e=a(this,(i.__proto__||Object.getPrototypeOf(i)).call(this,t)),r=e.props.player,o=e;return e.trackStats=e.trackStats.bind(e),e.getStats=e.getStats.bind(e),e._handePollAdStart=e._handePollAdStart.bind(e),e._handePollAdPlay=e._handePollAdPlay.bind(e),e._handlePollAdEnded=e._handlePollAdEnded.bind(e),e._handePauseAd=e._handePauseAd.bind(e),r.on(T.EVENT.VAST_AD_START,e._handePollAdStart),r.on(T.EVENT.VPAID_AD_IMPRESSION,e._handePollAdStart),r.one(T.EVENT.AD_PAUSE_AD,e._handePauseAd),r.on(T.EVENT.AD_RESUME_AD,function(){r.one(T.EVENT.AD_PAUSE_AD,o._handePauseAd)}),r.on(T.EVENT.AD_PLAY,e._handePollAdPlay),r.on(T.EVENT.AD_END,e._handlePollAdEnded),e}return r(i,t.Plugin),k(i,[{key:"_handePollAdStart",value:function(){++w;var t=this.props.player;this.pausedAd_=!1,this.trackStatsInterval_=t.setInterval(this.trackStats,this.props.trackInterval),this.getStatsInterval_=t.setInterval(this.getStats,this.props.statsInterval)}},{key:"_handePollAdPlay",value:function(t,e){var n=this.props.player;if(e&&e.ads&&0!==e.ads.length){var a=n.vastAd.adPosition(),r=e.ads[0].id,o="-1";a&&(o=A[a]),this.setState({bid:r,atype:o})}}},{key:"_handePauseAd",value:function(){var t=this.props.track,e=this.state,n=e.adDuration,a=e.remainingTime,r=e.bid,o=e.atype,i=e.avdu,l=e.aview,u="-1";a&&n>=a&&(u=(u=n-a).toFixed(1)),t({avdu:i||"-1",bid:r,atype:o,actime:u,aview:l,aidx:w,evt:g.pausedAd})}},{key:"_handlePollAdEnded",value:function(){var t=this.props.player;t.clearInterval(this.trackStatsInterval_),t.clearInterval(this.getStatsInterval_),this.state={}}},{key:"getStats",value:function(){var t=this,n=this.props.player,a=this.state.adDuration,r=n.vastAd.adUnit(),o=!1;try{o=n.vastAd.paused(),this.setState({apaused:o?1:0})}catch(t){}a||r.getAdDuration().then(function(n){t.setState({adDuration:n,avdu:e(n)})}),r.getAdRemainingTime().then(function(e){t.setState({remainingTime:e})});try{var i=n.el_.getBoundingClientRect(),l=1;i.top<0?l=i.height+i.top>0?(i.height+i.top)/i.height:0:i.top+i.height>window.screen.height&&(l=i.top<window.screen.height?(window.screen.height-i.top)/i.height:0),l=l.toFixed(2),this.setState({aview:l})}catch(t){}}},{key:"trackStats",value:function(){var t=this.props.track,e=this.props.player,n=Math.ceil(100*e.volume()),a=this.state,r=a.adDuration,o=a.remainingTime,i=a.bid,l=a.atype,u=a.avdu,c=a.aview,d=a.apaused;if(e.muted()&&(n=0),r&&!d){var s="-1";o&&r>=o&&(s=(s=r-o).toFixed(1)),t({advolume:n,avdu:u||"-1",bid:i,atype:l,actime:s,aview:c,aidx:w,evt:g.adpoll})}}}]),i}();S.defaultProps={trackInterval:1e3,statsInterval:200};var R=function(t,e){new S({player:t,track:e})},D=function(t,e){var n=t.options().scriptinfo,a="-1",r="-1";if(n){var o=n.plugins;if(a=n.core.version,o&&0!==o.length){var i=[];o.forEach(function(t){var e=t.name,n=t.version;i.push(e+":"+n)}),r=i.join(";")}}e({pvs:a,pplvs:r,evt:g.load})},O=function(t,e){t.one("play",function(){e({evt:g.play})})},N=t.playerconfig.DEFAULT,U=function(t,e){function n(){t.vastAd||a()}function a(){t.off("play",n),e({evt:g.replay})}t.on(N.EVENT.PLAYER_ENDED_CONTEND,function(){t.off("play",n),t.on("play",n)})},x=t.playerconfig.DEFAULT,F=function(t,e){t.on(x.EVENT.USER_PAUSE,function(){e({evt:g.pause})})},V=t.playerconfig.DEFAULT,j=function(t,e){t.on(V.EVENT.USER_RESUME,function(){e({evt:g.resume})})},L=function(t,e){window.onbeforeunload=function(){var n=t.currentTime();e({evt:g.close,lvt:n})}},I=function(t,e){t.on("fullscreenchange",function(){var n="fullscreen";t.isFullscreen()||(n="normalscreen"),e({evt:g[n]})})},C=function(t,e){function n(t,e){var n=t.time;return e>=n&&e<=n+5e3}function a(t,a){var r=o[t];r.tracked||n(r,a)&&(r.tracked=!0,e({evt:g[t]}))}function r(){if(o){var e=1e3*t.currentTime(),n=o,r=n.firstQuartile,i=n.midpoint,l=n.thirdQuartile;r.tracked||a("firstQuartile",e),i.tracked||a("midpoint",e),l.tracked||a("thirdQuartile",e)}}t.one("loadedmetadata",function(){var e=t.duration();o={firstQuartile:{tracked:!1,time:Math.round(25*e*1e3)/100},midpoint:{tracked:!1,time:Math.round(50*e*1e3)/100},thirdQuartile:{tracked:!1,time:Math.round(75*e*1e3)/100}}}),t.one("play",function(){t.on("timeupdate",r)});var o=void 0},M=t.playerconfig.DEFAULT,Q=function(t,e){t.one(M.EVENT.PLAYER_ENDED_CONTEND,function(){e({evt:g.endedcontent})})},Y=function(){function t(t,e){for(var n=0;n<e.length;n++){var a=e[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(t,a.key,a)}}return function(e,n,a){return n&&t(e.prototype,n),a&&t(e,a),e}}(),q=t.playerconfig.DEFAULT,B={0:0,144:1,240:2,360:3,480:4,720:5,1080:6},z=0,G=function(e){function n(t){o(this,n);var e=i(this,(n.__proto__||Object.getPrototypeOf(n)).call(this,t)),a=e.props.player;return e._handePollAdStart=e._handePollAdStart.bind(e),e._handlePollAdEnded=e._handlePollAdEnded.bind(e),e._handleTimeUpdate=e._handleTimeUpdate.bind(e),e.startPoll=e.startPoll.bind(e),e.stopPoll=e.stopPoll.bind(e),e._updatePoll=e._updatePoll.bind(e),a.on("play",e.startPoll),a.on("pause",e.stopPoll),a.on("ended",e.stopPoll),a.on("timeupdate",e._handleTimeUpdate),a.on(q.EVENT.AD_START,e._handePollAdStart),a.on(q.EVENT.AD_END,e._handlePollAdEnded),e}return l(n,t.Plugin),Y(n,[{key:"_handePollAdStart",value:function(){var t=this.props.player;t.off("play",this.startPoll),t.off("timeupdate",this._handleTimeUpdate),this.stopPoll()}},{key:"_handlePollAdEnded",value:function(){var t=this.props.player;t.on("timeupdate",this._handleTimeUpdate),t.on("play",this.startPoll)}},{key:"_handleTimeUpdate",value:function(){var t=this.props.player,e=void 0;try{e=t.tech_.el_.videoHeight}catch(t){return}this.state.last_video_height!==e&&this.setState({last_video_height:e})}},{key:"startPoll",value:function(){this.pollInterval&&this.stopPoll(),this.pollInterval=setInterval(this._updatePoll,this.props.pollInterval)}},{key:"stopPoll",value:function(){this.pollInterval&&(clearInterval(this.pollInterval),this.pollInterval=null)}},{key:"dispose",value:function(){var t=this.props.player;this.stopPoll(),t.off("play",this.startPoll),t.off("pause",this.stopPoll),t.off("ended",this.stopPoll),t.off("timeupdate",this._handleTimeUpdate),t.off(q.EVENT.AD_START,this._handePollAdStart),t.off(q.EVENT.AD_END,this._handlePollAdEnded)}},{key:"_updatePoll",value:function(){var t=this.props,e=t.track,n=t.player,a=this.currentQuality(),r=B[a],o=0,i=0;try{var l=n.buffered(),u=n.currentTime();o=(o=l.end(l.length-1)-u)>=0?Math.floor(o):0}catch(t){}try{i=n.tech_.el_.webkitDroppedFrameCount?n.tech_.el_.webkitDroppedFrameCount:n.tech_.el_.getVideoPlaybackQuality().droppedVideoFrames}catch(t){}z>=parseInt(n.duration()/3)?this.dispose():(z++,e({evt:g.poll,cqua:r,bft:o,drf:i}))}},{key:"currentQuality",value:function(){var t=this.state.last_video_height;return t>=1080?1080:t>=720?720:t>=480?480:t>=360?360:t>=240?240:144}}]),n}();G.defaultProps={pollInterval:6e3};var H=function(t,e){new G({player:t,track:e})},K=function(){function t(t,e){for(var n=0;n<e.length;n++){var a=e[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(t,a.key,a)}}return function(e,n,a){return n&&t(e.prototype,n),a&&t(e,a),e}}(),W=t.playerconfig.DEFAULT,J={preroll:1,midroll:2,postroll:3,interactive:4},X=function(e){function n(t){u(this,n);var e=c(this,(n.__proto__||Object.getPrototypeOf(n)).call(this,t)),a=e.props.player;return e.aidx=0,e.trackStartAd=e.trackStartAd.bind(e),e._handleReplay=e._handleReplay.bind(e),a.on(W.EVENT.VAST_AD_START,e.trackStartAd),a.on(W.EVENT.VPAID_AD_IMPRESSION,e.trackStartAd),a.on(W.EVENT.PLAYER_REPLAY_CONTEND,e._handleReplay),a.on(W.EVENT.USER_REPLAY_CONTENT,e._handleReplay),e}return d(n,t.Plugin),K(n,[{key:"trackStartAd",value:function(){++this.aidx;var t=this.props,e=t.player,n=t.track,a=e.vastAd.vastResponse(),r=e.vastAd.adPosition(),o=a.ads[0].id,i="-1";r&&(i=J[r]),n({evt:g.adstart,bid:o,atype:i,aidx:this.aidx})}},{key:"_handleReplay",value:function(){this.aidx=0}}]),n}(),Z=function(t,e){new X({player:t,track:e})},$=t.playerconfig.DEFAULT,tt=function(t,e){function n(){if(i.length){for(var n=0,a=0,o=0,l=0,u=0,c=i.length;i.length;){var d=i.shift();n+=d.bitreceive,a+=d.roundTrip,o+=d.apb,l=d.tbf,u=d.trq}var s=n;a>1e3&&(s=1e3*s/a);var p=0,h=0;try{var f=t.buffered(),v=t.currentTime();p=(p=f.end(f.length-1)-v)>=0?Math.floor(p):0}catch(t){}try{h=t.tech_.el_.webkitDroppedFrameCount?t.tech_.el_.webkitDroppedFrameCount:t.tech_.el_.getVideoPlaybackQuality().droppedVideoFrames}catch(t){}var y=h-r;r=h,e({bft:p,nbf:c,size:Math.ceil(n/8),tbf:l,trq:u,drf:y,apb:Math.round(o),evt:g["bit-receive"],bw:Math.round(s)})}}function a(t,e){var a=e.data,r=a.stats,o=a.frag,l=8*r.total,u=r.tbuffered-r.trequest;i.push({bitreceive:l,roundTrip:u,tbf:Math.ceil(r.tbuffered),trq:Math.ceil(r.trequest),apb:o.duration}),n()}var r=0;t.on("loadedmetadata",function(){o&&o.off($.EVENT.HLS_FRAG_BUFFERED,a),(o=t.tech_).on($.EVENT.HLS_FRAG_BUFFERED,a)});var o=void 0,i=[]},et=function(t,e){var n=void 0,a=void 0;t.one("play",function(){n=Date.now()}),t.one("playing",function(){a=Date.now();var t=0;n&&a&&(t=(t=a-n)>=0?t:0),e({tts:t,evt:g.timetostart})})},nt=t.playerconfig.DEFAULT,at=function(t,e){t.on(nt.EVENT.PLAYER_ERROR,function(t,n){var a="-1";switch(n.code){case nt.ERROR.ERROR_100.code:a=1;break;default:a=n.code}e({evt:g.error,err:a})}),t.one("play",function(){t.setTimeout(function(){var n=t.currentTime();t.paused()||0!==n||e({evt:g.error,err:2})},1e4)})},rt=function(t,e){t.on("waiting",function(){var n=t.currentTime().toFixed(1);e({ctime:n,evt:g.waiting})})},ot=t.playerconfig.DEFAULT,it=function(t,e){function n(t,e){e({vlm:t})}var a,r;t.on("ready",function(){a=Math.ceil(100*t.volume()),t.muted()&&(a=0)}),t.on(ot.EVENT.USER_CHANGE_MUTE,function(o,i){a=Math.ceil(100*t.volume()),i?(r=a+":0",a=0):r="0:"+a,n(r,e)}),t.on(ot.EVENT.TRACKING_VOLUME,function(t,o){a!==o?(r=a+":"+o,a=o,n(r,e)):a=o})},lt=function(){function t(t,e){for(var n=0;n<e.length;n++){var a=e[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(t,a.key,a)}}return function(e,n,a){return n&&t(e.prototype,n),a&&t(e,a),e}}(),ut=t.playerconfig.DEFAULT,ct=function(e){function n(t){s(this,n);var e=p(this,(n.__proto__||Object.getPrototypeOf(n)).call(this,t));e.state={last_currentTime:0};var a=e.props.player;return e.pdu=0,e._handeAdStart=e._handeAdStart.bind(e),e._handleRestorePlayback=e._handleRestorePlayback.bind(e),e.handleCalculatePdu=e.handleCalculatePdu.bind(e),e.handleUpdateFlagPdu=e.handleUpdateFlagPdu.bind(e),e._handleReplay=e._handleReplay.bind(e),a.on("timeupdate",e.handleCalculatePdu),a.on("seeking",e.handleUpdateFlagPdu),a.on(ut.EVENT.AD_START,e._handeAdStart),a.on(ut.EVENT.AD_RESTORED_PLAYBACK,e._handleRestorePlayback),a.on(ut.EVENT.PLAYER_REPLAY_CONTEND,e._handleReplay),a.on(ut.EVENT.USER_REPLAY_CONTENT,e._handleReplay),e}return h(n,t.Plugin),lt(n,[{key:"_handleReplay",value:function(){this.pdu=0,this.setState({last_currentTime:0})}},{key:"_handeAdStart",value:function(){var t=this.props.player;t.off("timeupdate",this.handleCalculatePdu),t.off("seeking",this.handleUpdateFlagPdu)}},{key:"_handleRestorePlayback",value:function(){var t=this.props.player;t.on("timeupdate",this.handleCalculatePdu),t.on("seeking",this.handleUpdateFlagPdu)}},{key:"handleCalculatePdu",value:function(){var t=this.props.player,e=this.state.last_currentTime,n=t.currentTime();if(this.setState({last_currentTime:n}),n<=e)this.setState({last_currentTime:n});else{var a=n-e;a>2||(this.pdu+=a,this.updatePDU())}}},{key:"handleUpdateFlagPdu",value:function(){var t=this,e=this.props.player;e.off("timeupdate",this.handleCalculatePdu),e.one("seeked",function(){var n=e.currentTime();t.setState({last_currentTime:n}),e.on("timeupdate",t.handleCalculatePdu)})}},{key:"updatePDU",value:function(){this.props.updatePDU(Math.round(this.pdu))}}]),n}(),dt=function(t,e){new ct({player:t,updatePDU:e})},st=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(t[a]=n[a])}return t},pt=function(){function t(t,e){for(var n=0;n<e.length;n++){var a=e[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(t,a.key,a)}}return function(e,n,a){return n&&t(e.prototype,n),a&&t(e,a),e}}(),ht=t.playerconfig.DEFAULT,ft=function(n){function a(t){f(this,a);var e=v(this,(a.__proto__||Object.getPrototypeOf(a)).call(this,t));e.waitTrack=[];var n=e,r=e.props,o=r.player,i=r.defaultParams,l=r.ref,u=r.onlyAds,c=void 0!==u&&u,d=o.options().params,s=d.pid||E(),p=l?decodeURIComponent(l):document.referrer?document.referrer:location.href,h=document.location.href;/adminplayer\.sohatv\.vn/.test(h)&&(h=p),window.top!=window.self&&(h=p);var y=h.match(/(http[s]?:\/\/)?([^\/\s]+)(\/.*)/),_="-1",m="-1",b="-1";y&&y.length&&(_=y[3],m=y[2],b=P[m]||"-1");var g=c?0:o.options().params.live?2:1,k=d.vtype||"-1",T=d.key||"-1";return o.options().params.live&&(p+="&vid="+o.options().params.v),e.state={params:st({key:T,dmn:m,dmnid:b,path:_,vtype:k,vtarget:g,ref:p,vid:d.vid||d.v||d.file||d.mp4||d.m3u8||"-1",bw:"-1",pid:s,vdu:"-1",ctime:"-1",guid:"-1",ptype:1,pdu:0},i)},e.updatePDU=e.updatePDU.bind(e),e.track=e.track.bind(e),e._handleLoadedmetadata=e._handleLoadedmetadata.bind(e),e._handleTimeUpdate=e._handleTimeUpdate.bind(e),e._handleLastBitrate=e._handleLastBitrate.bind(e),e._handleReplay=e._handleReplay.bind(e),o.on("loadedmetadata",e._handleLoadedmetadata),o.one("play",function(){o.on("timeupdate",n._handleTimeUpdate)}),o.on(ht.EVENT.PLAYER_ENDED_CONTEND,function(){o.off("play",n._handleReplay),o.on("play",n._handleReplay)}),R(o,e.track),D(o,e.track),O(o,e.track),U(o,e.track),F(o,e.track),j(o,e.track),L(o,e.track),I(o,e.track),C(o,e.track),Q(o,e.track),H(o,e.track),Z(o,e.track),tt(o,e.track),et(o,e.track),at(o,e.track),rt(o,e.track),it(o,e.track),dt(o,e.updatePDU),e}return y(a,t.Plugin),pt(a,[{key:"getDefaultProps",value:function(){return{track_url:"//lg1.logging.admicro.vn/video_track?",defaultParams:{}}}}]),pt(a,[{key:"_handleReplay",value:function(){if(!this.props.player.vastAd){var t=this.state.params;t.pid=E(),t.pdu=0,t.ptype=2}}},{key:"updatePDU",value:function(t){this.state.params.pdu=t}},{key:"_trackWaitEvent",value:function(){for(var t=this.waitTrack;t.length;){var e=t.shift();this.track(e)}}},{key:"track",value:function(t){var e=t.evt;if(!this.isFirstPlay)switch(e){case g.play:this.isFirstPlay=!0,setTimeout(this._trackWaitEvent.bind(this),100);break;case g.load:break;default:return void this.waitTrack.push(t)}var n=this.state.params,a=this.props.track_url,r=st({},n,t),o=b(r);(new Image).src=a+o}},{key:"_handleLoadedmetadata",value:function(){var t=this.props.player,n=this.state.params,a=t.duration();"-1"===n.vdu&&a>0&&a!==1/0&&(n.vdu=e(a)),this.tech_&&this.tech_.off(ht.EVENT.HLS_FRAG_BUFFERED,this._handleLastBitrate),this.tech_=t.tech_,this.tech_.on(ht.EVENT.HLS_FRAG_BUFFERED,this._handleLastBitrate)}},{key:"_handleTimeUpdate",value:function(){var t=this.props.player;if(!t.vastAd){var e=this.state.params,n=t.currentTime();e.ctime=n.toFixed(1)}}},{key:"_handleLastBitrate",value:function(t,e){var n=e.data,a=this.state.params,r=Math.round(8*n.stats.total*1e3/(n.stats.tbuffered-n.stats.trequest));a.bw=r}}]),a}(),vt=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(t[a]=n[a])}return t};_.registerPlugin("vcTrackingPlugin",function(t){new ft(vt({},t,{player:this}))})})}();/**
 * midrollPlugin - v1.0.0 - 09:44:51 17-09-2019
 * Author: TuanLDT
 */

!function(){var t=void 0;!function(e,n){"object"==typeof exports&&"undefined"!=typeof module?n(require("playercore"),require("react")):"function"==typeof t&&t.amd?t(["playercore","react"],n):n(e.Kenh14PlayerCore,e.React)}(this,function(t,e){"use strict";function n(t){return t&&t.__esModule&&Object.prototype.hasOwnProperty.call(t,"default")?t.default:t}function r(t,e){return e={exports:{}},t(e,e.exports),e.exports}var o="default"in t?t.default:t,i="default"in e?e.default:e,u=function(t){if(void 0==t)throw TypeError("Can't call method on  "+t);return t},a=function(t){return Object(u(t))},s={}.hasOwnProperty,l=function(t,e){return s.call(t,e)},c=r(function(t){var e=t.exports={version:"2.6.9"};"number"==typeof __e&&(__e=e)}),f=r(function(t){var e=t.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=e)}),p=r(function(t){var e=f["__core-js_shared__"]||(f["__core-js_shared__"]={});(t.exports=function(t,n){return e[t]||(e[t]=void 0!==n?n:{})})("versions",[]).push({version:c.version,mode:"pure",copyright:"© 2019 Denis Pushkarev (zloirock.ru)"})}),d=0,h=Math.random(),y=function(t){return"Symbol(".concat(void 0===t?"":t,")_",(++d+h).toString(36))},v=p("keys"),m=function(t){return v[t]||(v[t]=y(t))},_=m("IE_PROTO"),S=Object.prototype,b=Object.getPrototypeOf||function(t){return t=a(t),l(t,_)?t[_]:"function"==typeof t.constructor&&t instanceof t.constructor?t.constructor.prototype:t instanceof Object?S:null},E=function(t){if("function"!=typeof t)throw TypeError(t+" is not a function!");return t},g=function(t,e,n){if(E(t),void 0===e)return t;switch(n){case 1:return function(n){return t.call(e,n)};case 2:return function(n,r){return t.call(e,n,r)};case 3:return function(n,r,o){return t.call(e,n,r,o)}}return function(){return t.apply(e,arguments)}},O=function(t){return"object"==typeof t?null!==t:"function"==typeof t},T=function(t){if(!O(t))throw TypeError(t+" is not an object!");return t},P=function(t){try{return!!t()}catch(t){return!0}},R=!P(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a}),M=f.document,L=O(M)&&O(M.createElement),D=function(t){return L?M.createElement(t):{}},w=!R&&!P(function(){return 7!=Object.defineProperty(D("div"),"a",{get:function(){return 7}}).a}),k=function(t,e){if(!O(t))return t;var n,r;if(e&&"function"==typeof(n=t.toString)&&!O(r=n.call(t)))return r;if("function"==typeof(n=t.valueOf)&&!O(r=n.call(t)))return r;if(!e&&"function"==typeof(n=t.toString)&&!O(r=n.call(t)))return r;throw TypeError("Can't convert object to primitive value")},A=Object.defineProperty,N={f:R?Object.defineProperty:function(t,e,n){if(T(t),e=k(e,!0),T(n),w)try{return A(t,e,n)}catch(t){}if("get"in n||"set"in n)throw TypeError("Accessors not supported!");return"value"in n&&(t[e]=n.value),t}},j=function(t,e){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}},I=R?function(t,e,n){return N.f(t,e,j(1,n))}:function(t,e,n){return t[e]=n,t},V=function(t,e,n){var r,o,i,u=t&V.F,a=t&V.G,s=t&V.S,p=t&V.P,d=t&V.B,h=t&V.W,y=a?c:c[e]||(c[e]={}),v=y.prototype,m=a?f:s?f[e]:(f[e]||{}).prototype;a&&(n=e);for(r in n)(o=!u&&m&&void 0!==m[r])&&l(y,r)||(i=o?m[r]:n[r],y[r]=a&&"function"!=typeof m[r]?n[r]:d&&o?g(i,f):h&&m[r]==i?function(t){var e=function(e,n,r){if(this instanceof t){switch(arguments.length){case 0:return new t;case 1:return new t(e);case 2:return new t(e,n)}return new t(e,n,r)}return t.apply(this,arguments)};return e.prototype=t.prototype,e}(i):p&&"function"==typeof i?g(Function.call,i):i,p&&((y.virtual||(y.virtual={}))[r]=i,t&V.R&&v&&!v[r]&&I(v,r,i)))};V.F=1,V.G=2,V.S=4,V.P=8,V.B=16,V.W=32,V.U=64,V.R=128;var x=V;!function(t,e){var n=(c.Object||{})[t]||Object[t],r={};r[t]=e(n),x(x.S+x.F*P(function(){n(1)}),"Object",r)}("getPrototypeOf",function(){return function(t){return b(a(t))}});var C=c.Object.getPrototypeOf,F=n(r(function(t){t.exports={default:C,__esModule:!0}})),H=n(r(function(t,e){e.__esModule=!0,e.default=function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}}));x(x.S+x.F*!R,"Object",{defineProperty:N.f});var G=c.Object,U=function(t,e,n){return G.defineProperty(t,e,n)},W=r(function(t){t.exports={default:U,__esModule:!0}});n(W);var q=n(r(function(t,e){e.__esModule=!0;var n=function(t){return t&&t.__esModule?t:{default:t}}(W);e.default=function(){function t(t,e){for(var r=0;r<e.length;r++){var o=e[r];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),(0,n.default)(t,o.key,o)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}()})),B=Math.ceil,J=Math.floor,K=function(t){return isNaN(t=+t)?0:(t>0?J:B)(t)},z=I,Y={},Q={}.toString,X=function(t){return Q.call(t).slice(8,-1)},Z=Object("z").propertyIsEnumerable(0)?Object:function(t){return"String"==X(t)?t.split(""):Object(t)},$=function(t){return Z(u(t))},tt=Math.min,et=function(t){return t>0?tt(K(t),9007199254740991):0},nt=Math.max,rt=Math.min,ot=function(t,e){return(t=K(t))<0?nt(t+e,0):rt(t,e)},it=function(t){return function(e,n,r){var o,i=$(e),u=et(i.length),a=ot(r,u);if(t&&n!=n){for(;u>a;)if((o=i[a++])!=o)return!0}else for(;u>a;a++)if((t||a in i)&&i[a]===n)return t||a||0;return!t&&-1}}(!1),ut=m("IE_PROTO"),at=function(t,e){var n,r=$(t),o=0,i=[];for(n in r)n!=ut&&l(r,n)&&i.push(n);for(;e.length>o;)l(r,n=e[o++])&&(~it(i,n)||i.push(n));return i},st="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(","),lt=Object.keys||function(t){return at(t,st)},ct=R?Object.defineProperties:function(t,e){T(t);for(var n,r=lt(e),o=r.length,i=0;o>i;)N.f(t,n=r[i++],e[n]);return t},ft=f.document,pt=ft&&ft.documentElement,dt=m("IE_PROTO"),ht=function(){},yt=function(){var t,e=D("iframe"),n=st.length;for(e.style.display="none",pt.appendChild(e),e.src="javascript:",(t=e.contentWindow.document).open(),t.write("<script>document.F=Object<\/script>"),t.close(),yt=t.F;n--;)delete yt.prototype[st[n]];return yt()},vt=Object.create||function(t,e){var n;return null!==t?(ht.prototype=T(t),n=new ht,ht.prototype=null,n[dt]=t):n=yt(),void 0===e?n:ct(n,e)},mt=r(function(t){var e=p("wks"),n=f.Symbol,r="function"==typeof n;(t.exports=function(t){return e[t]||(e[t]=r&&n[t]||(r?n:y)("Symbol."+t))}).store=e}),_t=N.f,St=mt("toStringTag"),bt=function(t,e,n){t&&!l(t=n?t:t.prototype,St)&&_t(t,St,{configurable:!0,value:e})},Et={};I(Et,mt("iterator"),function(){return this});var gt=function(t,e,n){t.prototype=vt(Et,{next:j(1,n)}),bt(t,e+" Iterator")},Ot=mt("iterator"),Tt=!([].keys&&"next"in[].keys()),Pt=function(){return this},Rt=function(t,e,n,r,o,i,u){gt(n,e,r);var a,s,l,c=function(t){if(!Tt&&t in h)return h[t];switch(t){case"keys":case"values":return function(){return new n(this,t)}}return function(){return new n(this,t)}},f=e+" Iterator",p="values"==o,d=!1,h=t.prototype,y=h[Ot]||h["@@iterator"]||o&&h[o],v=y||c(o),m=o?p?c("entries"):v:void 0,_="Array"==e?h.entries||y:y;if(_&&(l=b(_.call(new t)))!==Object.prototype&&l.next&&bt(l,f,!0),p&&y&&"values"!==y.name&&(d=!0,v=function(){return y.call(this)}),u&&(Tt||d||!h[Ot])&&I(h,Ot,v),Y[e]=v,Y[f]=Pt,o)if(a={values:p?v:c("values"),keys:i?v:c("keys"),entries:m},u)for(s in a)s in h||z(h,s,a[s]);else x(x.P+x.F*(Tt||d),e,a);return a},Mt=function(t){return function(e,n){var r,o,i=String(u(e)),a=K(n),s=i.length;return a<0||a>=s?t?"":void 0:(r=i.charCodeAt(a))<55296||r>56319||a+1===s||(o=i.charCodeAt(a+1))<56320||o>57343?t?i.charAt(a):r:t?i.slice(a,a+2):o-56320+(r-55296<<10)+65536}}(!0);Rt(String,"String",function(t){this._t=String(t),this._i=0},function(){var t,e=this._t,n=this._i;return n>=e.length?{value:void 0,done:!0}:(t=Mt(e,n),this._i+=t.length,{value:t,done:!1})});var Lt=function(t,e){return{value:e,done:!!t}};Rt(Array,"Array",function(t,e){this._t=$(t),this._i=0,this._k=e},function(){var t=this._t,e=this._k,n=this._i++;return!t||n>=t.length?(this._t=void 0,Lt(1)):"keys"==e?Lt(0,n):"values"==e?Lt(0,t[n]):Lt(0,[n,t[n]])},"values");Y.Arguments=Y.Array;for(var Dt=mt("toStringTag"),wt="CSSRuleList,CSSStyleDeclaration,CSSValueList,ClientRectList,DOMRectList,DOMStringList,DOMTokenList,DataTransferItemList,FileList,HTMLAllCollection,HTMLCollection,HTMLFormElement,HTMLSelectElement,MediaList,MimeTypeArray,NamedNodeMap,NodeList,PaintRequestList,Plugin,PluginArray,SVGLengthList,SVGNumberList,SVGPathSegList,SVGPointList,SVGStringList,SVGTransformList,SourceBufferList,StyleSheetList,TextTrackCueList,TextTrackList,TouchList".split(","),kt=0;kt<wt.length;kt++){var At=wt[kt],Nt=f[At],jt=Nt&&Nt.prototype;jt&&!jt[Dt]&&I(jt,Dt,At),Y[At]=Y.Array}var It={f:mt},Vt=It.f("iterator"),xt=r(function(t){t.exports={default:Vt,__esModule:!0}});n(xt);var Ct=r(function(t){var e=y("meta"),n=N.f,r=0,o=Object.isExtensible||function(){return!0},i=!P(function(){return o(Object.preventExtensions({}))}),u=function(t){n(t,e,{value:{i:"O"+ ++r,w:{}}})},a=t.exports={KEY:e,NEED:!1,fastKey:function(t,n){if(!O(t))return"symbol"==typeof t?t:("string"==typeof t?"S":"P")+t;if(!l(t,e)){if(!o(t))return"F";if(!n)return"E";u(t)}return t[e].i},getWeak:function(t,n){if(!l(t,e)){if(!o(t))return!0;if(!n)return!1;u(t)}return t[e].w},onFreeze:function(t){return i&&a.NEED&&o(t)&&!l(t,e)&&u(t),t}}}),Ft=N.f,Ht=function(t){var e=c.Symbol||(c.Symbol={});"_"==t.charAt(0)||t in e||Ft(e,t,{value:It.f(t)})},Gt={f:Object.getOwnPropertySymbols},Ut={f:{}.propertyIsEnumerable},Wt=function(t){var e=lt(t),n=Gt.f;if(n)for(var r,o=n(t),i=Ut.f,u=0;o.length>u;)i.call(t,r=o[u++])&&e.push(r);return e},qt=Array.isArray||function(t){return"Array"==X(t)},Bt=st.concat("length","prototype"),Jt={f:Object.getOwnPropertyNames||function(t){return at(t,Bt)}},Kt=Jt.f,zt={}.toString,Yt="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[],Qt=function(t){try{return Kt(t)}catch(t){return Yt.slice()}},Xt={f:function(t){return Yt&&"[object Window]"==zt.call(t)?Qt(t):Kt($(t))}},Zt=Object.getOwnPropertyDescriptor,$t={f:R?Zt:function(t,e){if(t=$(t),e=k(e,!0),w)try{return Zt(t,e)}catch(t){}if(l(t,e))return j(!Ut.f.call(t,e),t[e])}},te=Ct.KEY,ee=$t.f,ne=N.f,re=Xt.f,oe=f.Symbol,ie=f.JSON,ue=ie&&ie.stringify,ae=mt("_hidden"),se=mt("toPrimitive"),le={}.propertyIsEnumerable,ce=p("symbol-registry"),fe=p("symbols"),pe=p("op-symbols"),de=Object.prototype,he="function"==typeof oe&&!!Gt.f,ye=f.QObject,ve=!ye||!ye.prototype||!ye.prototype.findChild,me=R&&P(function(){return 7!=vt(ne({},"a",{get:function(){return ne(this,"a",{value:7}).a}})).a})?function(t,e,n){var r=ee(de,e);r&&delete de[e],ne(t,e,n),r&&t!==de&&ne(de,e,r)}:ne,_e=function(t){var e=fe[t]=vt(oe.prototype);return e._k=t,e},Se=he&&"symbol"==typeof oe.iterator?function(t){return"symbol"==typeof t}:function(t){return t instanceof oe},be=function(t,e,n){return t===de&&be(pe,e,n),T(t),e=k(e,!0),T(n),l(fe,e)?(n.enumerable?(l(t,ae)&&t[ae][e]&&(t[ae][e]=!1),n=vt(n,{enumerable:j(0,!1)})):(l(t,ae)||ne(t,ae,j(1,{})),t[ae][e]=!0),me(t,e,n)):ne(t,e,n)},Ee=function(t,e){T(t);for(var n,r=Wt(e=$(e)),o=0,i=r.length;i>o;)be(t,n=r[o++],e[n]);return t},ge=function(t){var e=le.call(this,t=k(t,!0));return!(this===de&&l(fe,t)&&!l(pe,t))&&(!(e||!l(this,t)||!l(fe,t)||l(this,ae)&&this[ae][t])||e)},Oe=function(t,e){if(t=$(t),e=k(e,!0),t!==de||!l(fe,e)||l(pe,e)){var n=ee(t,e);return!n||!l(fe,e)||l(t,ae)&&t[ae][e]||(n.enumerable=!0),n}},Te=function(t){for(var e,n=re($(t)),r=[],o=0;n.length>o;)l(fe,e=n[o++])||e==ae||e==te||r.push(e);return r},Pe=function(t){for(var e,n=t===de,r=re(n?pe:$(t)),o=[],i=0;r.length>i;)!l(fe,e=r[i++])||n&&!l(de,e)||o.push(fe[e]);return o};he||(z((oe=function(){if(this instanceof oe)throw TypeError("Symbol is not a constructor!");var t=y(arguments.length>0?arguments[0]:void 0),e=function(n){this===de&&e.call(pe,n),l(this,ae)&&l(this[ae],t)&&(this[ae][t]=!1),me(this,t,j(1,n))};return R&&ve&&me(de,t,{configurable:!0,set:e}),_e(t)}).prototype,"toString",function(){return this._k}),$t.f=Oe,N.f=be,Jt.f=Xt.f=Te,Ut.f=ge,Gt.f=Pe,It.f=function(t){return _e(mt(t))}),x(x.G+x.W+x.F*!he,{Symbol:oe});for(var Re="hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","),Me=0;Re.length>Me;)mt(Re[Me++]);for(var Le=lt(mt.store),De=0;Le.length>De;)Ht(Le[De++]);x(x.S+x.F*!he,"Symbol",{for:function(t){return l(ce,t+="")?ce[t]:ce[t]=oe(t)},keyFor:function(t){if(!Se(t))throw TypeError(t+" is not a symbol!");for(var e in ce)if(ce[e]===t)return e},useSetter:function(){ve=!0},useSimple:function(){ve=!1}}),x(x.S+x.F*!he,"Object",{create:function(t,e){return void 0===e?vt(t):Ee(vt(t),e)},defineProperty:be,defineProperties:Ee,getOwnPropertyDescriptor:Oe,getOwnPropertyNames:Te,getOwnPropertySymbols:Pe});var we=P(function(){Gt.f(1)});x(x.S+x.F*we,"Object",{getOwnPropertySymbols:function(t){return Gt.f(a(t))}}),ie&&x(x.S+x.F*(!he||P(function(){var t=oe();return"[null]"!=ue([t])||"{}"!=ue({a:t})||"{}"!=ue(Object(t))})),"JSON",{stringify:function(t){for(var e,n,r=[t],o=1;arguments.length>o;)r.push(arguments[o++]);if(n=e=r[1],(O(e)||void 0!==t)&&!Se(t))return qt(e)||(e=function(t,e){if("function"==typeof n&&(e=n.call(this,t,e)),!Se(e))return e}),r[1]=e,ue.apply(ie,r)}}),oe.prototype[se]||I(oe.prototype,se,oe.prototype.valueOf),bt(oe,"Symbol"),bt(Math,"Math",!0),bt(f.JSON,"JSON",!0),Ht("asyncIterator"),Ht("observable");var ke=c.Symbol,Ae=r(function(t){t.exports={default:ke,__esModule:!0}});n(Ae);var Ne=r(function(t,e){function n(t){return t&&t.__esModule?t:{default:t}}e.__esModule=!0;var r=n(xt),o=n(Ae),i="function"==typeof o.default&&"symbol"==typeof r.default?function(t){return typeof t}:function(t){return t&&"function"==typeof o.default&&t.constructor===o.default&&t!==o.default.prototype?"symbol":typeof t};e.default="function"==typeof o.default&&"symbol"===i(r.default)?function(t){return void 0===t?"undefined":i(t)}:function(t){return t&&"function"==typeof o.default&&t.constructor===o.default&&t!==o.default.prototype?"symbol":void 0===t?"undefined":i(t)}});n(Ne);var je=n(r(function(t,e){e.__esModule=!0;var n=function(t){return t&&t.__esModule?t:{default:t}}(Ne);e.default=function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!==(void 0===e?"undefined":(0,n.default)(e))&&"function"!=typeof e?t:e}})),Ie=function(t,e){if(T(t),!O(e)&&null!==e)throw TypeError(e+": can't set as prototype!")},Ve={set:Object.setPrototypeOf||("__proto__"in{}?function(t,e,n){try{(n=g(Function.call,$t.f(Object.prototype,"__proto__").set,2))(t,[]),e=!(t instanceof Array)}catch(t){e=!0}return function(t,r){return Ie(t,r),e?t.__proto__=r:n(t,r),t}}({},!1):void 0),check:Ie};x(x.S,"Object",{setPrototypeOf:Ve.set});var xe=c.Object.setPrototypeOf,Ce=r(function(t){t.exports={default:xe,__esModule:!0}});n(Ce),x(x.S,"Object",{create:vt});var Fe=c.Object,He=function(t,e){return Fe.create(t,e)},Ge=r(function(t){t.exports={default:He,__esModule:!0}});n(Ge);var Ue,We,qe,Be,Je=n(r(function(t,e){function n(t){return t&&t.__esModule?t:{default:t}}e.__esModule=!0;var r=n(Ce),o=n(Ge),i=n(Ne);e.default=function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+(void 0===e?"undefined":(0,i.default)(e)));t.prototype=(0,o.default)(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(r.default?(0,r.default)(t,e):t.__proto__=e)}})),Ke=t.playerconfig.DEFAULT,ze={IDLE:"IDLE",PREPAIRING:"PREPAIRING",RUNNING:"RUNNING",DISPOSE:"DISPOSE"},Ye=(We=Ue=function(t){function e(t){H(this,e);var n=je(this,(e.__proto__||F(e)).call(this,t));return n.state={left:null,dispose:!1},n.midrollState_=ze.IDLE,n.prepareSuccess=!1,n.checkDurationLittle=n.checkDurationLittle.bind(n),n.handleVastResponse=n.handleVastResponse.bind(n),n.handleStopOrResume=n.handleStopOrResume.bind(n),n.updatePosition=n.updatePosition.bind(n),n.stopHandleEvent=n.stopHandleEvent.bind(n),n.resumeHandleEvent=n.resumeHandleEvent.bind(n),n.checkToStartMidroll=n.checkToStartMidroll.bind(n),n}return Je(e,t),q(e,[{key:"componentDidMount",value:function(){var t=this.props.player;t.on("timeupdate",this.checkToStartMidroll),t.on("durationchange",this.checkDurationLittle),t.on("ignoreEventAds",this.handleStopOrResume),t.on(Ke.EVENT.AD_MIDROLL_VASTRESPONSE,this.handleVastResponse),t.on(Ke.EVENT.AD_END,this.handleStopOrResume),t.on(Ke.EVENT.AD_ORDER_START_MIDROLL,this.stopHandleEvent),t.on(Ke.EVENT.AD_START,this.stopHandleEvent),this.checkDurationLittle()}},{key:"componentWillUnmount",value:function(){var t=this.props.player;t.off("timeupdate",this.checkToStartMidroll),t.off("durationchange",this.checkDurationLittle),t.off("ignoreEventAds",this.handleStopOrResume),t.off(Ke.EVENT.AD_END,this.handleStopOrResume),t.off(Ke.EVENT.AD_MIDROLL_VASTRESPONSE,this.handleVastResponse),t.off(Ke.EVENT.AD_ORDER_START_MIDROLL,this.stopHandleEvent),t.off(Ke.EVENT.AD_START,this.stopHandleEvent)}},{key:"checkDurationLittle",value:function(){var t=this.props,e=t.player,n=t.position.percent,r=!1,o=e.duration();o&&(e.off("durationchange",this.checkDurationLittle),o<40&&(r=!0),"0.8"===n&&o<360&&(r=!0),"0.5"===n&&o<120&&(r=!0),r?this.dispose():this.updatePosition())}},{key:"handleVastResponse",value:function(t,e){if(this.midrollState_===ze.PREPAIRING)return e?void(this.vastResponse=e):this.dispose()}},{key:"handleStopOrResume",value:function(){this.midrollState_===ze.IDLE?this.resumeHandleEvent():this.dispose()}},{key:"updatePosition",value:function(){var t=this.props,e=t.position,n=t.player,r=e.percent,o=e.seconds,i=n.duration();r?r=parseFloat(r):o&&(r=o/i);var u=100*r+"%",a=r*i;this.setState({left:u,starttime:a})}},{key:"stopHandleEvent",value:function(){this.props.player.off("timeupdate",this.checkToStartMidroll)}},{key:"resumeHandleEvent",value:function(){this.stopHandleEvent();var t=this,e=this.props.player;e.one("timeupdate",function(){e.on("timeupdate",t.checkToStartMidroll)})}},{key:"dispose",value:function(){var t=this.props.player;t.off("timeupdate",this.checkToStartMidroll),t.off("durationchange",this.checkDurationLittle),t.off("ignoreEventAds",this.handleStopOrResume),t.off(Ke.EVENT.AD_END,this.handleStopOrResume),t.off(Ke.EVENT.AD_ORDER_START_MIDROLL,this.stopHandleEvent),t.off(Ke.EVENT.AD_START,this.stopHandleEvent),this.setState({dispose:!0})}},{key:"midrollPrepare",value:function(){var t=this.props,e=t.player,n=t.index,r=this;if(this.midrollState_===ze.IDLE){var o=this.state.starttime;e.currentTime()+6>=o&&(this.midrollState_=ze.PREPAIRING,e.trigger("prepareMidrollVast",n+1),e.one("prepareMidrollVastSuccess",function(){r.prepareSuccess=!0}))}}},{key:"midrollCountDown",value:function(){var t=this.props,e=t.player,n=t.preLoad;if(this.midrollState_===ze.PREPAIRING&&this.vastResponse&&(!n||this.prepareSuccess)){var r=this.state.starttime,o=e.currentTime(),i=Math.round(r-o);i=i>=0&&i<=5?i:void 0,o>r&&e.trigger(Ke.EVENT.AD_ORDER_START_MIDROLL,this.vastResponse),0===i&&(this.midrollState_=ze.RUNNING,e.trigger(Ke.EVENT.AD_ORDER_START_MIDROLL,this.vastResponse)),this.setState({timeToStart:i})}}},{key:"checkToStartMidroll",value:function(){this.midrollPrepare(),this.midrollCountDown()}},{key:"render",value:function(){var t=this.state,e=t.left,n=t.dispose,r=t.timeToStart;return n||r<=0||!e?null:i.createElement("div",null,i.createElement("div",{className:"midroll-marker",style:{left:e}}),"number"==typeof r?i.createElement("div",{className:"countdown-midroll"},"Quảng cáo sau: ",i.createElement("span",null,r,"s")):"")}}]),e}(e.Component),Ue.propTypes={player:t.PropTypes.object.isRequired,index:t.PropTypes.number,position:t.PropTypes.object,preLoad:t.PropTypes.bool},We),Qe=t.playerconfig.DEFAULT,Xe=(Be=qe=function(t){function e(t){H(this,e);var n=je(this,(e.__proto__||F(e)).call(this,t));n.state={renderMidroll:!0};var r=n.props.player;return n._handleEnded=n._handleEnded.bind(n),n._reRenderMidroll=n._reRenderMidroll.bind(n),r.on(Qe.EVENT.PLAYER_ENDED_CONTEND,n._handleEnded),r.on("player:reRenderAds",n._handleEnded),n}return Je(e,t),q(e,[{key:"_handleEnded",value:function(){var t=this.props.player;t.off("play",this._reRenderMidroll),t.one("play",this._reRenderMidroll),this.setState({renderMidroll:!1})}},{key:"_reRenderMidroll",value:function(){this.setState({renderMidroll:!0})}},{key:"shouldComponentUpdate",value:function(t,e){return e.renderMidroll!==this.state.renderMidroll}},{key:"render",value:function(){var t=this.props,e=t.player,n=t.position,r=t.preLoad,o=this.state.renderMidroll,u=e.options().params;if(!o)return null;var a=u.midroll;if(!(a=n||a))return null;if("string"==typeof a){var s=a.match(/(0\.\d+)/g),l=a.match(/(\d+)(?=s)/g);for(a=[];s&&s.length;){var c=s.shift();a.push({percent:c})}for(;l&&l.length;){var f=l.shift();a.push({seconds:f})}}if(!a.length)return null;var p=document.createElement("div");return p.innerHTML="&nbsp;",p.className="adsbox",document.body.appendChild(p),window.setTimeout(function(){p.remove()},100),i.createElement("div",{className:"midroll-display"},a.map(function(t,n){return i.createElement(Ye,{key:n,position:t,index:n,player:e,preLoad:r})}))}}]),e}(e.Component),qe.propTypes={player:t.PropTypes.object.isRequired,position:t.PropTypes.string,preLoad:t.PropTypes.bool},Be),Ze=o.getComponent("Player");o.registerPlugin("midrollPlugin",function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=this,r=n.options(),o=r.params,u=r.plugins;if(!1!==o.ads&&(u.kinghubAdmicroADSPlugin||!Ze.prototype.kinghubAdmicroADSPlugin)){var a=e.position,s=!1;t.agent.isIOS||o.noAdsLoad||!Ze.prototype.AdsPlayerPlugin||(s=!0),n.one("ready",function(){var t=i.createElement(Xe,{key:"midrollDisplay",player:n,position:a,preLoad:s});n.container.controlBar.progressControl.progressSlider.addChild(t)})}})})}();/**
 * replayCountDown - v1.0.0 - 15:53:10 18-06-2018
 * Author: 
 */

!function(){var e=void 0;!function(t,n){"object"==typeof exports&&"undefined"!=typeof module?n(require("playercore"),require("react")):"function"==typeof e&&e.amd?e(["playercore","react"],n):n(t.Kenh14PlayerCore,t.React)}(this,function(e,t){"use strict";function n(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var r="default"in e?e.default:e,o="default"in t?t.default:t,l=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),s=e.playerconfig.DEFAULT,u=function(e){function r(e){n(this,r);var t=i(this,(r.__proto__||Object.getPrototypeOf(r)).call(this,e));t.state={isReplay:!1};var a=t.props.player;return t.handleEnded=t.handleEnded.bind(t),t.handleClick=t.handleClick.bind(t),t.handlePlay=t.handlePlay.bind(t),t.replay=t.replay.bind(t),t.oriPause=a.pause.bind(a),t}return a(r,t.Component),l(r,[{key:"componentDidMount",value:function(){var e=this.props.player,t=this;e.options().params.postroll?(e.on(s.EVENT.AD_ENDED_POSTROLL,this.handleEnded),e.on("postrollignore",function(){e.off(s.EVENT.AD_ENDED_POSTROLL,t.handleEnded),e.on(s.EVENT.PLAYER_ENDED_CONTEND,t.handleEnded)})):e.on(s.EVENT.PLAYER_ENDED_CONTEND,this.handleEnded),e.on("play",this.handlePlay)}},{key:"getRectRatioInview",value:function(){var e=this.props.player;try{var t=e.el_.getBoundingClientRect(),n=1;return t.top<0?n=t.height+t.top>0?(t.height+t.top)/t.height:0:t.top+t.height>window.screen.height&&(n=t.top<window.screen.height?(window.screen.height-t.top)/t.height:0),n=n.toFixed(2)}catch(e){}}},{key:"isInview",value:function(){var e=this.getRectRatioInview();return!(!e||e<.6)}},{key:"handleEnded",value:function(){if(this.isInview()&&!this.oriPlay){var e=this.props.player;this.oriPause_=this.oriPause;var t=this;this.oriPlay=function(){clearTimeout(t.countDownTimeout_),t.setState({isReplay:!1}),e.trigger(s.EVENT.PLAYER_REPLAY_CONTEND),e.currentTime(0),e.pause=this.oriPause_,e.play(),delete this.oriPlay,delete this.oriPause_},e.pause=function(){clearTimeout(t.countDownTimeout_),t.setState({isReplay:!1})},this.setState({isReplay:!0}),this.countDownTimeout_=setTimeout(this.replay,1800)}}},{key:"handlePlay",value:function(){var e=this.props.player;this.state.isReplay&&(e.currentTime(0),e.trigger(s.EVENT.PLAYER_REPLAY_CONTEND),clearTimeout(this.countDownTimeout_),this.setState({isReplay:!1}),e.pause=this.oriPause_,delete this.oriPlay,delete this.oriPause_)}},{key:"replay",value:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];(this.isInview()||e)&&this.oriPlay()}},{key:"className",value:function(){var e=this.props.className;return[e].join(" ")}},{key:"handleClick",value:function(){this.replay(!0)}},{key:"render",value:function(){if(!this.state.isReplay)return null;var e=this.className();return o.createElement("div",{className:"Kenh14Player-replay-countdown",onClick:this.handleClick},o.createElement("div",{className:e},o.createElement("div",{className:"label"},"Tự động phát lại"),o.createElement("div",{className:"line-mask line-mask-0"},o.createElement("div",{className:"line"})),o.createElement("div",{className:"line-mask line-mask-1"},o.createElement("div",{className:"line"})),o.createElement("div",{className:"replay"})))}}]),r}();u.propTypes={player:e.PropTypes.object.isRequired,className:e.PropTypes.string},u.defaultProps={className:"replay-countdown"};r.registerPlugin("replayCountDown",function(){var e=this;!0===e.options().params.replay&&e.one("ready",function(){var t=o.createElement(u,{key:"replayCountDown",player:e});e.container.addChild(t)})})})}();/**
 * scrollPlugin - v0.0.1 - 16:39:35 27-07-2018
 * Author: TungTT
 */

!function(){var e=void 0;!function(i,t){"object"==typeof exports&&"undefined"!=typeof module?t(require("playercore")):"function"==typeof e&&e.amd?e(["playercore"],t):t(i.Kenh14PlayerCore)}(this,function(e){"use strict";function i(){document.removeEventListener("click",i),l=!0}function t(){v.map(function(e){try{e.pause()}catch(e){}})}function n(e){v.map(function(i){try{i.id_!==e&&i.pause()}catch(e){}})}var o="default"in e?e.default:e,r=e.playerconfig.DEFAULT,a=void 0,d=!1,c=void 0,l=!1,u=void 0,s=void 0,p=void 0,f=void 0;document.addEventListener("click",i),window.performance?0==performance.navigation.type&&document.referrer&&(l=!0):document.referrer&&(l=!0);var v=[];o.registerPlugin("scrollPlugin",function(){function i(){if(w){if(w.clientHeight&&h)return void o.pause();if(!w.clientHeight&&!h)return void o.pause()}if(H){if(H.clientHeight&&!L)return void o.pause();if(!H.clientHeight&&L)return void o.pause()}var e=void 0,i=void 0;try{e=(i=o.el_.getBoundingClientRect()).top,c.id===o.id_&&(c.position||(c.position=e),d=e>c.position,c.position=e)}catch(e){return}if(e>window.screen.height/2-i.height&&e<window.screen.height/2&&(a=o.id_),e>0&&e+i.height<window.innerHeight&&(u.id_===o.id_&&(a=o.id_),d||p.id_!==o.id_||(a=o.id_)),o.id_==a)if(e+i.height/2<0||e+i.height/2>window.innerHeight){if(m)return;o.pause(),a=null,y=!1}else{if(o.trigger("player:viewactive"),y)return;l||(o.muted(!0),o.trigger(r.EVENT.USER_CHANGE_MUTE,!0)),n(o.id_),o.play()}else m||(y=!1,o.pause())}var o=this,g=o.options().params;if(!e.agent.isMobile&&!1!==g.scrollplay&&"false"!==g.scrollplay){v.push(o);var h=!0;g.autoplay&&(a=o.id_);var m=!1,y=!1,_=o.el_.getBoundingClientRect();u||(u=o,s=_.top),p||(p=o,f=_.top),_.top<s&&(u=o,s=_.top),_.top>f&&(p=o,f=_.top),o.on("user:pause",function(){m=!0}),o.on("site:pause",function(){y=!0}),o.on("play",function(){m=!1,y=!1}),c||(c={id:o.id_}),o.on("play",function(){var e=document.getElementById("overlay-animation");e.classList.add("playing"),o.setTimeout(function(){e.classList.remove("playing")},200)});var E=document.getElementsByClassName("light-box-content"),w=void 0;E&&E[0]&&((w=E[0]).addEventListener("scroll",i),w.clientHeight&&(t(),h=!1));var H=document.getElementById("admCrollNative"),L=!1;H&&(H.addEventListener("scroll",i),H.clientHeight&&(t(),L=!0)),o.one("loadedmetadata",function(){g.autoplay&&!l&&o.muted(!0)}),window.addEventListener("scroll",i),setTimeout(i,0)}})})}();/**
 * kinghubAdmicroADSPlugin - v1.0.0 - 11:56:27 15-11-2019
 * Author: theanh_htp135
 */

!function(){var n=void 0;!function(o,e){"object"==typeof exports&&"undefined"!=typeof module?e(require("playercore")):"function"==typeof n&&n.amd?n(["playercore"],e):e(o.Kenh14PlayerCore)}(this,function(n){"use strict";n=n&&n.hasOwnProperty("default")?n.default:n;var o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n},e=(function(){function n(n){this.value=n}function o(o){function e(a,i){try{var r=o[a](i),d=r.value;d instanceof n?Promise.resolve(d.value).then(function(n){e("next",n)},function(n){e("throw",n)}):t(r.done?"return":"normal",r.value)}catch(n){t("throw",n)}}function t(n,o){switch(n){case"return":a.resolve({value:o,done:!0});break;case"throw":a.reject(o);break;default:a.resolve({value:o,done:!1})}(a=a.next)?e(a.key,a.arg):i=null}var a,i;this._invoke=function(n,o){return new Promise(function(t,r){var d={key:n,arg:o,resolve:t,reject:r,next:null};i?i=i.next=d:(a=i=d,e(n,o))})},"function"!=typeof o.return&&(this.return=void 0)}"function"==typeof Symbol&&Symbol.asyncIterator&&(o.prototype[Symbol.asyncIterator]=function(){return this}),o.prototype.next=function(n){return this._invoke("next",n)},o.prototype.throw=function(n){return this._invoke("throw",n)},o.prototype.return=function(n){return this._invoke("return",n)}}(),""),t=0,a=!1,i=0,r=-1,d="",c=-1,h=-1;try{void 0!==window._chkPrLink&&(a=window._chkPrLink)}catch(n){}try{void 0!==window.admtvcPgid&&(d=window.admtvcPgid())}catch(n){}n.registerPlugin("kinghubAdmicroADSPlugin",function(n){function v(n){for(var o=window.location.search.substring(1).split("&"),e=0;e<o.length;e++){var t=o[e].split("=");if(t[0]==n)return t[1]}return!1}var p=this;if("undefined"!=p.mediaInfo.vast&&""!=p.mediaInfo.vast&&void 0!=p.mediaInfo.vast)return decodeURIComponent(p.mediaInfo.vast);var s=document.referrer?document.referrer:location.href,u=!1;try{window.top!==window.self&&window.top.location!==window.self.location&&(u=!0)}catch(n){u=!0}h=n.position;var m=[];m.dantri=5939,m.kenh14=5938,m.genk=5940,m.gamek=475198,m.afamily=5942,m.autopro=5944,m.cafef=5943,m.linkhay=5941,m.giadinh=5945,m[71]=2657,m.sohanews=5818,m.soha=5818,m.channelvn=2657,m.cafebiz=5943,m.vcmedia="vcmedia",m.thegioivanhoa=6703,m.phim14=7692,m["beta.autopro"]=5944,m.vtv=23260,m.ttvn=25438,m.thanhnien=37079,m.docbao=7493,m.thethaovanhoa=502991,m.anninhthudo=16834,m.bongda24h=32159,m.bongdanet=11227,m.laodong=10698,m.vtc=6300,m.tuoitre=488052,m.webtretho=501452,m.toquoc=512260,m.thethao247=514470,m.sport5=508721;var l=[];l.webtretho=501451,l.kenh14=2656,l.dantri=2657,l.autopro=2760,l.afamily=2763,l.genk=2658,l.gamek=475197,l.cafef=2661,l.cafebiz=2661,l.giadinh=2971,l.libero=4298,l.nld=2790,l.phapluattp=2787,l.phapluattp=2787,l.sannhac=2762,l.socnhi=3034,l.sohanews=2761,l.soha=2761,l.suckhoedoisong=2972,l.vneconomy=3385,l["beta.autopro"]=2760,l.vtv=6301,l.ttvn=25437,l.thanhnien=37079,l.docbao=7493,l.thethaovanhoa=502990,l.anninhthudo=16834,l.bongda24h=32159,l.bongdanet=11227,l.laodong=10698,l.ole=42329,l.go=42341,l.tintuc=42331,l.lichthidau=42334,l.docbaogiay=42337,l.vntinnhanh=42338,l.tuoitre=488051,l.ale=42340,l.bongda=42333,l.vtc=6300,l.sggp=475266,l.saigondautu=477879,l.sggpnews=477878,l.toquoc=512259,l.thethao247=514469,l.sport5=508720;var f=new function(){this.creatInfo=function(){var n=location.hostname;u&&(n=s.match(/(http[s]?:\/\/)?([^\s]+)(\/.*)/)[2]);var o=(n=(n=(n=(n=(n=(n=(n=(n=(n=(n=n.replace("http://","")).replace("https://","")).replace("http://www","")).replace("https://www","")).replace(".com","")).replace(".vn","")).replace(".net","")).replace(".org","")).replace(".info","")).replace(".edu","")).split(".");o.length>1&&(n=o[1]),this.getZoneID=function(n){var o=document.domain;return p.mediaInfo.isMobile?"worldcup.dantri.com.vn"==o?"493141":"worldcup.kenh14.vn"==o?"493143":"worldcup.soha.vn"==o?"493145":"worldcup.vtv.vn"==o?"493147":"worldcup.tienphong.vn"==o?"493149":"herewego.kenh14.vn"==o?"500992":m[n]?m[n]:"0":"herewego.kenh14.vn"==o?"500991":"worldcup.dantri.com.vn"==o?"493140":"worldcup.kenh14.vn"==o?"493142":"worldcup.soha.vn"==o?"493144":"worldcup.vtv.vn"==o?"493146":"worldcup.tienphong.vn"==o?"493148":l[n]?l[n]:"0"},void 0!==p.mediaInfo._admParamTvc&&""!=p.mediaInfo._admParamTvc?this.admParam=p.mediaInfo._admParamTvc:this.admParam="0;0;0;0",this.zoneId=this.getZoneID(n),void 0!==p.mediaInfo.tag&&""!=p.mediaInfo.tag&&(this.tag=p.mediaInfo.tag),void 0!==p.mediaInfo.vid&&""!=p.mediaInfo.vid?this.videoID=p.mediaInfo.vid:this.videoID=p.mediaInfo.file,void 0!==p.mediaInfo.domain&&""!=p.mediaInfo.domain?this.domain=p.mediaInfo.domain:this.domain=location.hostname,void 0!==p.mediaInfo.pathname&&""!=p.mediaInfo.pathname?this.pathname=p.mediaInfo.pathname:this.pathname=location.pathname}};if(p.mediaInfo.pid&&(r=p.mediaInfo.pid),"undefined"==p.mediaInfo.replay||!p.mediaInfo.replay||0!=i||p.mediaInfo.boxVideoID){if(0!=i||!p.mediaInfo.nopre)return function(){function n(){return void 0!==p.mediaInfo.vast?(i={url:decodeURIComponent(p.mediaInfo.vast)}).url:0==a?(l=l.split(";"),0==(m=l[0])&&(m=-1),I&&(m=549606),0!=v("_bid")&&(m=v("_bid")),"herewego.kenh14.vn"==location.hostname?null:("wechoice.vn"==location.hostname&&(m=547775),-1!=location.href.indexOf("vtv.vn/trong-nuoc")?null:(i={url:"//sspapi.admicro.vn/ssp_request/video?u="+encodeURIComponent(f.domain+f.pathname)+"&z="+f.zoneId+"&p=1&w=650&h=300"+d+"&pid="+r+"&tags="+t+"&adstype="+h+"&vtype="+c+"&vid="+encodeURIComponent(p.mediaInfo.vid)+"&bannerlimit="+w+"&bannerid="+m+"&ord="+Date.now()}).url)):void 0}var i,m,l="";f.creatInfo();var w=5;l=f.admParam,""!=e&&null!=e&&(l=e),void 0!=o(p.options().params.vtype)&&null!=p.options().params.vtype&&""!=p.options().params.vtype&&(c=p.options().params.vtype),f.tag||void 0!==f.tag?t=f.tag:(t=0,p.on("updateMediaInfo",function(){t=p.mediaInfo.tag}));var I=!1;return u?"kenh14.vn"==s.match(/(http[s]?:\/\/)?([^\s]+)(\/.*)/)[2]&&decodeURIComponent(window.parent._ADM_Channel).indexOf("fashion")>-1&&(I=!0):"kenh14.vn"==location.hostname&&decodeURIComponent(window._ADM_Channel).indexOf("fashion")>-1&&(I=!0),I=!1,void 0!==p.mediaInfo.isads&&"false"==p.mediaInfo.isads?"":p.mediaInfo.isMobile?(l=l.split(";"),0==(m=l[0])&&(m=-1),I&&(m=549606),0!=a?void(t=0):(0!=v("_bid")&&(m=v("_bid")),"herewego.kenh14.vn"==location.hostname?null:("wechoice.vn"==location.hostname&&(m=547775),-1!=location.href.indexOf("vtv.vn/trong-nuoc")?null:(i={url:"//sspapi.admicro.vn/ssp_request/video?u="+encodeURIComponent(f.domain+f.pathname)+"&z="+f.zoneId+"&p=1&w=650&h=300"+d+"&pid="+r+"&tags="+t+"&adstype="+h+"&vtype="+c+"&vid="+encodeURIComponent(p.mediaInfo.vid)+"&bannerlimit="+w+"&bannerid="+m+"&ord="+Date.now()},void 0!==p.mediaInfo.vast&&(i={url:decodeURIComponent(p.mediaInfo.vast)}),i.url)))):n()}();i=1}else i=1})})}();/**
 * resizePlugin - v1.0.0 - 09:45:56 02-10-2018
 * Author: cuongtt
 */

!function(){var e=void 0;!function(i,n){"object"==typeof exports&&"undefined"!=typeof module?n(require("playercore")):"function"==typeof e&&e.amd?e(["playercore"],n):n(i.Kenh14PlayerCore)}(this,function(e){"use strict";(e=e&&e.hasOwnProperty("default")?e.default:e).registerPlugin("resizePlugin",function(){var e=this;e.options().params.minimal&&e.addClass("Kenh14Player-minimal")})})}();/**
 * locationPlugin - v1.0.0 - 16:17:50 25-06-2019
 * Author: 
 */

!function(){var t=void 0;!function(e,n){"object"==typeof exports&&"undefined"!=typeof module?n(require("playercore")):"function"==typeof t&&t.amd?t(["playercore"],n):n(e.Kenh14PlayerCore)}(this,function(t){"use strict";function e(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function n(t){if(Array.isArray(t)){for(var e=0,n=Array(t.length);e<t.length;e++)n[e]=t[e];return n}return Array.from(t)}function o(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function r(t){return null==t?"":""+t}function i(t,e,n){t.forEach(function(t){e[t]&&(n[t]=e[t])})}function a(t,e,n){function o(t){return t&&t.indexOf("###")>-1?t.replace(/###/g,"."):t}function r(){return!t||"string"==typeof t}for(var i="string"!=typeof e?[].concat(e):e.split(".");i.length>1;){if(r())return{};var a=o(i.shift());!t[a]&&n&&(t[a]=new n),t=t[a]}return r()?{}:{obj:t,k:o(i.shift())}}function s(t,e,n){var o=a(t,e,Object);o.obj[o.k]=n}function l(t,e,n,o){var r=a(t,e,Object),i=r.obj,s=r.k;i[s]=i[s]||[],o&&(i[s]=i[s].concat(n)),o||i[s].push(n)}function u(t,e){var n=a(t,e),o=n.obj,r=n.k;if(o)return o[r]}function c(t,e,n){for(var o in e)o in t?"string"==typeof t[o]||t[o]instanceof String||"string"==typeof e[o]||e[o]instanceof String?n&&(t[o]=e[o]):c(t[o],e[o],n):t[o]=e[o];return t}function p(t){return t.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g,"\\$&")}function f(t){return"string"==typeof t?t.replace(/[&<>"'\/]/g,function(t){return J[t]}):t}function h(t,e){for(var n=Object.getOwnPropertyNames(e),o=0;o<n.length;o++){var r=n[o],i=Object.getOwnPropertyDescriptor(e,r);i&&i.configurable&&void 0===t[r]&&Object.defineProperty(t,r,i)}return t}function g(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function d(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function y(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):h(t,e))}function v(t,e){for(var n=Object.getOwnPropertyNames(e),o=0;o<n.length;o++){var r=n[o],i=Object.getOwnPropertyDescriptor(e,r);i&&i.configurable&&void 0===t[r]&&Object.defineProperty(t,r,i)}return t}function b(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function m(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function x(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):v(t,e))}function w(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function O(t){return t.charAt(0).toUpperCase()+t.slice(1)}function j(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function S(){var t={};return et.forEach(function(e){e.lngs.forEach(function(n){t[n]={numbers:e.nr,plurals:nt[e.fc]}})}),t}function k(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function P(t,e){for(var n=Object.getOwnPropertyNames(e),o=0;o<n.length;o++){var r=n[o],i=Object.getOwnPropertyDescriptor(e,r);i&&i.configurable&&void 0===t[r]&&Object.defineProperty(t,r,i)}return t}function R(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function C(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function E(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):P(t,e))}function L(t,e){for(var n=t.indexOf(e);-1!==n;)t.splice(n,1),n=t.indexOf(e)}function N(t,e){for(var n=Object.getOwnPropertyNames(e),o=0;o<n.length;o++){var r=n[o],i=Object.getOwnPropertyDescriptor(e,r);i&&i.configurable&&void 0===t[r]&&Object.defineProperty(t,r,i)}return t}function T(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function A(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function M(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):N(t,e))}function U(){return{debug:!1,initImmediate:!0,ns:["translation"],defaultNS:["translation"],fallbackLng:["dev"],fallbackNS:!1,whitelist:!1,nonExplicitWhitelist:!1,load:"all",preload:!1,simplifyPluralSuffix:!0,keySeparator:".",nsSeparator:":",pluralSeparator:"_",contextSeparator:"_",saveMissing:!1,updateMissing:!1,saveMissingTo:"fallback",saveMissingPlurals:!0,missingKeyHandler:!1,missingInterpolationHandler:!1,postProcess:!1,returnNull:!0,returnEmptyString:!0,returnObjects:!1,joinArrays:!1,returnedObjectHandler:function(){},parseMissingKeyHandler:!1,appendNamespaceToMissingKey:!1,appendNamespaceToCIMode:!1,overloadTranslationOptionHandler:function(t){var e={};return t[1]&&(e.defaultValue=t[1]),t[2]&&(e.tDescription=t[2]),e},interpolation:{escapeValue:!0,format:function(t,e,n){return t},prefix:"{{",suffix:"}}",formatSeparator:",",unescapePrefix:"-",nestingPrefix:"$t(",nestingSuffix:")",maxReplaces:1e3}}}function D(t){return"string"==typeof t.ns&&(t.ns=[t.ns]),"string"==typeof t.fallbackLng&&(t.fallbackLng=[t.fallbackLng]),"string"==typeof t.fallbackNS&&(t.fallbackNS=[t.fallbackNS]),t.whitelist&&t.whitelist.indexOf("cimode")<0&&(t.whitelist=t.whitelist.concat(["cimode"])),t}function H(t,e){for(var n=Object.getOwnPropertyNames(e),o=0;o<n.length;o++){var r=n[o],i=Object.getOwnPropertyDescriptor(e,r);i&&i.configurable&&void 0===t[r]&&Object.defineProperty(t,r,i)}return t}function V(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function I(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function F(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):H(t,e))}function K(){}var q="default"in t?t.default:t,B=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(t[o]=n[o])}return t},z={type:"logger",log:function(t){this.output("log",t)},warn:function(t){this.output("warn",t)},error:function(t){this.output("error",t)},output:function(t,e){var o;console&&console[t]&&(o=console)[t].apply(o,n(e))}},$=new(function(){function t(n){var o=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};e(this,t),this.init(n,o)}return t.prototype.init=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};this.prefix=e.prefix||"i18next:",this.logger=t||z,this.options=e,this.debug=e.debug},t.prototype.setDebug=function(t){this.debug=t},t.prototype.log=function(){for(var t=arguments.length,e=Array(t),n=0;n<t;n++)e[n]=arguments[n];return this.forward(e,"log","",!0)},t.prototype.warn=function(){for(var t=arguments.length,e=Array(t),n=0;n<t;n++)e[n]=arguments[n];return this.forward(e,"warn","",!0)},t.prototype.error=function(){for(var t=arguments.length,e=Array(t),n=0;n<t;n++)e[n]=arguments[n];return this.forward(e,"error","")},t.prototype.deprecate=function(){for(var t=arguments.length,e=Array(t),n=0;n<t;n++)e[n]=arguments[n];return this.forward(e,"warn","WARNING DEPRECATED: ",!0)},t.prototype.forward=function(t,e,n,o){return o&&!this.debug?null:("string"==typeof t[0]&&(t[0]=""+n+this.prefix+" "+t[0]),this.logger[e](t))},t.prototype.create=function(e){return new t(this.logger,B({prefix:this.prefix+":"+e+":"},this.options))},t}()),W=function(){function t(){o(this,t),this.observers={}}return t.prototype.on=function(t,e){var n=this;t.split(" ").forEach(function(t){n.observers[t]=n.observers[t]||[],n.observers[t].push(e)})},t.prototype.off=function(t,e){var n=this;this.observers[t]&&this.observers[t].forEach(function(){if(e){var o=n.observers[t].indexOf(e);o>-1&&n.observers[t].splice(o,1)}else delete n.observers[t]})},t.prototype.emit=function(t){for(var e=arguments.length,n=Array(e>1?e-1:0),o=1;o<e;o++)n[o-1]=arguments[o];this.observers[t]&&[].concat(this.observers[t]).forEach(function(t){t.apply(void 0,n)}),this.observers["*"]&&[].concat(this.observers["*"]).forEach(function(e){var o;e.apply(e,(o=[t]).concat.apply(o,n))})},t}(),J={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;","/":"&#x2F;"},_=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(t[o]=n[o])}return t},G=function(t){function e(n){var o=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{ns:["translation"],defaultNS:"translation"};g(this,e);var r=d(this,t.call(this));return r.data=n||{},r.options=o,r}return y(e,t),e.prototype.addNamespaces=function(t){this.options.ns.indexOf(t)<0&&this.options.ns.push(t)},e.prototype.removeNamespaces=function(t){var e=this.options.ns.indexOf(t);e>-1&&this.options.ns.splice(e,1)},e.prototype.getResource=function(t,e,n){var o=(arguments.length>3&&void 0!==arguments[3]?arguments[3]:{}).keySeparator||this.options.keySeparator;void 0===o&&(o=".");var r=[t,e];return n&&"string"!=typeof n&&(r=r.concat(n)),n&&"string"==typeof n&&(r=r.concat(o?n.split(o):n)),t.indexOf(".")>-1&&(r=t.split(".")),u(this.data,r)},e.prototype.addResource=function(t,e,n,o){var r=arguments.length>4&&void 0!==arguments[4]?arguments[4]:{silent:!1},i=this.options.keySeparator;void 0===i&&(i=".");var a=[t,e];n&&(a=a.concat(i?n.split(i):n)),t.indexOf(".")>-1&&(o=e,e=(a=t.split("."))[1]),this.addNamespaces(e),s(this.data,a,o),r.silent||this.emit("added",t,e,n,o)},e.prototype.addResources=function(t,e,n){var o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{silent:!1};for(var r in n)"string"==typeof n[r]&&this.addResource(t,e,r,n[r],{silent:!0});o.silent||this.emit("added",t,e,n)},e.prototype.addResourceBundle=function(t,e,n,o,r){var i=arguments.length>5&&void 0!==arguments[5]?arguments[5]:{silent:!1},a=[t,e];t.indexOf(".")>-1&&(o=n,n=e,e=(a=t.split("."))[1]),this.addNamespaces(e);var l=u(this.data,a)||{};o?c(l,n,r):l=_({},l,n),s(this.data,a,l),i.silent||this.emit("added",t,e,n)},e.prototype.removeResourceBundle=function(t,e){this.hasResourceBundle(t,e)&&delete this.data[t][e],this.removeNamespaces(e),this.emit("removed",t,e)},e.prototype.hasResourceBundle=function(t,e){return void 0!==this.getResource(t,e)},e.prototype.getResourceBundle=function(t,e){return e||(e=this.options.defaultNS),"v1"===this.options.compatibilityAPI?_({},this.getResource(t,e)):this.getResource(t,e)},e.prototype.toJSON=function(){return this.data},e}(W),X={processors:{},addPostProcessor:function(t){this.processors[t.name]=t},handle:function(t,e,n,o,r){var i=this;return t.forEach(function(t){i.processors[t]&&(e=i.processors[t].process(e,n,o,r))}),e}},Y=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(t[o]=n[o])}return t},Q="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Z=function(t){function e(n){var o=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};b(this,e);var r=m(this,t.call(this));return i(["resourceStore","languageUtils","pluralResolver","interpolator","backendConnector"],n,r),r.options=o,r.logger=$.create("translator"),r}return x(e,t),e.prototype.changeLanguage=function(t){t&&(this.language=t)},e.prototype.exists=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{interpolation:{}},n=this.resolve(t,e);return n&&void 0!==n.res},e.prototype.extractFromKey=function(t,e){var n=e.nsSeparator||this.options.nsSeparator;void 0===n&&(n=":");var o=e.keySeparator||this.options.keySeparator||".",r=e.ns||this.options.defaultNS;if(n&&t.indexOf(n)>-1){var i=t.split(n);(n!==o||n===o&&this.options.ns.indexOf(i[0])>-1)&&(r=i.shift()),t=i.join(o)}return"string"==typeof r&&(r=[r]),{key:t,namespaces:r}},e.prototype.translate=function(t,e){var n=this;if("object"!==(void 0===e?"undefined":Q(e))&&this.options.overloadTranslationOptionHandler&&(e=this.options.overloadTranslationOptionHandler(arguments)),e||(e={}),void 0===t||null===t||""===t)return"";"number"==typeof t&&(t=String(t)),"string"==typeof t&&(t=[t]);var o=e.keySeparator||this.options.keySeparator||".",r=this.extractFromKey(t[t.length-1],e),i=r.key,a=r.namespaces,s=a[a.length-1],l=e.lng||this.language,u=e.appendNamespaceToCIMode||this.options.appendNamespaceToCIMode;if(l&&"cimode"===l.toLowerCase()){if(u){var c=e.nsSeparator||this.options.nsSeparator;return s+c+i}return i}var p=this.resolve(t,e),f=p&&p.res,h=p&&p.usedKey||i,g=Object.prototype.toString.apply(f),d=["[object Number]","[object Function]","[object RegExp]"],y=void 0!==e.joinArrays?e.joinArrays:this.options.joinArrays,v="string"!=typeof f&&"boolean"!=typeof f&&"number"!=typeof f;if(f&&v&&d.indexOf(g)<0&&(!y||"[object Array]"!==g)){if(!e.returnObjects&&!this.options.returnObjects)return this.logger.warn("accessing an object - but returnObjects options is not enabled!"),this.options.returnedObjectHandler?this.options.returnedObjectHandler(h,f,e):"key '"+i+" ("+this.language+")' returned an object instead of string.";if(e.keySeparator||this.options.keySeparator){var b="[object Array]"===g?[]:{};for(var m in f)if(Object.prototype.hasOwnProperty.call(f,m)){var x=""+h+o+m;b[m]=this.translate(x,Y({},e,{joinArrays:!1,ns:a})),b[m]===x&&(b[m]=f[m])}f=b}}else if(y&&"[object Array]"===g)(f=f.join(y))&&(f=this.extendTranslation(f,t,e));else{var w=!1,O=!1;this.isValidLookup(f)||void 0===e.defaultValue||(w=!0,f=e.defaultValue),this.isValidLookup(f)||(O=!0,f=i);var j=e.defaultValue&&e.defaultValue!==f&&this.options.updateMissing;if(O||w||j){this.logger.log(j?"updateKey":"missingKey",l,s,i,j?e.defaultValue:f);var S=[],k=this.languageUtils.getFallbackCodes(this.options.fallbackLng,e.lng||this.language);if("fallback"===this.options.saveMissingTo&&k&&k[0])for(var P=0;P<k.length;P++)S.push(k[P]);else"all"===this.options.saveMissingTo?S=this.languageUtils.toResolveHierarchy(e.lng||this.language):S.push(e.lng||this.language);var R=function(t,o){n.options.missingKeyHandler?n.options.missingKeyHandler(t,s,o,j?e.defaultValue:f,j,e):n.backendConnector&&n.backendConnector.saveMissing&&n.backendConnector.saveMissing(t,s,o,j?e.defaultValue:f,j,e),n.emit("missingKey",t,s,o,f)};this.options.saveMissing&&(this.options.saveMissingPlurals&&e.count?S.forEach(function(t){n.pluralResolver.getPluralFormsOfKey(t,i).forEach(function(e){return R([t],e)})}):R(S,i))}f=this.extendTranslation(f,t,e),O&&f===i&&this.options.appendNamespaceToMissingKey&&(f=s+":"+i),O&&this.options.parseMissingKeyHandler&&(f=this.options.parseMissingKeyHandler(f))}return f},e.prototype.extendTranslation=function(t,e,n){var o=this;n.interpolation&&this.interpolator.init(Y({},n,{interpolation:Y({},this.options.interpolation,n.interpolation)}));var r=n.replace&&"string"!=typeof n.replace?n.replace:n;this.options.interpolation.defaultVariables&&(r=Y({},this.options.interpolation.defaultVariables,r)),t=this.interpolator.interpolate(t,r,n.lng||this.language),!1!==n.nest&&(t=this.interpolator.nest(t,function(){return o.translate.apply(o,arguments)},n)),n.interpolation&&this.interpolator.reset();var i=n.postProcess||this.options.postProcess,a="string"==typeof i?[i]:i;return void 0!==t&&null!==t&&a&&a.length&&!1!==n.applyPostProcessor&&(t=X.handle(a,t,e,n,this)),t},e.prototype.resolve=function(t){var e=this,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},o=void 0,r=void 0;return"string"==typeof t&&(t=[t]),t.forEach(function(t){if(!e.isValidLookup(o)){var i=e.extractFromKey(t,n),a=i.key;r=a;var s=i.namespaces;e.options.fallbackNS&&(s=s.concat(e.options.fallbackNS));var l=void 0!==n.count&&"string"!=typeof n.count,u=void 0!==n.context&&"string"==typeof n.context&&""!==n.context,c=n.lngs?n.lngs:e.languageUtils.toResolveHierarchy(n.lng||e.language);s.forEach(function(t){e.isValidLookup(o)||c.forEach(function(r){if(!e.isValidLookup(o)){var i=a,s=[i],c=void 0;l&&(c=e.pluralResolver.getSuffix(r,n.count)),l&&u&&s.push(i+c),u&&s.push(i+=""+e.options.contextSeparator+n.context),l&&s.push(i+=c);for(var p=void 0;p=s.pop();)e.isValidLookup(o)||(o=e.getResource(r,t,p,n))}})})}}),{res:o,usedKey:r}},e.prototype.isValidLookup=function(t){return!(void 0===t||!this.options.returnNull&&null===t||!this.options.returnEmptyString&&""===t)},e.prototype.getResource=function(t,e,n){var o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{};return this.resourceStore.getResource(t,e,n,o)},e}(W),tt=function(){function t(e){w(this,t),this.options=e,this.whitelist=this.options.whitelist||!1,this.logger=$.create("languageUtils")}return t.prototype.getScriptPartFromCode=function(t){if(!t||t.indexOf("-")<0)return null;var e=t.split("-");return 2===e.length?null:(e.pop(),this.formatLanguageCode(e.join("-")))},t.prototype.getLanguagePartFromCode=function(t){if(!t||t.indexOf("-")<0)return t;var e=t.split("-");return this.formatLanguageCode(e[0])},t.prototype.formatLanguageCode=function(t){if("string"==typeof t&&t.indexOf("-")>-1){var e=["hans","hant","latn","cyrl","cans","mong","arab"],n=t.split("-");return this.options.lowerCaseLng?n=n.map(function(t){return t.toLowerCase()}):2===n.length?(n[0]=n[0].toLowerCase(),n[1]=n[1].toUpperCase(),e.indexOf(n[1].toLowerCase())>-1&&(n[1]=O(n[1].toLowerCase()))):3===n.length&&(n[0]=n[0].toLowerCase(),2===n[1].length&&(n[1]=n[1].toUpperCase()),"sgn"!==n[0]&&2===n[2].length&&(n[2]=n[2].toUpperCase()),e.indexOf(n[1].toLowerCase())>-1&&(n[1]=O(n[1].toLowerCase())),e.indexOf(n[2].toLowerCase())>-1&&(n[2]=O(n[2].toLowerCase()))),n.join("-")}return this.options.cleanCode||this.options.lowerCaseLng?t.toLowerCase():t},t.prototype.isWhitelisted=function(t){return("languageOnly"===this.options.load||this.options.nonExplicitWhitelist)&&(t=this.getLanguagePartFromCode(t)),!this.whitelist||!this.whitelist.length||this.whitelist.indexOf(t)>-1},t.prototype.getFallbackCodes=function(t,e){if(!t)return[];if("string"==typeof t&&(t=[t]),"[object Array]"===Object.prototype.toString.apply(t))return t;if(!e)return t.default||[];var n=t[e];return n||(n=t[this.getScriptPartFromCode(e)]),n||(n=t[this.formatLanguageCode(e)]),n||(n=t.default),n||[]},t.prototype.toResolveHierarchy=function(t,e){var n=this,o=this.getFallbackCodes(e||this.options.fallbackLng||[],t),r=[],i=function(t){t&&(n.isWhitelisted(t)?r.push(t):n.logger.warn("rejecting non-whitelisted language code: "+t))};return"string"==typeof t&&t.indexOf("-")>-1?("languageOnly"!==this.options.load&&i(this.formatLanguageCode(t)),"languageOnly"!==this.options.load&&"currentOnly"!==this.options.load&&i(this.getScriptPartFromCode(t)),"currentOnly"!==this.options.load&&i(this.getLanguagePartFromCode(t))):"string"==typeof t&&i(this.formatLanguageCode(t)),o.forEach(function(t){r.indexOf(t)<0&&i(n.formatLanguageCode(t))}),r},t}(),et=[{lngs:["ach","ak","am","arn","br","fil","gun","ln","mfe","mg","mi","oc","pt","pt-BR","tg","ti","tr","uz","wa"],nr:[1,2],fc:1},{lngs:["af","an","ast","az","bg","bn","ca","da","de","dev","el","en","eo","es","et","eu","fi","fo","fur","fy","gl","gu","ha","he","hi","hu","hy","ia","it","kn","ku","lb","mai","ml","mn","mr","nah","nap","nb","ne","nl","nn","no","nso","pa","pap","pms","ps","pt-PT","rm","sco","se","si","so","son","sq","sv","sw","ta","te","tk","ur","yo"],nr:[1,2],fc:2},{lngs:["ay","bo","cgg","fa","id","ja","jbo","ka","kk","km","ko","ky","lo","ms","sah","su","th","tt","ug","vi","wo","zh"],nr:[1],fc:3},{lngs:["be","bs","dz","hr","ru","sr","uk"],nr:[1,2,5],fc:4},{lngs:["ar"],nr:[0,1,2,3,11,100],fc:5},{lngs:["cs","sk"],nr:[1,2,5],fc:6},{lngs:["csb","pl"],nr:[1,2,5],fc:7},{lngs:["cy"],nr:[1,2,3,8],fc:8},{lngs:["fr"],nr:[1,2],fc:9},{lngs:["ga"],nr:[1,2,3,7,11],fc:10},{lngs:["gd"],nr:[1,2,3,20],fc:11},{lngs:["is"],nr:[1,2],fc:12},{lngs:["jv"],nr:[0,1],fc:13},{lngs:["kw"],nr:[1,2,3,4],fc:14},{lngs:["lt"],nr:[1,2,10],fc:15},{lngs:["lv"],nr:[1,2,0],fc:16},{lngs:["mk"],nr:[1,2],fc:17},{lngs:["mnk"],nr:[0,1,2],fc:18},{lngs:["mt"],nr:[1,2,11,20],fc:19},{lngs:["or"],nr:[2,1],fc:2},{lngs:["ro"],nr:[1,2,20],fc:20},{lngs:["sl"],nr:[5,1,2,3],fc:21}],nt={1:function(t){return Number(t>1)},2:function(t){return Number(1!=t)},3:function(t){return 0},4:function(t){return Number(t%10==1&&t%100!=11?0:t%10>=2&&t%10<=4&&(t%100<10||t%100>=20)?1:2)},5:function(t){return Number(0===t?0:1==t?1:2==t?2:t%100>=3&&t%100<=10?3:t%100>=11?4:5)},6:function(t){return Number(1==t?0:t>=2&&t<=4?1:2)},7:function(t){return Number(1==t?0:t%10>=2&&t%10<=4&&(t%100<10||t%100>=20)?1:2)},8:function(t){return Number(1==t?0:2==t?1:8!=t&&11!=t?2:3)},9:function(t){return Number(t>=2)},10:function(t){return Number(1==t?0:2==t?1:t<7?2:t<11?3:4)},11:function(t){return Number(1==t||11==t?0:2==t||12==t?1:t>2&&t<20?2:3)},12:function(t){return Number(t%10!=1||t%100==11)},13:function(t){return Number(0!==t)},14:function(t){return Number(1==t?0:2==t?1:3==t?2:3)},15:function(t){return Number(t%10==1&&t%100!=11?0:t%10>=2&&(t%100<10||t%100>=20)?1:2)},16:function(t){return Number(t%10==1&&t%100!=11?0:0!==t?1:2)},17:function(t){return Number(1==t||t%10==1?0:1)},18:function(t){return Number(0==t?0:1==t?1:2)},19:function(t){return Number(1==t?0:0===t||t%100>1&&t%100<11?1:t%100>10&&t%100<20?2:3)},20:function(t){return Number(1==t?0:0===t||t%100>0&&t%100<20?1:2)},21:function(t){return Number(t%100==1?1:t%100==2?2:t%100==3||t%100==4?3:0)}},ot=function(){function t(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};j(this,t),this.languageUtils=e,this.options=n,this.logger=$.create("pluralResolver"),this.rules=S()}return t.prototype.addRule=function(t,e){this.rules[t]=e},t.prototype.getRule=function(t){return this.rules[t]||this.rules[this.languageUtils.getLanguagePartFromCode(t)]},t.prototype.needsPlural=function(t){var e=this.getRule(t);return e&&e.numbers.length>1},t.prototype.getPluralFormsOfKey=function(t,e){var n=this,o=[],r=this.getRule(t);return r?(r.numbers.forEach(function(r){var i=n.getSuffix(t,r);o.push(""+e+i)}),o):o},t.prototype.getSuffix=function(t,e){var n=this,o=this.getRule(t);if(o){var r=o.noAbs?o.plurals(e):o.plurals(Math.abs(e)),i=o.numbers[r];this.options.simplifyPluralSuffix&&2===o.numbers.length&&1===o.numbers[0]&&(2===i?i="plural":1===i&&(i=""));var a=function(){return n.options.prepend&&i.toString()?n.options.prepend+i.toString():i.toString()};return"v1"===this.options.compatibilityJSON?1===i?"":"number"==typeof i?"_plural_"+i.toString():a():"v2"===this.options.compatibilityJSON||2===o.numbers.length&&1===o.numbers[0]?a():2===o.numbers.length&&1===o.numbers[0]?a():this.options.prepend&&r.toString()?this.options.prepend+r.toString():r.toString()}return this.logger.warn("no plural rule found for: "+t),""},t}(),rt=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(t[o]=n[o])}return t},it=function(){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};k(this,t),this.logger=$.create("interpolator"),this.init(e,!0)}return t.prototype.init=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};arguments[1]&&(this.options=t,this.format=t.interpolation&&t.interpolation.format||function(t){return t},this.escape=t.interpolation&&t.interpolation.escape||f),t.interpolation||(t.interpolation={escapeValue:!0});var e=t.interpolation;this.escapeValue=void 0===e.escapeValue||e.escapeValue,this.prefix=e.prefix?p(e.prefix):e.prefixEscaped||"{{",this.suffix=e.suffix?p(e.suffix):e.suffixEscaped||"}}",this.formatSeparator=e.formatSeparator?e.formatSeparator:e.formatSeparator||",",this.unescapePrefix=e.unescapeSuffix?"":e.unescapePrefix||"-",this.unescapeSuffix=this.unescapePrefix?"":e.unescapeSuffix||"",this.nestingPrefix=e.nestingPrefix?p(e.nestingPrefix):e.nestingPrefixEscaped||p("$t("),this.nestingSuffix=e.nestingSuffix?p(e.nestingSuffix):e.nestingSuffixEscaped||p(")"),this.maxReplaces=e.maxReplaces?e.maxReplaces:1e3,this.resetRegExp()},t.prototype.reset=function(){this.options&&this.init(this.options)},t.prototype.resetRegExp=function(){var t=this.prefix+"(.+?)"+this.suffix;this.regexp=new RegExp(t,"g");var e=""+this.prefix+this.unescapePrefix+"(.+?)"+this.unescapeSuffix+this.suffix;this.regexpUnescape=new RegExp(e,"g");var n=this.nestingPrefix+"(.+?)"+this.nestingSuffix;this.nestingRegexp=new RegExp(n,"g")},t.prototype.interpolate=function(t,e,n){function o(t){return t.replace(/\$/g,"$$$$")}var i=this,a=void 0,s=void 0,l=void 0,c=function(t){if(t.indexOf(i.formatSeparator)<0)return u(e,t);var o=t.split(i.formatSeparator),r=o.shift().trim(),a=o.join(i.formatSeparator).trim();return i.format(u(e,r),a,n)};for(this.resetRegExp(),l=0;(a=this.regexpUnescape.exec(t))&&(s=c(a[1].trim()),t=t.replace(a[0],s),this.regexpUnescape.lastIndex=0,!(++l>=this.maxReplaces)););for(l=0;a=this.regexp.exec(t);){if("string"!=typeof(s=c(a[1].trim()))&&(s=r(s)),!s)if("function"==typeof this.options.missingInterpolationHandler){var p=this.options.missingInterpolationHandler(t,a);s="string"==typeof p?p:""}else this.logger.warn("missed to pass in variable "+a[1]+" for interpolating "+t),s="";if(s=o(this.escapeValue?this.escape(s):s),t=t.replace(a[0],s),this.regexp.lastIndex=0,++l>=this.maxReplaces)break}return t},t.prototype.nest=function(t,e){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},o=void 0,i=void 0,a=rt({},n);for(a.applyPostProcessor=!1;o=this.nestingRegexp.exec(t);){if((i=e(function(t,e){if(t.indexOf(",")<0)return t;var n=t.split(",");t=n.shift();var o=n.join(",");o=(o=this.interpolate(o,a)).replace(/'/g,'"');try{a=JSON.parse(o),e&&(a=rt({},e,a))}catch(e){this.logger.error("failed parsing options string in nesting for key "+t,e)}return t}.call(this,o[1].trim(),a),a))&&o[0]===t&&"string"!=typeof i)return i;"string"!=typeof i&&(i=r(i)),i||(this.logger.warn("missed to resolve "+o[1]+" for nesting "+t),i=""),t=t.replace(o[0],i),this.regexp.lastIndex=0}return t},t}(),at=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(t[o]=n[o])}return t},st=function(){function t(t,e){var n=[],o=!0,r=!1,i=void 0;try{for(var a,s=t[Symbol.iterator]();!(o=(a=s.next()).done)&&(n.push(a.value),!e||n.length!==e);o=!0);}catch(t){r=!0,i=t}finally{try{!o&&s.return&&s.return()}finally{if(r)throw i}}return n}return function(e,n){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return t(e,n);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),lt=function(t){function e(n,o,r){var i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{};R(this,e);var a=C(this,t.call(this));return a.backend=n,a.store=o,a.languageUtils=r.languageUtils,a.options=i,a.logger=$.create("backendConnector"),a.state={},a.queue=[],a.backend&&a.backend.init&&a.backend.init(r,i.backend,i),a}return E(e,t),e.prototype.queueLoad=function(t,e,n){var o=this,r=[],i=[],a=[],s=[];return t.forEach(function(t){var n=!0;e.forEach(function(e){var a=t+"|"+e;o.store.hasResourceBundle(t,e)?o.state[a]=2:o.state[a]<0||(1===o.state[a]?i.indexOf(a)<0&&i.push(a):(o.state[a]=1,n=!1,i.indexOf(a)<0&&i.push(a),r.indexOf(a)<0&&r.push(a),s.indexOf(e)<0&&s.push(e)))}),n||a.push(t)}),(r.length||i.length)&&this.queue.push({pending:i,loaded:{},errors:[],callback:n}),{toLoad:r,pending:i,toLoadLanguages:a,toLoadNamespaces:s}},e.prototype.loaded=function(t,e,n){var o=this,r=t.split("|"),i=st(r,2),a=i[0],s=i[1];e&&this.emit("failedLoading",a,s,e),n&&this.store.addResourceBundle(a,s,n),this.state[t]=e?-1:2,this.queue.forEach(function(n){l(n.loaded,[a],s),L(n.pending,t),e&&n.errors.push(e),0!==n.pending.length||n.done||(o.emit("loaded",n.loaded),n.done=!0,n.errors.length?n.callback(n.errors):n.callback())}),this.queue=this.queue.filter(function(t){return!t.done})},e.prototype.read=function(t,e,n){var o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0,r=this,i=arguments.length>4&&void 0!==arguments[4]?arguments[4]:250,a=arguments[5];return t.length?this.backend[n](t,e,function(s,l){s&&l&&o<5?setTimeout(function(){r.read.call(r,t,e,n,o+1,2*i,a)},i):a(s,l)}):a(null,{})},e.prototype.load=function(t,e,n){var o=this;if(!this.backend)return this.logger.warn("No backend was added via i18next.use. Will not load resources."),n&&n();var r=at({},this.backend.options,this.options.backend);"string"==typeof t&&(t=this.languageUtils.toResolveHierarchy(t)),"string"==typeof e&&(e=[e]);var i=this.queueLoad(t,e,n);if(!i.toLoad.length)return i.pending.length||n(),null;r.allowMultiLoading&&this.backend.readMulti?this.read(i.toLoadLanguages,i.toLoadNamespaces,"readMulti",null,null,function(t,e){t&&o.logger.warn("loading namespaces "+i.toLoadNamespaces.join(", ")+" for languages "+i.toLoadLanguages.join(", ")+" via multiloading failed",t),!t&&e&&o.logger.log("successfully loaded namespaces "+i.toLoadNamespaces.join(", ")+" for languages "+i.toLoadLanguages.join(", ")+" via multiloading",e),i.toLoad.forEach(function(n){var r=n.split("|"),i=st(r,2),a=i[0],s=i[1],l=u(e,[a,s]);if(l)o.loaded(n,t,l);else{var c="loading namespace "+s+" for language "+a+" via multiloading failed";o.loaded(n,c),o.logger.error(c)}})}):i.toLoad.forEach(function(t){o.loadOne(t)})},e.prototype.reload=function(t,e){var n=this;this.backend||this.logger.warn("No backend was added via i18next.use. Will not load resources.");var o=at({},this.backend.options,this.options.backend);"string"==typeof t&&(t=this.languageUtils.toResolveHierarchy(t)),"string"==typeof e&&(e=[e]),o.allowMultiLoading&&this.backend.readMulti?this.read(t,e,"readMulti",null,null,function(o,r){o&&n.logger.warn("reloading namespaces "+e.join(", ")+" for languages "+t.join(", ")+" via multiloading failed",o),!o&&r&&n.logger.log("successfully reloaded namespaces "+e.join(", ")+" for languages "+t.join(", ")+" via multiloading",r),t.forEach(function(t){e.forEach(function(e){var i=u(r,[t,e]);if(i)n.loaded(t+"|"+e,o,i);else{var a="reloading namespace "+e+" for language "+t+" via multiloading failed";n.loaded(t+"|"+e,a),n.logger.error(a)}})})}):t.forEach(function(t){e.forEach(function(e){n.loadOne(t+"|"+e,"re")})})},e.prototype.loadOne=function(t){var e=this,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",o=t.split("|"),r=st(o,2),i=r[0],a=r[1];this.read(i,a,"read",null,null,function(o,r){o&&e.logger.warn(n+"loading namespace "+a+" for language "+i+" failed",o),!o&&r&&e.logger.log(n+"loaded namespace "+a+" for language "+i,r),e.loaded(t,o,r)})},e.prototype.saveMissing=function(t,e,n,o,r){var i=arguments.length>5&&void 0!==arguments[5]?arguments[5]:{};this.backend&&this.backend.create&&this.backend.create(t,e,n,o,null,at({},i,{isUpdate:r})),t&&t[0]&&this.store.addResource(t[0],e,n,o)},e}(W),ut=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(t[o]=n[o])}return t},ct=function(t){function e(n,o,r){var i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{};T(this,e);var a=A(this,t.call(this));return a.cache=n,a.store=o,a.services=r,a.options=i,a.logger=$.create("cacheConnector"),a.cache&&a.cache.init&&a.cache.init(r,i.cache,i),a}return M(e,t),e.prototype.load=function(t,e,n){var o=this;if(!this.cache)return n&&n();var r=ut({},this.cache.options,this.options.cache),i="string"==typeof t?this.services.languageUtils.toResolveHierarchy(t):t;r.enabled?this.cache.load(i,function(t,e){if(t&&o.logger.error("loading languages "+i.join(", ")+" from cache failed",t),e)for(var r in e)if(Object.prototype.hasOwnProperty.call(e,r))for(var a in e[r])if(Object.prototype.hasOwnProperty.call(e[r],a)&&"i18nStamp"!==a){var s=e[r][a];s&&o.store.addResourceBundle(r,a,s)}n&&n()}):n&&n()},e.prototype.save=function(){this.cache&&this.options.cache&&this.options.cache.enabled&&this.cache.save(this.store.data)},e}(W),pt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},ft=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(t[o]=n[o])}return t},ht=new(function(t){function e(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},o=arguments[1];V(this,e);var r=I(this,t.call(this));if(r.options=D(n),r.services={},r.logger=$,r.modules={external:[]},o&&!r.isInitialized&&!n.isClone){var i;if(!r.options.initImmediate)return i=r.init(n,o),I(r,i);setTimeout(function(){r.init(n,o)},0)}return r}return F(e,t),e.prototype.init=function(){function t(t){return t?"function"==typeof t?new t:t:null}var e=this,n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},o=arguments[1];if("function"==typeof n&&(o=n,n={}),this.options=ft({},U(),this.options,D(n)),this.format=this.options.interpolation.format,o||(o=K),!this.options.isClone){this.modules.logger?$.init(t(this.modules.logger),this.options):$.init(null,this.options);var r=new tt(this.options);this.store=new G(this.options.resources,this.options);var i=this.services;i.logger=$,i.resourceStore=this.store,i.resourceStore.on("added removed",function(t,e){i.cacheConnector.save()}),i.languageUtils=r,i.pluralResolver=new ot(r,{prepend:this.options.pluralSeparator,compatibilityJSON:this.options.compatibilityJSON,simplifyPluralSuffix:this.options.simplifyPluralSuffix}),i.interpolator=new it(this.options),i.backendConnector=new lt(t(this.modules.backend),i.resourceStore,i,this.options),i.backendConnector.on("*",function(t){for(var n=arguments.length,o=Array(n>1?n-1:0),r=1;r<n;r++)o[r-1]=arguments[r];e.emit.apply(e,[t].concat(o))}),i.backendConnector.on("loaded",function(t){i.cacheConnector.save()}),i.cacheConnector=new ct(t(this.modules.cache),i.resourceStore,i,this.options),i.cacheConnector.on("*",function(t){for(var n=arguments.length,o=Array(n>1?n-1:0),r=1;r<n;r++)o[r-1]=arguments[r];e.emit.apply(e,[t].concat(o))}),this.modules.languageDetector&&(i.languageDetector=t(this.modules.languageDetector),i.languageDetector.init(i,this.options.detection,this.options)),this.translator=new Z(this.services,this.options),this.translator.on("*",function(t){for(var n=arguments.length,o=Array(n>1?n-1:0),r=1;r<n;r++)o[r-1]=arguments[r];e.emit.apply(e,[t].concat(o))}),this.modules.external.forEach(function(t){t.init&&t.init(e)})}["getResource","addResource","addResources","addResourceBundle","removeResourceBundle","hasResourceBundle","getResourceBundle"].forEach(function(t){e[t]=function(){var n;return(n=e.store)[t].apply(n,arguments)}});var a=function(){e.changeLanguage(e.options.lng,function(t,n){e.isInitialized=!0,e.logger.log("initialized",e.options),e.emit("initialized",e.options),o(t,n)})};return this.options.resources||!this.options.initImmediate?a():setTimeout(a,0),this},e.prototype.loadResources=function(){var t=this,e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:K;if(this.options.resources)e(null);else{if(this.language&&"cimode"===this.language.toLowerCase())return e();var n=[],o=function(e){e&&t.services.languageUtils.toResolveHierarchy(e).forEach(function(t){n.indexOf(t)<0&&n.push(t)})};this.language?o(this.language):this.services.languageUtils.getFallbackCodes(this.options.fallbackLng).forEach(function(t){return o(t)}),this.options.preload&&this.options.preload.forEach(function(t){return o(t)}),this.services.cacheConnector.load(n,this.options.ns,function(){t.services.backendConnector.load(n,t.options.ns,e)})}},e.prototype.reloadResources=function(t,e){t||(t=this.languages),e||(e=this.options.ns),this.services.backendConnector.reload(t,e)},e.prototype.use=function(t){return"backend"===t.type&&(this.modules.backend=t),"cache"===t.type&&(this.modules.cache=t),("logger"===t.type||t.log&&t.warn&&t.error)&&(this.modules.logger=t),"languageDetector"===t.type&&(this.modules.languageDetector=t),"postProcessor"===t.type&&X.addPostProcessor(t),"3rdParty"===t.type&&this.modules.external.push(t),this},e.prototype.changeLanguage=function(t,e){var n=this,o=function(t,o){n.translator.changeLanguage(o),o&&(n.emit("languageChanged",o),n.logger.log("languageChanged",o)),e&&e(t,function(){return n.t.apply(n,arguments)})},r=function(t){t&&(n.language=t,n.languages=n.services.languageUtils.toResolveHierarchy(t),n.translator.language||n.translator.changeLanguage(t),n.services.languageDetector&&n.services.languageDetector.cacheUserLanguage(t)),n.loadResources(function(e){o(e,t)})};t||!this.services.languageDetector||this.services.languageDetector.async?!t&&this.services.languageDetector&&this.services.languageDetector.async?this.services.languageDetector.detect(r):r(t):r(this.services.languageDetector.detect())},e.prototype.getFixedT=function(t,e){var n=this,o=function t(e,o){for(var r=arguments.length,i=Array(r>2?r-2:0),a=2;a<r;a++)i[a-2]=arguments[a];var s=ft({},o);return"object"!==(void 0===o?"undefined":pt(o))&&(s=n.options.overloadTranslationOptionHandler([e,o].concat(i))),s.lng=s.lng||t.lng,s.lngs=s.lngs||t.lngs,s.ns=s.ns||t.ns,n.t(e,s)};return"string"==typeof t?o.lng=t:o.lngs=t,o.ns=e,o},e.prototype.t=function(){var t;return this.translator&&(t=this.translator).translate.apply(t,arguments)},e.prototype.exists=function(){var t;return this.translator&&(t=this.translator).exists.apply(t,arguments)},e.prototype.setDefaultNamespace=function(t){this.options.defaultNS=t},e.prototype.loadNamespaces=function(t,e){var n=this;if(!this.options.ns)return e&&e();"string"==typeof t&&(t=[t]),t.forEach(function(t){n.options.ns.indexOf(t)<0&&n.options.ns.push(t)}),this.loadResources(e)},e.prototype.loadLanguages=function(t,e){"string"==typeof t&&(t=[t]);var n=this.options.preload||[],o=t.filter(function(t){return n.indexOf(t)<0});if(!o.length)return e();this.options.preload=n.concat(o),this.loadResources(e)},e.prototype.dir=function(t){return t||(t=this.languages&&this.languages.length>0?this.languages[0]:this.language),t?["ar","shu","sqr","ssh","xaa","yhd","yud","aao","abh","abv","acm","acq","acw","acx","acy","adf","ads","aeb","aec","afb","ajp","apc","apd","arb","arq","ars","ary","arz","auz","avl","ayh","ayl","ayn","ayp","bbz","pga","he","iw","ps","pbt","pbu","pst","prp","prd","ur","ydd","yds","yih","ji","yi","hbo","men","xmn","fa","jpr","peo","pes","prs","dv","sam"].indexOf(this.services.languageUtils.getLanguagePartFromCode(t))>=0?"rtl":"ltr":"rtl"},e.prototype.createInstance=function(){return new e(arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},arguments[1])},e.prototype.cloneInstance=function(){var t=this,n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},o=arguments.length>1&&void 0!==arguments[1]?arguments[1]:K,r=ft({},this.options,n,{isClone:!0}),i=new e(r);return["store","services","language"].forEach(function(e){i[e]=t[e]}),i.translator=new Z(i.services,i.options),i.translator.on("*",function(t){for(var e=arguments.length,n=Array(e>1?e-1:0),o=1;o<e;o++)n[o-1]=arguments[o];i.emit.apply(i,[t].concat(n))}),i.init(r,o),i.translator.options=i.options,i},e}(W)),gt=(ht.changeLanguage.bind(ht),ht.cloneInstance.bind(ht),ht.createInstance.bind(ht),ht.dir.bind(ht),ht.exists.bind(ht),ht.getFixedT.bind(ht),ht.init.bind(ht),ht.loadLanguages.bind(ht),ht.loadNamespaces.bind(ht),ht.loadResources.bind(ht),ht.off.bind(ht),ht.on.bind(ht),ht.setDefaultNamespace.bind(ht),ht.t.bind(ht),ht.use.bind(ht),t.playerconfig.DEFAULT);q.registerPlugin("locationPlugin",function(t){function e(t){o.reset(),o.src=function(){return null},o.on("play",function(){o.pause(),o.vastAd&&(o.vastAd=null)}),o.pause(),o.options().params.ads=!1,o.trigger(gt.EVENT.PLAYER_ERROR,{code:100,msg:ht.t(t)})}function n(){a&&s&&p&&(c&&(u=c.indexOf(a)),(l<0||u<0)&&(ht.exists(a)||(a="en"),e(a)))}ht.init({lng:"en",resources:{en:{translation:{en:"This video is not available in your country",vn:"Video này không khả dụng ở quốc gia của bạn"}}}});var o=this,r=t.url;void 0===r&&(r="https://adminplayer.sohatv.vn/geoip/country");var i=o.options().params.location,a=void 0,s=void 0,l=void 0,u=void 0,c=void 0,p=void 0;o.on("updateMediaInfo",function(){o.mediaInfo.location&&(c=o.mediaInfo.location.toLowerCase()),p=!0,n()});var f=new XMLHttpRequest;f.responseType="json",f.open("GET",r,!0),f.onload=function(){if(a=f.response.data.country.iso_code.toLowerCase(),i){if(null===f.response.data)return e("en");l=i.indexOf(a)}n()},f.onerror=function(){},f.send(null),o.one("ready",function(){s=!0,n()})})})}();/**
 * countdownPlugin - v1.0.0 - 12:07:05 17-09-2019
 * Author: tungtm
 */

!function(){var e=void 0;!function(n,t){"object"==typeof exports&&"undefined"!=typeof module?t(require("playercore"),require("react")):"function"==typeof e&&e.amd?e(["playercore","react"],t):t(n.Kenh14PlayerCore,n.React)}(this,function(e,n){"use strict";function t(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}function o(e,n){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!n||"object"!=typeof n&&"function"!=typeof n?e:n}function i(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function, not "+typeof n);e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),n&&(Object.setPrototypeOf?Object.setPrototypeOf(e,n):e.__proto__=n)}var a="default"in e?e.default:e,l="default"in n?n.default:n,s=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])}return e},r=function(){function e(e,n){for(var t=0;t<n.length;t++){var o=n[t];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(n,t,o){return t&&e(n.prototype,t),o&&e(n,o),n}}(),d="Kenh14Player",u=e.playerconfig.DEFAULT,c=function(a){function c(e){t(this,c);var n=o(this,(c.__proto__||Object.getPrototypeOf(c)).call(this,e));n.state={secondsRemaining:3,countdowned:!1,isCountdowning:!1};var i=n.props.player;return n.countdownRemaining=n.countdownRemaining.bind(n),n.onHover=n.onHover.bind(n),n.onOutHover=n.onOutHover.bind(n),n.handleClick=n.handleClick.bind(n),n.handlePlay=n.handlePlay.bind(n),n.handleResize=n.handleResize.bind(n),n.dispose=n.dispose.bind(n),n.oriPause=i.pause.bind(i),n.oriPlay=i.play.bind(i),n.isCountdowning_=!1,n}return i(c,n.Component),r(c,[{key:"componentWillMount",value:function(){var e=this.props.player,n=this;e.on("play",this.handlePlay),e.on("timeupdate",this.handlePlay),e.one(u.EVENT.AD_START,this.dispose),window.addEventListener("resize",this.handleResize),e.play=function(){n.state.countdowned?n.onCountdownSucess():n.countdownRemaining()},e.pause=function(){n.oriPause(),n.clearCountdown()},e.options().params.autoplay&&this.countdownRemaining()}},{key:"dispose",value:function(){var e=this.props.player;clearInterval(this.checkPlay),e.off("play",this.handlePlay),e.off("timeupdate",this.handlePlay),e.vastAd||(e.play=this.oriPlay,e.pause=this.oriPause),e.removeClass("player-play-countdown"),this.setState({countdowned:!0})}},{key:"handleResize",value:function(){this.setState({resize:!0})}},{key:"componentWillUnmount",value:function(){clearInterval(this.checkPlay)}},{key:"handlePlay",value:function(){var n=this.props.noCountDown;this.state.countdowned||this.props.player.paused()||(e.agent.isMobile||n?this.setState({countdowned:!0}):this.countdownRemaining())}},{key:"clearCountdown",value:function(){clearInterval(this.checkPlay),this.isCountdowning_=!1,this.setState({isCountdowning:!1,secondsRemaining:3})}},{key:"countdownRemaining",value:function(){if(this.oriPause(),!this.isCountdowning_){var e=this,n=this.props.noCountDown;this.isCountdowning_=!0,this.props.player.addClass("player-play-countdown"),this.checkPlay=setInterval(function(){e.setState({secondsRemaining:e.state.secondsRemaining-1}),0===e.state.secondsRemaining&&e.onCountdownSucess()},500),this.setState({isCountdowning:!0}),n&&this.onCountdownSucess()}}},{key:"onHover",value:function(){this.countdownRemaining()}},{key:"onOutHover",value:function(){this.clearCountdown()}},{key:"onCountdownSucess",value:function(){var e=this.props.player;clearInterval(this.checkPlay),e.off("play",this.handlePlay),e.off("timeupdate",this.handlePlay),e.play=this.oriPlay,e.pause=this.oriPause,e.removeClass("player-play-countdown"),e.play(),this.setState({countdowned:!0})}},{key:"handleClick",value:function(){this.onCountdownSucess()}},{key:"render",value:function(){var n=this.props.noCountDown;if(this.state.countdowned)return null;var t=this.props.player,o=void 0,i=void 0,a=void 0,r=void 0;if(e.agent.isMobile||n)o="none";else{var u=this.state.isCountdowning;o=u?"block":"none",i=u?"none":"block",a=u?"0.6":"",r=u?"black":""}var c={};return e.agent.isMobile||t.options().params.autoplay||n||(c={onMouseEnter:this.onHover,onMouseLeave:this.onOutHover}),l.createElement("div",s({},c,{className:d+"-countdown",onClick:this.handleClick}),l.createElement("div",{className:d+"-countdown-background",style:{background:r,opacity:a}}),l.createElement("div",{className:d+"-loading-vid-icon",style:{display:i,top:t.el_.getBoundingClientRect().height/2-15}},l.createElement("div",{className:d+"-countdown-play-icon",style:{borderTopWidth:t.el_.getBoundingClientRect().width/28.5,borderTopStyle:"solid",borderTopColor:"transparent",borderBottomWidth:t.el_.getBoundingClientRect().width/28.5,borderBottomStyle:"solid",borderBottomColor:"transparent",borderLeftWidth:t.el_.getBoundingClientRect().width/18,borderLeftStyle:"solid",borderLeftColor:"white"}})),l.createElement("div",{className:d+"-loading-vid-countdown quickspin",style:{display:o}},l.createElement("div",{className:d+"-countdown-label",style:{fontSize:t.el_.getBoundingClientRect().height/28.5,top:t.el_.getBoundingClientRect().height/2-t.el_.getBoundingClientRect().height/9}},"Tự động phát sau"),l.createElement("div",{className:d+"-countdown-circle",style:{boxShadow:"inset 0 0 0 "+t.el_.getBoundingClientRect().width/160+"px rgba(255, 255, 255, 0.1)",top:t.el_.getBoundingClientRect().height/2-15}}),l.createElement("div",{className:d+"-countdown-spin",style:{top:t.el_.getBoundingClientRect().height/2-15}},l.createElement("div",{className:d+"-countdown-line-mask",style:{transformOrigin:t.el_.getBoundingClientRect().width/13.33+"px "+t.el_.getBoundingClientRect().width/13.33+"px"}},l.createElement("div",{className:d+"-countdown-line",style:{width:t.el_.getBoundingClientRect().width/6.67,height:t.el_.getBoundingClientRect().width/6.67,boxShadow:"inset 0 0 0 "+t.el_.getBoundingClientRect().width/160+"px rgba(255, 255, 255, 0.5)"}}))),l.createElement("div",{className:d+"-countdown-number",style:{fontSize:t.el_.getBoundingClientRect().width/16.67,top:t.el_.getBoundingClientRect().height/2-15}},this.state.secondsRemaining)))}}]),c}();c.propTypes={player:e.PropTypes.object.isRequired,className:e.PropTypes.string,noCountDown:e.PropTypes.bool};a.registerPlugin("countdownPlugin",function(){var e=this,n=(arguments.length>0&&void 0!==arguments[0]?arguments[0]:{}).noCountDown;e.on("ready",function(){var t=l.createElement(c,{key:"countdown",player:e,noCountDown:n});e.container.addChild(t,2)})})})}();/**
 * kinghubAdmicroAPIPlugin - v1.0.0 - 14:22:09 21-03-2018
 * Author: theanh_htp135
 */

!function(){var n=void 0;!function(e,o){"object"==typeof exports&&"undefined"!=typeof module?o(require("playercore")):"function"==typeof n&&n.amd?n(["playercore"],o):o(e.Kenh14PlayerCore)}(this,function(n){"use strict";(n=n&&n.hasOwnProperty("default")?n.default:n).registerPlugin("kinghubAdmicroAPIPlugin",function(){var n=this,e=!1,o=!1,i=!1,t=new function(){this.sendLog=function(e){var o,i=0;o="vtv.vn"==n.mediaInfo.domain&&n.mediaInfo.isMobile?"m.vtv.vn":n.mediaInfo.domain;var t=e+";",a="0;0;0;0;0;0;0;"+(i=n.mediaInfo.vid&&"0"!=n.mediaInfo.vid?n.mediaInfo.vid:n.mediaInfo.file)+";0;"+(o||null);a+="|"+(n.mediaInfo.tag?n.mediaInfo.tag:0)+";"+location.pathname,(new Image).src="//lg1.logging.admicro.vn/tk?p="+encodeURIComponent(t+a)}};t.sendLog("2");n.on(["play","playing"],function e(){n.off(["play","playing"],e),t.sendLog("-1")}),n.on("timeupdate",function(){!e&&n.currentTime()>=3&&(e=!0,t.sendLog("11")),!o&&n.currentTime()>=20&&(o=!0,t.sendLog("20")),!i&&n.currentTime()/n.duration()>.5&&(i=!0,t.sendLog("12"))}),n.on("endedcontent",function(){t.sendLog("21")})})})}();/**
 * pauseOtherPlugin - v1.0.0 - 11:44:19 30-11-2018
 * Author: TuanLDT - thanhtuan.pfiev@gmail.com
 */

!function(){var e=void 0;!function(n,t){"object"==typeof exports&&"undefined"!=typeof module?t(require("playercore")):"function"==typeof e&&e.amd?e(["playercore"],t):t(n.Kenh14PlayerCore)}(this,function(e){"use strict";function n(e){t.map(function(n){try{n.id_!==e&&n.pause()}catch(e){}})}var t=[];("default"in e?e.default:e).registerPlugin("pauseOtherPlugin",function(){var i=this;e.agent.isMobile&&(t.push(i),i.on("play",function(){n(i.id_)}))})})}();/**
 * viewabilityAdsPlugin - v1.0.0 - 11:52:46 15-10-2019
 * Author: tungtm
 */

!function(e){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{("undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:this).OpenVV=e()}}(function(){return function e(t,n,i){function o(a,s){if(!n[a]){if(!t[a]){var u="function"==typeof require&&require;if(!s&&u)return u(a,!0);if(r)return r(a,!0);var c=new Error("Cannot find module '"+a+"'");throw c.code="MODULE_NOT_FOUND",c}var l=n[a]={exports:{}};t[a][0].call(l.exports,function(e){var n=t[a][1][e];return o(n||e)},l,l.exports,e,t,n,i)}return n[a].exports}for(var r="function"==typeof require&&require,a=0;a<i.length;a++)o(i[a]);return o}({1:[function(e,t,n){"use strict";t.exports=function(e,t,n){if("function"==typeof Array.prototype.find)return e.find(t,n);n=n||this;var i,o=e.length;if("function"!=typeof t)throw new TypeError(t+" is not a function");for(i=0;i<o;i++)if(t.call(n,e[i],i,e))return e[i]}},{}],2:[function(e,t,n){!function(e,t){"use strict";function n(e){this.time=e.time,this.target=e.target,this.rootBounds=e.rootBounds,this.boundingClientRect=e.boundingClientRect,this.intersectionRect=e.intersectionRect||{top:0,bottom:0,left:0,right:0,width:0,height:0},this.isIntersecting=!!e.intersectionRect;var t=this.boundingClientRect,n=t.width*t.height,i=this.intersectionRect,o=i.width*i.height;this.intersectionRatio=n?o/n:this.isIntersecting?1:0}function i(e,t){var n=t||{};if("function"!=typeof e)throw new Error("callback must be a function");if(n.root&&1!=n.root.nodeType)throw new Error("root must be an Element");this._checkForIntersections=r(this._checkForIntersections.bind(this),this.THROTTLE_TIMEOUT),this._callback=e,this._observationTargets=[],this._queuedEntries=[],this._rootMarginValues=this._parseRootMargin(n.rootMargin),this.thresholds=this._initThresholds(n.threshold),this.root=n.root||null,this.rootMargin=this._rootMarginValues.map(function(e){return e.value+e.unit}).join(" ")}function o(){return e.performance&&performance.now&&performance.now()}function r(e,t){var n=null;return function(){n||(n=setTimeout(function(){e(),n=null},t))}}function a(e,t,n,i){"function"==typeof e.addEventListener?e.addEventListener(t,n,i||!1):"function"==typeof e.attachEvent&&e.attachEvent("on"+t,n)}function s(e,t,n,i){"function"==typeof e.removeEventListener?e.removeEventListener(t,n,i||!1):"function"==typeof e.detatchEvent&&e.detatchEvent("on"+t,n)}function u(e,t){var n=Math.max(e.top,t.top),i=Math.min(e.bottom,t.bottom),o=Math.max(e.left,t.left),r=Math.min(e.right,t.right),a=r-o,s=i-n;return a>=0&&s>=0&&{top:n,bottom:i,left:o,right:r,width:a,height:s}}function c(e){var t;try{t=e.getBoundingClientRect()}catch(e){}return t?(t.width&&t.height||(t={top:t.top,right:t.right,bottom:t.bottom,left:t.left,width:t.right-t.left,height:t.bottom-t.top}),t):{top:0,bottom:0,left:0,right:0,width:0,height:0}}function l(e,t){for(var n=t;n;){if(n==e)return!0;n=d(n)}return!1}function d(e){var t=e.parentNode;return t&&11==t.nodeType&&t.host?t.host:t}if(!("IntersectionObserver"in e&&"IntersectionObserverEntry"in e&&"intersectionRatio"in e.IntersectionObserverEntry.prototype)){var f=[];i.prototype.THROTTLE_TIMEOUT=100,i.prototype.POLL_INTERVAL=null,i.prototype.observe=function(e){if(!this._observationTargets.some(function(t){return t.element==e})){if(!e||1!=e.nodeType)throw new Error("target must be an Element");this._registerInstance(),this._observationTargets.push({element:e,entry:null}),this._monitorIntersections()}},i.prototype.unobserve=function(e){this._observationTargets=this._observationTargets.filter(function(t){return t.element!=e}),this._observationTargets.length||(this._unmonitorIntersections(),this._unregisterInstance())},i.prototype.disconnect=function(){this._observationTargets=[],this._unmonitorIntersections(),this._unregisterInstance()},i.prototype.takeRecords=function(){var e=this._queuedEntries.slice();return this._queuedEntries=[],e},i.prototype._initThresholds=function(e){var t=e||[0];return Array.isArray(t)||(t=[t]),t.sort().filter(function(e,t,n){if("number"!=typeof e||isNaN(e)||e<0||e>1)throw new Error("threshold must be a number between 0 and 1 inclusively");return e!==n[t-1]})},i.prototype._parseRootMargin=function(e){var t=(e||"0px").split(/\s+/).map(function(e){var t=/^(-?\d*\.?\d+)(px|%)$/.exec(e);if(!t)throw new Error("rootMargin must be specified in pixels or percent");return{value:parseFloat(t[1]),unit:t[2]}});return t[1]=t[1]||t[0],t[2]=t[2]||t[0],t[3]=t[3]||t[1],t},i.prototype._monitorIntersections=function(){this._monitoringIntersections||(this._monitoringIntersections=!0,this._checkForIntersections(),this.POLL_INTERVAL?this._monitoringInterval=setInterval(this._checkForIntersections,this.POLL_INTERVAL):(a(e,"resize",this._checkForIntersections,!0),a(t,"scroll",this._checkForIntersections,!0),"MutationObserver"in e&&(this._domObserver=new MutationObserver(this._checkForIntersections),this._domObserver.observe(t,{attributes:!0,childList:!0,characterData:!0,subtree:!0}))))},i.prototype._unmonitorIntersections=function(){this._monitoringIntersections&&(this._monitoringIntersections=!1,clearInterval(this._monitoringInterval),this._monitoringInterval=null,s(e,"resize",this._checkForIntersections,!0),s(t,"scroll",this._checkForIntersections,!0),this._domObserver&&(this._domObserver.disconnect(),this._domObserver=null))},i.prototype._checkForIntersections=function(){var e=this._rootIsInDom(),t=e?this._getRootRect():{top:0,bottom:0,left:0,right:0,width:0,height:0};this._observationTargets.forEach(function(i){var r=i.element,a=c(r),s=this._rootContainsTarget(r),u=i.entry,l=e&&s&&this._computeTargetAndRootIntersection(r,t),d=i.entry=new n({time:o(),target:r,boundingClientRect:a,rootBounds:t,intersectionRect:l});u?e&&s?this._hasCrossedThreshold(u,d)&&this._queuedEntries.push(d):u&&u.isIntersecting&&this._queuedEntries.push(d):this._queuedEntries.push(d)},this),this._queuedEntries.length&&this._callback(this.takeRecords(),this)},i.prototype._computeTargetAndRootIntersection=function(n,i){if("none"!=e.getComputedStyle(n).display){for(var o=c(n),r=d(n),a=!1;!a;){var s=null,l=1==r.nodeType?e.getComputedStyle(r):{};if("none"==l.display)return;if(r==this.root||r==t?(a=!0,s=i):r!=t.body&&r!=t.documentElement&&"visible"!=l.overflow&&(s=c(r)),s&&!(o=u(s,o)))break;r=d(r)}return o}},i.prototype._getRootRect=function(){var e;if(this.root)e=c(this.root);else{var n=t.documentElement,i=t.body;e={top:0,left:0,right:n.clientWidth||i.clientWidth,width:n.clientWidth||i.clientWidth,bottom:n.clientHeight||i.clientHeight,height:n.clientHeight||i.clientHeight}}return this._expandRectByRootMargin(e)},i.prototype._expandRectByRootMargin=function(e){var t=this._rootMarginValues.map(function(t,n){return"px"==t.unit?t.value:t.value*(n%2?e.width:e.height)/100}),n={top:e.top-t[0],right:e.right+t[1],bottom:e.bottom+t[2],left:e.left-t[3]};return n.width=n.right-n.left,n.height=n.bottom-n.top,n},i.prototype._hasCrossedThreshold=function(e,t){var n=e&&e.isIntersecting?e.intersectionRatio||0:-1,i=t.isIntersecting?t.intersectionRatio||0:-1;if(n!==i)for(var o=0;o<this.thresholds.length;o++){var r=this.thresholds[o];if(r==n||r==i||r<n!=r<i)return!0}},i.prototype._rootIsInDom=function(){return!this.root||l(t,this.root)},i.prototype._rootContainsTarget=function(e){return l(this.root||t,e)},i.prototype._registerInstance=function(){f.indexOf(this)<0&&f.push(this)},i.prototype._unregisterInstance=function(){var e=f.indexOf(this);-1!=e&&f.splice(e,1)},e.IntersectionObserver=i,e.IntersectionObserverEntry=n}}(window,document)},{}],3:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});n.getDetails=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return{viewportWidth:Math.max(document.body.clientWidth,window.innerWidth)||-1,viewportHeight:Math.max(document.body.clientHeight,window.innerHeight)||-1,elementWidth:e.clientWidth||-1,elementHeight:e.clientHeight||-1,iframeContext:o(),focus:i()}};var i=n.isInFocus=function(){return("undefined"===document.hidden||!0!==document.hidden)&&(o()===r.CROSS_DOMAIN_IFRAME||(!window.document.hasFocus||window.top.document.hasFocus()))},o=n.iFrameContext=function(){try{if(window.top===window)return r.ON_PAGE;for(var e=window;e.parent!==e;){if(e.parent.document.domain!==e.document.domain)return r.CROSS_DOMAIN_IFRAME;e=e.parent}r.SAME_DOMAIN_IFRAME}catch(e){return r.CROSS_DOMAIN_IFRAME}},r=n.iFrameServingScenarios={ON_PAGE:"on page",SAME_DOMAIN_IFRAME:"same domain iframe",CROSS_DOMAIN_IFRAME:"cross domain iframe"}},{}],4:[function(e,t,n){"use strict";e("array-find")},{"array-find":1}],5:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.validateStrategy=n.validateCriteria=n.validElement=n.validTechnique=void 0;var i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o=function(e){return e&&e.__esModule?e:{default:e}}(e("../Measurement/MeasurementTechniques/BaseTechnique")),r=(n.validTechnique=function(e){return"function"==typeof e&&Object.getOwnPropertyNames(o.default).reduce(function(t,n){return n&&i(e[t])===i(o.default[t])},!0)},n.validElement=function(e){return e&&e.toString().indexOf("Element")>-1},n.validateCriteria=function(e){var t=e.inViewThreshold,n=e.timeInView,i=!1,o=[];return("number"!=typeof t||t>1)&&(i=!0,o.push("inViewThreshold must be a number equal to or less than 1")),("number"!=typeof n||n<0)&&(i=!0,o.push("timeInView must be a number greater to or equal 0")),{invalid:i,reasons:o.join(" | ")}});n.validateStrategy=function(e){var t=e.autostart,n=e.techniques,i=e.criteria,o=!1,a=[];"boolean"!=typeof t&&(o=!0,a.push("autostart must be boolean")),Array.isArray(n)&&0!==n.length||(o=!0,a.push("techniques must be an array containing atleast on measurement techniques"));var s=r(i);return s.invalid&&(o=!0,a.push(s.reasons)),{invalid:o,reasons:a.join(" | ")}}},{"../Measurement/MeasurementTechniques/BaseTechnique":8}],6:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});n.START="start",n.STOP="stop",n.CHANGE="change",n.COMPLETE="complete",n.UNMEASUREABLE="unmeasureable",n.INVIEW="inview",n.OUTVIEW="outview"},{}],7:[function(e,t,n){"use strict";function i(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(n,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(e[i]=n[i])}return e},a=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),s=function(e){return e&&e.__esModule?e:{default:e}}(e("../Timing/InViewTimer")),u=e("./Strategies/"),c=e("../Helpers/Validators"),l=i(e("../Environment/Environment")),d=i(e("./Events")),f=function(){function e(t){var n=this,i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};o(this,e),this._listeners={start:[],stop:[],change:[],complete:[],unmeasureable:[]},this._element=t,this._strategy=r({},u.DEFAULT_STRATEGY,i),this._criteriaMet=!1;var a=(0,c.validateStrategy)(this._strategy);if(a.invalid)throw a.reasons;this._technique=this._selectTechnique(this._strategy.techniques),this._technique&&this._addSubscriptions(this._technique),this.unmeasureable?setTimeout(function(){return n._publish(d.UNMEASUREABLE,l.getDetails(n._element))},0):this._strategy.autostart&&this._technique.start()}return a(e,[{key:"start",value:function(){this._technique.start()}},{key:"dispose",value:function(){this._technique&&this._technique.dispose(),this.timer&&this.timer.dispose()}},{key:"onViewableStart",value:function(e){return this._addCallback(e,d.START)}},{key:"onViewableStop",value:function(e){return this._addCallback(e,d.STOP)}},{key:"onViewableChange",value:function(e){return this._addCallback(e,d.CHANGE)}},{key:"onViewableComplete",value:function(e){return this._addCallback(e,d.COMPLETE),this.criteriaMet&&this._techniqueChange(d.COMPLETE,this._technique),this}},{key:"onUnmeasureable",value:function(e){return this._addCallback(e,d.UNMEASUREABLE),this.unmeasureable&&this._techniqueChange(d.UNMEASUREABLE),this}},{key:"_selectTechnique",value:function(e){return e.filter(c.validTechnique).map(this._instantiateTechnique.bind(this)).find(function(e){return!e.unmeasureable})}},{key:"_instantiateTechnique",value:function(e){return new e(this._element,this._strategy.criteria)}},{key:"_addSubscriptions",value:function(e){e&&(e.onInView(this._techniqueChange.bind(this,d.INVIEW,e)),e.onChangeView(this._techniqueChange.bind(this,d.CHANGE,e)),e.onOutView(this._techniqueChange.bind(this,d.OUTVIEW,e)))}},{key:"_techniqueChange",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=void 0,i=this._appendEnvironment(t);switch(e){case d.INVIEW:this._criteriaMet||(this.timer=new s.default(this._strategy.criteria.timeInView),this.timer.elapsed(this._timerElapsed.bind(this,t)),this.timer.start(),n=d.START);break;case d.CHANGE:n=e;break;case d.COMPLETE:this._criteriaMet||(this._criteriaMet=!0,n=e);break;case d.OUTVIEW:this._criteriaMet||(this.timer&&(this.timer.stop(),delete this.timer),n=d.STOP);break;case d.UNMEASUREABLE:n=d.UNMEASUREABLE}n&&this._publish(n,i)}},{key:"_publish",value:function(e,t){Array.isArray(this._listeners[e])&&this._listeners[e].forEach(function(e){return e(t)})}},{key:"_timerElapsed",value:function(e){this._techniqueChange(d.COMPLETE,e)}},{key:"_addCallback",value:function(e,t){if(this._listeners[t]&&"function"==typeof e)this._listeners[t].push(e);else if("function"!=typeof e)throw"Callback must be a function";return this}},{key:"_appendEnvironment",value:function(e){return r({},{percentViewable:void 0===e.percentViewable?-1:e.percentViewable,technique:e.techniqueName||-1,viewable:void 0===e.viewable?-1:e.viewable},l.getDetails(this._element))}},{key:"unmeasureable",get:function(){return!this._technique||this._technique.unmeasureable}}]),e}();n.default=f,t.exports=n.default},{"../Environment/Environment":3,"../Helpers/Validators":5,"../Timing/InViewTimer":15,"./Events":6,"./Strategies/":12}],8:[function(e,t,n){"use strict";function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(n,"__esModule",{value:!0});var o=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),r=function(){function e(){i(this,e),this.listeners={inView:[],outView:[],changeView:[]},this.percentViewable=0}return o(e,[{key:"onInView",value:function(e){return this.addCallback(e,"inView")}},{key:"onChangeView",value:function(e){return this.addCallback(e,"changeView")}},{key:"onOutView",value:function(e){return this.addCallback(e,"outView")}},{key:"addCallback",value:function(e,t){if("function"==typeof e&&this.listeners[t])this.listeners[t].push(e);else if("function"!=typeof e)throw"callback must be function";return this}},{key:"start",value:function(){}},{key:"dispose",value:function(){}},{key:"unmeasureable",get:function(){return!1}},{key:"viewable",get:function(){return!1}},{key:"techniqueName",get:function(){return"BaseTechnique"}}]),e}();n.default=r,t.exports=n.default},{}],9:[function(e,t,n){"use strict";function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function r(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(n,"__esModule",{value:!0});var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),s=function(e){return e&&e.__esModule?e:{default:e}}(e("./BaseTechnique")),u=e("../../Helpers/Validators"),c=e("../Strategies/"),l=function(e){function t(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:c.DEFAULT_STRATEGY.criteria;i(this,t);var r=o(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e,n));if(void 0!==n&&e)r.element=e,r.criteria=n,r.inView=!1,r.started=!1,r.notificationLevels=[0,.1,.2,.3,.4,.5,.6,.7,.8,.9,1],-1===r.notificationLevels.indexOf(r.criteria.inViewThreshold)&&r.notificationLevels.push(r.criteria.inViewThreshold);else if(!e)throw"element not provided";return r}return r(t,s.default),a(t,[{key:"start",value:function(){this.observer=new window.IntersectionObserver(this.viewableChange.bind(this),{threshold:this.notificationLevels}),this.observer.observe(this.element)}},{key:"dispose",value:function(){this.observer&&(this.observer.unobserve(element),this.observer.disconnect(element))}},{key:"viewableChange",value:function(e){e&&e.length&&void 0!==e[0].intersectionRatio&&(this.percentViewable=e[0].intersectionRatio,e[0].intersectionRatio<this.criteria.inViewThreshold&&this.started&&this.inView&&(this.inView=!1,this.listeners.outView.forEach(function(e){return e()})),e[0].intersectionRatio>=this.criteria.inViewThreshold&&!this.inView&&(this.started=!0,this.inView=!0,this.listeners.inView.forEach(function(e){return e()})),this.listeners.changeView.forEach(function(e){return e()}))}},{key:"unmeasureable",get:function(){return!window.IntersectionObserver||this.usesPolyfill||!(0,u.validElement)(this.element)}},{key:"viewable",get:function(){return this.inView}},{key:"techniqueName",get:function(){return"IntersectionObserver"}},{key:"usesPolyfill",get:function(){return"number"==typeof window.IntersectionObserver.prototype.THROTTLE_TIMEOUT}}]),t}();n.default=l,t.exports=n.default},{"../../Helpers/Validators":5,"../Strategies/":12,"./BaseTechnique":8}],10:[function(e,t,n){"use strict";function i(e){return e&&e.__esModule?e:{default:e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function r(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(n,"__esModule",{value:!0});var s=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),u=i(e("./IntersectionObserver")),c=(i(e("intersection-observer")),function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(e("../../Environment/Environment"))),l=function(e){function t(){return o(this,t),r(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return a(t,u.default),s(t,[{key:"unmeasureable",get:function(){return c.iFrameContext()===c.iFrameServingScenarios.CROSS_DOMAIN_IFRAME}},{key:"techniqueName",get:function(){return"IntersectionObserverPolyFill"}}]),t}();n.default=l,t.exports=n.default},{"../../Environment/Environment":3,"./IntersectionObserver":9,"intersection-observer":2}],11:[function(e,t,n){"use strict";function i(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(n,"__esModule",{value:!0});var o=e("./IntersectionObserver");Object.defineProperty(n,"IntersectionObserver",{enumerable:!0,get:function(){return i(o).default}});var r=e("./IntersectionObserverPolyfill");Object.defineProperty(n,"IntersectionObserverPolyfill",{enumerable:!0,get:function(){return i(r).default}});var a=e("./BaseTechnique");Object.defineProperty(n,"BaseTechnique",{enumerable:!0,get:function(){return i(a).default}})},{"./BaseTechnique":8,"./IntersectionObserver":9,"./IntersectionObserverPolyfill":10}],12:[function(e,t,n){"use strict";function i(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}Object.defineProperty(n,"__esModule",{value:!0}),n.StrategyFactory=n.DEFAULT_STRATEGY=void 0;var o=i(e("../../Helpers/Validators")),r=i(e("../MeasurementTechniques/")),a=i(e("../../Options/ViewabilityCriteria")),s=n.DEFAULT_STRATEGY={autostart:!0,techniques:[r.IntersectionObserver,r.IntersectionObserverPolyfill],criteria:a.MRC_VIDEO};n.StrategyFactory=function(){var e={autostart:arguments.length>0&&void 0!==arguments[0]?arguments[0]:s.autostart,techniques:arguments.length>1&&void 0!==arguments[1]?arguments[1]:s.techniques,criteria:arguments.length>2&&void 0!==arguments[2]?arguments[2]:s.criteria},t=o.validateStrategy(e);if(t.invalid)throw t.reasons;return e}},{"../../Helpers/Validators":5,"../../Options/ViewabilityCriteria":14,"../MeasurementTechniques/":11}],13:[function(e,t,n){"use strict";function i(e){return e&&e.__esModule?e:{default:e}}function o(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(n,"__esModule",{value:!0});var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();e("./Helpers/Polyfills.js");var s=o(e("./Measurement/Events")),u=i(e("./Timing/InViewTimer")),c=o(e("./Measurement/Strategies/")),l=(o(e("./Environment/Environment")),i(e("./Measurement/MeasurementExecutor"))),d=o(e("./Options/ViewabilityCriteria")),f=o(e("./Measurement/MeasurementTechniques/")),h=function(){function e(){r(this,e),this.executors=[]}return a(e,[{key:"measureElement",value:function(e,t){var n=new l.default(e,t);return this.executors.push(n),n}},{key:"dispose",value:function(){this.executors.forEach(function(e){return e.dispose()})}}]),e}();n.default=h,h.ViewabilityCriteria=d,h.MeasurementExecutor=l.default,h.MeasurementTechniques=f,h.InViewTimer=u.default,h.Strategies=c,h.Events=s,t.exports=n.default},{"./Environment/Environment":3,"./Helpers/Polyfills.js":4,"./Measurement/Events":6,"./Measurement/MeasurementExecutor":7,"./Measurement/MeasurementTechniques/":11,"./Measurement/Strategies/":12,"./Options/ViewabilityCriteria":14,"./Timing/InViewTimer":15}],14:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});n.MRC_VIDEO={inViewThreshold:.5,timeInView:2e3},n.MRC_DISPLAY={inViewThreshold:.5,timeInView:1e3},n.customCriteria=function(){return{inViewThreshold:arguments.length>0&&void 0!==arguments[0]?arguments[0]:.5,timeInView:arguments.length>1&&void 0!==arguments[1]?arguments[1]:2e3}}},{}],15:[function(e,t,n){"use strict";function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(n,"__esModule",{value:!0});var o=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),r=function(){function e(t){i(this,e),this.duration=t,this.listeners=[],this.completed=!1}return o(e,[{key:"timerComplete",value:function(){this.completed=!0,this.listeners.forEach(function(e){return e()})}},{key:"elapsed",value:function(e){"function"==typeof e&&this.listeners.push(e)}},{key:"start",value:function(){this.endTimer(),this.timer=setTimeout(this.timerComplete.bind(this),this.duration)}},{key:"stop",value:function(){this.endTimer()}},{key:"endTimer",value:function(){this.timer&&(clearTimeout(this.timer),this.listeners.length=0)}},{key:"dispose",value:function(){this.endTimer()}}]),e}();n.default=r,t.exports=n.default},{}]},{},[13])(13)}),function(){var e=void 0;!function(t,n){"object"==typeof exports&&"undefined"!=typeof module?n(require("playercore"),require("OpenVV")):"function"==typeof e&&e.amd?e(["playercore","OpenVV"],n):n(t.Kenh14PlayerCore,t.OpenVV)}(this,function(e,t){"use strict";var n="default"in e?e.default:e;t=t&&t.hasOwnProperty("default")?t.default:t;var i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};!function(){function e(e){this.value=e}function t(t){function n(o,r){try{var a=t[o](r),s=a.value;s instanceof e?Promise.resolve(s.value).then(function(e){n("next",e)},function(e){n("throw",e)}):i(a.done?"return":"normal",a.value)}catch(e){i("throw",e)}}function i(e,t){switch(e){case"return":o.resolve({value:t,done:!0});break;case"throw":o.reject(t);break;default:o.resolve({value:t,done:!1})}(o=o.next)?n(o.key,o.arg):r=null}var o,r;this._invoke=function(e,t){return new Promise(function(i,a){var s={key:e,arg:t,resolve:i,reject:a,next:null};r?r=r.next=s:(o=r=s,n(e,t))})},"function"!=typeof t.return&&(this.return=void 0)}"function"==typeof Symbol&&Symbol.asyncIterator&&(t.prototype[Symbol.asyncIterator]=function(){return this}),t.prototype.next=function(e){return this._invoke("next",e)},t.prototype.throw=function(e){return this._invoke("throw",e)},t.prototype.return=function(e){return this._invoke("return",e)}}();!function(e){function t(){if(F){var t={name:F,segment:T};e.add_event({key:"[CLY]_view",dur:c()-H,segmentation:t}),F=null}}function n(t){if(!e.ignore_visitor)if(e.app_key&&e.device_id){t.app_key=e.app_key,t.device_id=e.device_id,t.sdk_name=I,t.sdk_version=x,e.country_code&&(t.country_code=e.country_code),e.city&&(t.city=e.city),null!==e.ip_address&&(t.ip_address=e.ip_address),t.timestamp=l();var n=new Date;t.hour=n.getHours(),t.dow=n.getDay(),q.length>A&&q.shift(),q.push(t),ae("cly_queue",q,!0)}else u("app_key or device_id is missing")}function o(){if(e.ignore_visitor)Q=!1;else{Q=!0;var t=0;if(void 0!==e.onload&&e.onload.length>0){for(t=0;t<e.onload.length;t++)"function"==typeof e.onload[t]&&e.onload[t]();e.onload=[]}if(void 0!==e.q&&e.q.length>0){var i,r=e.q;for(e.q=[],t=0;t<r.length;t++)if(i=r[t],u("Processing queued call",i),"function"==typeof i)i();else if(i.constructor===Array&&i.length>0)if(void 0!==e[i[0]])e[i[0]].apply(null,i.slice(1));else{var a=i[0].replace("userData.","");void 0!==e.userData[a]&&e.userData[a].apply(null,i.slice(1))}}if(C&&D&&te){var s=c();s-k>z&&(e.session_duration(s-k),k=s)}if(L.length>0){if(L.length<=J)n({events:JSON.stringify(L)}),L=[];else{var l=L.splice(0,J);n({events:JSON.stringify(l)})}ae("cly_event",L)}if(q.length>0&&K&&c()>W){K=!1;var d=q.shift();u("Processing request",d),f(d,function(e,t){u("Request Finished",t,e),e&&(q.unshift(t),W=c()+G),ae("cly_queue",q,!0),K=!0})}setTimeout(o,V)}}function r(){return ae("cly_id")||a()}function a(){var e=(new Date).getTime();return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,function(t){var n=(e+16*Math.random())%16|0;return e=Math.floor(e/16),("x"==t?n:3&n|8).toString(16)})}function s(){var t={};if(t._app_version=e.app_version,t._ua=navigator.userAgent,screen.width){var n=screen.width?parseInt(screen.width):0,i=screen.height?parseInt(screen.height):0;if(0!==n&&0!==i){if(!!navigator.platform&&/iPad|iPhone|iPod/.test(navigator.platform)&&window.devicePixelRatio)n=Math.round(n*window.devicePixelRatio),i=Math.round(i*window.devicePixelRatio);else if(90===Math.abs(window.orientation)){var o=n;n=i,i=o}t._resolution=n+"x"+i}}window.devicePixelRatio&&(t._density=window.devicePixelRatio);var r=navigator.language||navigator.browserLanguage||navigator.systemLanguage||navigator.userLanguage;if(void 0!==r&&(t._locale=r),void 0!==document.referrer&&document.referrer.length){var a=Z.exec(document.referrer);if(a&&a[11]&&a[11]!=window.location.hostname){var s=!1;if(N&&N.length)for(var c=0;c<N.length;c++)try{if(new RegExp(N[c]).test(document.referrer)){u("Ignored:",document.referrer),s=!0;break}}catch(e){}s||(t._store=document.referrer)}}return u("Got metrics",t),t}function u(){e.debug&&"undefined"!=typeof console&&arguments[1]&&"object"==i(arguments[1])&&(arguments[1]=JSON.stringify(arguments[1]))}function c(){return Math.floor((new Date).getTime()/1e3)}function l(){var e=(new Date).getTime();return $>=e?$++:$=e,$}function d(e,t,o){if(e){o=o||j;var r="";"object"===(void 0===e?"undefined":i(e))?void 0!==e.stack?r=e.stack:(void 0!==e.name&&(r+=e.name+":"),void 0!==e.message&&(r+=e.message+"\n"),void 0!==e.fileName&&(r+="in "+e.fileName+"\n"),void 0!==e.lineNumber&&(r+="on "+e.lineNumber),void 0!==e.columnNumber&&(r+=":"+e.columnNumber)):r=e+"",t=!!t;var a=s(),u={_resolution:a._resolution,_error:r,_app_version:a._app_version,_run:c()-O};u._not_os_specific=!0;var l=navigator.battery||navigator.webkitBattery||navigator.mozBattery||navigator.msBattery;l&&(u._bat=Math.floor(100*l.level)),void 0!==navigator.onLine&&(u._online=!!navigator.onLine),u._background=!document.hasFocus(),R.length>0&&(u._logs=R.join("\n")),R=[],u._nonfatal=t,u._view=(window.location.pathname||"")+(window.location.search||"")+(window.location.hash||""),void 0!==o&&(u._custom=o);try{var d=document.createElement("canvas").getContext("experimental-webgl");u._opengl=d.getParameter(d.VERSION)}catch(e){}n({crash:JSON.stringify(u)})}}function f(t,n){try{u("Sending XML HTTP request");var i=window.XMLHttpRequest?new window.XMLHttpRequest:window.ActiveXObject?new ActiveXObject("Microsoft.XMLHTTP"):null,o=h(t),r="GET";o.length>=2e3?r="POST":e.force_post&&(r="POST"),"GET"===r?i.open("GET",e.url+S+"?"+o,!0):(i.open("POST",e.url+S,!0),i.setRequestHeader("Content-type","application/x-www-form-urlencoded")),i.onreadystatechange=function(){4===this.readyState&&this.status>=200&&this.status<300?"function"==typeof n&&n(!1,t):4===this.readyState&&(u("Failed Server XML HTTP request",this.status),"function"==typeof n&&n(!0,t))},"GET"==r?i.send():i.send(o)}catch(e){u("Failed XML HTTP request",e),"function"==typeof n&&n(!0,t)}}function h(e){var t=[];for(var n in e)t.push(n+"="+encodeURIComponent(e[n]));return t.join("&")}function p(e){return"/"==e.substr(e.length-1)?e.substr(0,e.length-1):e}function v(e,t){for(var n,i={},o=0;o<t.length;o++)void 0!==e[n=t[o]]&&(i[n]=e[n]);return i}function m(e){return void 0===e.pageY&&"number"==typeof e.clientX&&document.documentElement&&(e.pageX=e.clientX+document.body.scrollLeft+document.documentElement.scrollLeft,e.pageY=e.clientY+document.body.scrollTop+document.documentElement.scrollTop),e}function _(){var e=document;return Math.max(Math.max(e.body.scrollHeight,e.documentElement.scrollHeight),Math.max(e.body.offsetHeight,e.documentElement.offsetHeight),Math.max(e.body.clientHeight,e.documentElement.clientHeight))}function y(){var e=document;return Math.max(Math.max(e.body.scrollWidth,e.documentElement.scrollWidth),Math.max(e.body.offsetWidth,e.documentElement.offsetWidth),Math.max(e.body.clientWidth,e.documentElement.clientWidth))}function g(e){ae("cly_token",e)}function w(e,t){var n,i=document.createElement("script");i.setAttribute("type","text/javascript"),i.setAttribute("src",e),t&&(i.onreadystatechange=i.onload=function(){n||t(),n=!0}),document.getElementsByTagName("head")[0].appendChild(i)}function b(){var e=document.getElementById("cly-loader");if(!e){u("setting up loader");var t="#cly-loader {height: 4px; width: 100%; position: absolute; z-index: 99999; overflow: hidden; background-color: #fff; top:0px; left:0px;}#cly-loader:before{display: block; position: absolute; content: ''; left: -200px; width: 200px; height: 4px; background-color: #2EB52B; animation: cly-loading 2s linear infinite;}@keyframes cly-loading { from {left: -200px; width: 30%;} 50% {width: 30%;} 70% {width: 70%;} 80% { left: 50%;} 95% {left: 120%;} to {left: 100%;}}",n=document.head||document.getElementsByTagName("head")[0],i=document.createElement("style");i.type="text/css",i.styleSheet?i.styleSheet.cssText=t:i.appendChild(document.createTextNode(t)),n.appendChild(i),(e=document.createElement("div")).setAttribute("id","cly-loader"),document.body.appendChild(e)}e.style.display="block"}function E(){var e=document.getElementById("cly-loader");e&&(e.style.display="none")}var k,T,O,x="17.09",I="javascript_native_web",M=!1,C=!1,S="/i",V=500,A=1e3,q=[],L=[],R=[],P={},N=[],j=null,D=!0,B=0,F=null,H=0,U=0,W=0,G=60,Y=20,X=0,z=60,J=10,$=0,K=!0,Q=!1,Z=/^(((([^:\/#\?]+:)?(?:(\/\/)((?:(([^:@\/#\?]+)(?:\:([^:@\/#\?]+))?)@)?(([^:\/#\?\]\[]+|\[[^\/\]@#?]+\])(?:\:([0-9]+))?))?)?)?((\/?(?:[^\/\?#]+\/+)*)([^\?#]*)))?(\?[^#]+)?)(#.*)?/,ee=/(CountlySiteBot|nuhk|Googlebot|Yammybot|Openbot|Slurp|MSNBot|Ask Jeeves\/Teoma|ia_archiver|bingbot|Google Web Preview|Mediapartners-Google|AdsBot-Google|Baiduspider|Ezooms|YahooSeeker|AltaVista|AVSearch|Mercator|Scooter|InfoSeek|Ultraseek|Lycos|Wget|YandexBot|Yandex|YaDirectFetcher|SiteBot|Exabot|AhrefsBot|MJ12bot|TurnitinBot|magpie-crawler|Nutch Crawler|CMS Crawler|rogerbot|Domnutch|ssearch_bot|XoviBot|netseer|digincore|fr-crawler|wesee|AliasIO)/,te=!0;e.init=function(t){if(!M&&(O=c(),M=!0,q=ae("cly_queue")||[],P={},L=ae("cly_event")||[],t=t||{},V=t.interval||e.interval||V,A=t.queue_size||e.queue_size||A,G=t.fail_timeout||e.fail_timeout||G,Y=t.inactivity_time||e.inactivity_time||Y,z=t.session_update||e.session_update||z,J=t.max_events||e.max_events||J,e.ignore_prefetch=t.ignore_prefetch||e.ignore_prefetch||!0,e.debug=t.debug||e.debug||!1,e.app_key=t.app_key||e.app_key||null,e.device_id=t.device_id||e.device_id||r(),e.url=p(t.url||e.url||""),e.app_version=t.app_version||e.app_version||"0.0",e.country_code=t.country_code||e.country_code||null,e.city=t.city||e.city||null,e.ip_address=t.ip_address||e.ip_address||null,e.ignore_bots=t.ignore_bots||e.ignore_bots||!0,e.force_post=t.force_post||e.force_post||!1,e.q=e.q||[],e.onload=e.onload||[],e.ignore_visitor=t.ignore_visitor||e.ignore_visitor||!1,t.ignore_referrers&&t.ignore_referrers.constructor===Array?N=t.ignore_referrers:e.ignore_referrers&&e.ignore_referrers.constructor===Array&&(N=e.ignore_referrers),""===e.url&&(u("Please provide server URL"),e.ignore_visitor=!0),ae("cly_ignore")&&(e.ignore_visitor=!0),e.ignore_prefetch&&void 0!==document.visibilityState&&"prerender"===document.visibilityState&&(e.ignore_visitor=!0),e.ignore_bots&&ee.test(navigator.userAgent)&&(e.ignore_visitor=!0),window.name&&0===window.name.indexOf("cly:")?e.passed_data=JSON.parse(window.name.replace("cly:","")):location.hash&&0===location.hash.indexOf("#cly:")&&(e.passed_data=JSON.parse(location.hash.replace("#cly:",""))),e.passed_data&&e.passed_data.token&&e.passed_data.purpose&&(e.passed_data.token!=ae("cly_old_token")&&(g(e.passed_data.token),ae("cly_old_token",e.passed_data.token)),"heatmap"===e.passed_data.purpose&&(e.ignore_visitor=!0,b(),w(e.url+"/views/heatmap.js",E))),!e.ignore_visitor&&(u("Countly initialized"),e.onload.constructor!==Array&&(e.onload=[]),e.q.constructor!==Array&&(e.q=[]),o(),ae("cly_id",e.device_id),location.search)))for(var n=location.search.substring(1).split("&"),i=0;i<n.length;i++){var a=n[i].split("=");"cly_id"==a[0]?ae("cly_cmp_id",a[1]):"cly_uid"==a[0]&&ae("cly_cmp_uid",a[1])}},e.begin_session=function(e){if(!C){u("Session started"),k=c(),C=!0,D=!e;var t={};t.begin_session=1,t.metrics=JSON.stringify(s()),n(t)}},e.session_duration=function(e){C&&(u("Session extended",e),n({session_duration:e}))},e.end_session=function(e){C&&(e=e||c()-k,u("Ending session"),t(),C=!1,n({end_session:1,session_duration:e}))},e.change_id=function(t,i){if(e.device_id!=t){i||(e.end_session(),P={});var o=e.device_id;e.device_id=t,ae("cly_id",e.device_id),u("Changing id"),i?n({old_device_id:o}):e.begin_session(!D)}},e.add_event=function(e){if(e.key){e.count||(e.count=1);var t=v(e,["key","count","sum","dur","segmentation"]);t.timestamp=l();var n=new Date;t.hour=n.getHours(),t.dow=n.getDay(),L.push(t),ae("cly_event",L),u("Adding event: ",e)}else u("Event must have key property")},e.start_event=function(e){P[e]?u("Timed event with key "+e+" already started"):P[e]=c()},e.end_event=function(t){"string"==typeof t&&(t={key:t}),t.key?P[t.key]?(t.dur=c()-P[t.key],e.add_event(t),delete P[t.key]):u("Timed event with key "+t.key+" was not started"):u("Event must have key property")},e.user_details=function(e){u("Adding userdetails: ",e);var t=["name","username","email","organization","phone","picture","gender","byear","custom"];n({user_details:JSON.stringify(v(e,t))})},e.report_conversion=function(e,t){e=e||ae("cly_cmp_id")||"cly_organic",t=t||ae("cly_cmp_uid"),e&&t?n({campaign_id:e,campaign_user:t}):e?n({campaign_id:e}):u("No campaign data found")};var ne={},ie=function(e,t,n){ne[e]||(ne[e]={}),"$push"==n||"$pull"==n||"$addToSet"==n?(ne[e][n]||(ne[e][n]=[]),ne[e][n].push(t)):ne[e][n]=t};e.userData={set:function(e,t){ne[e]=t},set_once:function(e){ie(e,1,"$setOnce")},increment:function(e){ie(e,1,"$inc")},increment_by:function(e,t){ie(e,t,"$inc")},multiply:function(e,t){ie(e,t,"$mul")},max:function(e,t){ie(e,t,"$max")},min:function(e,t){ie(e,t,"$min")},push:function(e,t){ie(e,t,"$push")},push_unique:function(e,t){ie(e,t,"$addToSet")},pull:function(e,t){ie(e,t,"$pull")},save:function(){n({user_details:JSON.stringify({custom:ne})}),ne={}}},e.track_errors=function(e){j=e,window.onerror=function(e,t,n,i,o){if(void 0!==o)d(o,!1);else{i=i||window.event&&window.event.errorCharacter;var r="";void 0!==e&&(r+=e+"\n"),void 0!==t&&(r+="at "+t),void 0!==n&&(r+=":"+n),void 0!==i&&(r+=":"+i),r+="\n";try{for(var a=[],s=arguments.callee.caller;s;)a.push(s.name),s=s.caller;r+=a.join("\n")}catch(e){}d(r,!1)}}},e.log_error=function(e,t){d(e,!0,t)},e.add_log=function(e){R.push(e)},e.stop_time=function(){te&&(te=!1,B=c()-k,U=c()-H)},e.start_time=function(){te||(te=!0,k=c()-B,H=c()-U,U=0)},e.track_sessions=function(){function t(){document[i]?e.stop_time():e.start_time()}function n(){X>=Y&&e.start_time(),X=0}e.begin_session(),e.start_time(),oe(window,"beforeunload",function(){e.end_session()}),oe(window,"unload",function(){e.end_session()});var i="hidden";i in document?document.addEventListener("visibilitychange",t):(i="mozHidden")in document?document.addEventListener("mozvisibilitychange",t):(i="webkitHidden")in document?document.addEventListener("webkitvisibilitychange",t):(i="msHidden")in document?document.addEventListener("msvisibilitychange",t):"onfocusin"in document?(oe(window,"focusin",function(){e.start_time()}),oe(window,"focusout",function(){e.stop_time()})):(oe(window,"focus",function(){e.start_time()}),oe(window,"blur",function(){e.stop_time()}),oe(window,"pageshow",function(){e.start_time()}),oe(window,"pagehide",function(){e.stop_time()})),oe(window,"mousemove",n),oe(window,"click",n),oe(window,"keydown",n),oe(window,"scroll",n),setInterval(function(){++X>=Y&&e.stop_time()},6e4)},e.track_pageview=function(n,i){if(t(),n&&n.constructor===Array&&(i=n,n=null),n=n||window.location.pathname,i&&i.length)for(var o=0;o<i.length;o++)try{if(new RegExp(i[o]).test(n))return void u("Ignored:",n)}catch(e){}F=n,H=c();var r={name:n,visit:1,domain:window.location.hostname};if(void 0!==document.referrer&&document.referrer.length){var a=Z.exec(document.referrer);a&&a[11]&&a[11]!=window.location.hostname&&(r.start=1)}e.add_event({key:"[CLY]_view",segmentation:r})},e.track_view=function(t,n){e.track_pageview(t,n)},e.track_clicks=function(t){t=t||document;var n=!0;oe(t,"click",function(t){if(n){if(n=!1,m(t),void 0!==t.pageX&&void 0!==t.pageY){var i=_(),o=y();e.add_event({key:"[CLY]_action",segmentation:{type:"click",x:t.pageX,y:t.pageY,width:o,height:i,domain:window.location.hostname,view:window.location.pathname}})}setTimeout(function(){n=!0},1e3)}})},e.track_links=function(t){t=t||document,oe(t,"click",function(t){var n=re(t).closest("a");n&&(m(t),e.add_event({key:"linkClick",segmentation:{href:n.href,text:n.innerText,id:n.id,x:t.pageX,y:t.pageY,view:window.location.pathname}}),void 0===n.href||"_blank"===n.target||t.metaKey||t.altKey||t.ctrlKey||t.shiftKey||0!==n.href.replace(window.location.href.split("#")[0],"").indexOf("#")&&e.end_session())})},e.track_forms=function(t){function n(e){return e.name||e.id||e.type||e.nodeName}t=t||document,oe(t,"submit",function(t){var i,o=re(t),r={id:o.id,name:o.name,action:o.action,method:o.method,view:window.location.pathname};if(void 0!==o.elements)for(var a=0;a<o.elements.length;a++)if((i=o.elements[a])&&"password"!=i.type)if(void 0===r["input:"+n(i)]&&(r["input:"+n(i)]=[]),"select"==i.nodeName.toLowerCase())if(void 0!==i.multiple){var s=[];if(void 0!==i.options)for(var u=0;u<i.options.length;u++)i.options[u].selected&&s.push(i.options[u].value);r["input:"+n(i)].push(s.join(", "))}else r["input:"+n(i)].push(i.options[i.selectedIndex].value);else"input"==i.nodeName.toLowerCase()?void 0===i.type||"checkbox"!=i.type.toLowerCase()&&"radio"!=i.type.toLowerCase()?r["input:"+n(i)].push(i.value):i.checked&&r["input:"+n(i)].push(i.value):"textarea"==i.nodeName.toLowerCase()?r["input:"+n(i)].push(i.value):void 0!==i.value&&r["input:"+n(i)].push(i.value);for(var c in r)void 0!==r[c].join&&(r[c]=r[c].join(", "));e.add_event({key:"formSubmit",segmentation:r}),e.end_session()})},e.collect_from_forms=function(t,n){t=t||document,oe(t,"submit",function(i){var o,r=re(i),a={},s=!1;if(void 0!==r.elements){var c,l,d={},f=t.getElementsByTagName("LABEL");for(c=0;c<f.length;c++)f[c].htmlFor&&""!==f[c].htmlFor&&(d[f[c].htmlFor]=f[c].innerText||f[c].textContent||f[c].innerHTML);for(c=0;c<r.elements.length;c++)if((o=r.elements[c])&&"password"!=o.type&&-1==o.className.indexOf("cly_user_ignore")){var h="";if("select"==o.nodeName.toLowerCase())if(void 0!==o.multiple){var p=[];if(void 0!==o.options)for(l=0;l<o.options.length;l++)o.options[l].selected&&p.push(o.options[l].value);h=p.join(", ")}else h=o.options[o.selectedIndex].value;else"input"==o.nodeName.toLowerCase()?void 0===o.type||"checkbox"!=o.type.toLowerCase()&&"radio"!=o.type.toLowerCase()?h=o.value:o.checked&&(h=o.value):"textarea"==o.nodeName.toLowerCase()?h=o.value:void 0!==o.value&&(h=o.value);if(o.className&&-1!=o.className.indexOf("cly_user_")){var v=o.className.split(" ");for(l=0;l<v.length;l++)if(0===v[l].indexOf("cly_user_")){a[v[l].replace("cly_user_","")]=h,s=!0;break}}else o.type&&"email"==o.type.toLowerCase()||o.name&&-1!=o.name.toLowerCase().indexOf("email")||o.id&&-1!=o.id.toLowerCase().indexOf("email")||o.id&&d[o.id]&&-1!=d[o.id].toLowerCase().indexOf("email")||/[^@\s]+@[^@\s]+\.[^@\s]+/.test(h)?(a.email||(a.email=h),s=!0):o.name&&-1!=o.name.toLowerCase().indexOf("username")||o.id&&-1!=o.id.toLowerCase().indexOf("username")||o.id&&d[o.id]&&-1!=d[o.id].toLowerCase().indexOf("username")?(a.username||(a.username=h),s=!0):o.name&&(-1!=o.name.toLowerCase().indexOf("tel")||-1!=o.name.toLowerCase().indexOf("phone")||-1!=o.name.toLowerCase().indexOf("number"))||o.id&&(-1!=o.id.toLowerCase().indexOf("tel")||-1!=o.id.toLowerCase().indexOf("phone")||-1!=o.id.toLowerCase().indexOf("number"))||o.id&&d[o.id]&&(-1!=d[o.id].toLowerCase().indexOf("tel")||-1!=d[o.id].toLowerCase().indexOf("phone")||-1!=d[o.id].toLowerCase().indexOf("number"))?(a.phone||(a.phone=h),s=!0):o.name&&(-1!=o.name.toLowerCase().indexOf("org")||-1!=o.name.toLowerCase().indexOf("company"))||o.id&&(-1!=o.id.toLowerCase().indexOf("org")||-1!=o.id.toLowerCase().indexOf("company"))||o.id&&d[o.id]&&(-1!=d[o.id].toLowerCase().indexOf("org")||-1!=d[o.id].toLowerCase().indexOf("company"))?(a.organization||(a.organization=h),s=!0):(o.name&&-1!=o.name.toLowerCase().indexOf("name")||o.id&&-1!=o.id.toLowerCase().indexOf("name")||o.id&&d[o.id]&&-1!=d[o.id].toLowerCase().indexOf("name"))&&(a.name||(a.name=""),a.name+=h+" ",s=!0)}}s&&(u("Gathered user data",a),n?e.user_details({custom:a}):e.user_details(a)),e.end_session()})},e.collect_from_facebook=function(t){FB&&FB.api&&FB.api("/me",function(n){var i={};if(n.name&&(i.name=n.name),n.email&&(i.email=n.email),"male"==n.gender?i.gender="M":"female"==n.gender&&(i.gender="F"),n.birthday){var o=n.birthday.split("/").pop();o&&4==o.length&&(i.byear=o)}if(n.work&&n.work[0]&&n.work[0].employer&&n.work[0].employer.name&&(i.organization=n.work[0].employer.name),t){i.custom={};for(var r in t){for(var a=t[r].split("."),s=n,u=0;u<a.length&&void 0!==(s=s[a[u]]);u++);void 0!==s&&(i.custom[r]=s)}}e.user_details(i)})},e.opt_out=function(){e.ignore_visitor=!0,ae("cly_ignore",!0)},e.opt_in=function(){ae("cly_ignore",!1),e.ignore_visitor=!1,e.ignore_prefetch&&void 0!==document.visibilityState&&"prerender"===document.visibilityState&&(e.ignore_visitor=!0),e.ignore_bots&&ee.test(navigator.userAgent)&&(e.ignore_visitor=!0),e.ignore_visitor||Q||o()},Element.prototype.closest||(Element.prototype.closest=function(e){var t=this;for(e=e.toUpperCase();t;){if(t.nodeName.toUpperCase()==e)return t;t=t.parentElement}});var oe=function(e,t,n){void 0!==e.addEventListener?e.addEventListener(t,n,!1):e.attachEvent("on"+t,n)},re=function(e){return e?void 0!==e.target?e.target:e.srcElement:window.event.srcElement},ae=function(e,t,n){function o(e,t,n){var i=new Date;i.setTime(i.getTime()+24*n*60*60*1e3);var o="; expires="+i.toGMTString();document.cookie=e+"="+t+o+"; path=/"}n=n||!1;var r,a=!1;a=!0;try{"undefined"!=typeof localStorage&&localStorage.setItem("testLocal",!0)}catch(e){a=!1}if(void 0!==t&&null!==t&&("object"===(void 0===t?"undefined":i(t))&&(t=JSON.stringify(t)),a?localStorage.setItem(e,t):n||o(e,t,30)),void 0===t){a?r=localStorage.getItem(e):n||(r=function(e){for(var t=e+"=",n=document.cookie.split(";"),i=0,o=n.length;i<o;i++){for(var r=n[i];" "===r.charAt(0);)r=r.substring(1,r.length);if(0===r.indexOf(t))return r.substring(t.length,r.length)}return null}(e));try{r=JSON.parse(r)}catch(e){r=r}return r}null===t&&(a?localStorage.removeItem(e):n||o(e,"",-1))};e._internals={store:ae,getDocWidth:y,getDocHeight:_,get_page_coord:m,get_event_target:re,add_event:oe,getProperties:v,stripTrailingSlash:p,prepareParams:h,sendXmlHttpRequest:f,recordError:d,getMsTimestamp:l,getTimestamp:c,log:u,getMetrics:s,generateUUID:a,getId:r,heartBeat:o,toRequestQueue:n,reportViewDuration:t,loadJS:w,getLastView:function(){return F},setToken:g,getToken:function(){var e=ae("cly_token");return ae("cly_token",null),e},showLoader:b,hideLoader:E}}(window.VA=window.VA||{});var o=e.playerconfig.DEFAULT,r=window.VA||{};n.registerPlugin("viewabilityAdsPlugin",function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};if(n&&n.app_key){var i=this,a={q:r.q||[],app_key:n.app_key,url:n.url||"//analytics.sohatv.vn",queue_size:50,interval:3e3};r.init(a);var s=i.options().params;!1!==s.ads&&(e.agent.isMobile||(s.v=s.v||s.vid,i.on("ad:error",function(e,t){r.q.push(["add_event",{key:"ad_error",segmentation:{v:s.v,IdAds:t}}])}),i.on(o.EVENT.VPAID_AD_VIDEO_START,function(){var n=!1,a=!1,u=i.vastAd.state.vastResponse.ads[0].id;i.one(o.EVENT.AD_END,function(){var t="";for(var i in e.agent)!0===e.agent[i]&&(t=t.concat(i));var o=t+"Version"+e.agent.version;n?a||r.q.push(["add_event",{key:"ad_view_error",segmentation:{v:s.v,IdAds:u,AgentInfo:o,inView2s:s.v}}]):r.q.push(["add_event",{key:"ad_view_error",segmentation:{v:s.v,IdAds:u,AgentInfo:o,Threshold:s.v}}])});var c=document.getElementById(""+i.id_).children[1].children[0].getElementsByClassName("VPAID-container")[0].children[0].children[0],l=new t,d=[t.MeasurementTechniques.IntersectionObserver],f={inViewThreshold:.5,timeInView:2e3},h=t.Strategies.StrategyFactory(!0,d,f);l.measureElement(c,h).onViewableStart(function(){n=!0,r.q.push(["add_event",{key:"ad_threshold_50%",segmentation:{v:s.v,IdAds:u}}])}).onViewableComplete(function(){a=!0,r.q.push(["add_event",{key:"ad_inview_2s",segmentation:{v:s.v,IdAds:u}}])})}),i.on(o.EVENT.VAST_AD_VIDEO_SHOW,function(){var n=!1,a=!1,u=i.vastAd.state.vastResponse.ads[0].id;i.one(o.EVENT.AD_END,function(){var t="";for(var i in e.agent)!0===e.agent[i]&&(t=t.concat(i));var o=t+"Version"+e.agent.version;n?a||r.q.push(["add_event",{key:"ad_view_error",segmentation:{v:s.v,IdAds:u,AgentInfo:o,inView2s:s.v}}]):r.q.push(["add_event",{key:"ad_view_error",segmentation:{v:s.v,IdAds:u,AgentInfo:o,Threshold:s.v}}])});var c=document.getElementById(""+i.id_).children[1].children[0].getElementsByClassName("ad-container")[0],l=new t,d=[t.MeasurementTechniques.IntersectionObserver],f={inViewThreshold:.5,timeInView:2e3},h=t.Strategies.StrategyFactory(!0,d,f);l.measureElement(c,h).onViewableStart(function(){n=!0,r.q.push(["add_event",{key:"ad_threshold_50%",segmentation:{v:s.v,IdAds:u}}])}).onViewableComplete(function(){a=!0,r.q.push(["add_event",{key:"ad_inview_2s",segmentation:{v:s.v,IdAds:u}}])})}),i.on(o.EVENT.AD_START,function(){r.q.push(["add_event",{key:"ad_start",segmentation:{v:s.v}}])})))}})})}();/**
 * timelineThumbPlugin - v1.0.0 - 17:31:38 30-10-2019
 * Author: tungtm
 */

!function(){var e=void 0;!function(t,i){"object"==typeof exports&&"undefined"!=typeof module?i(require("playercore"),require("react")):"function"==typeof e&&e.amd?e(["playercore","react"],i):i(t.Kenh14PlayerCore,t.React)}(this,function(e,t){"use strict";function i(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:e;e=e<0?0:e;var i=Math.floor(e%60),o=Math.floor(e/60%60),n=Math.floor(e/3600),r=Math.floor(t/60%60),s=Math.floor(t/3600);return(isNaN(e)||e===1/0)&&(n=o=i="-"),n=n>0||s>0?n+":":"",o=((n||r>=10)&&o<10?"0"+o:o)+":",i=i<10?"0"+i:i,n+o+i}var o,n,r="default"in e?e.default:e,s="default"in t?t.default:t,a=(function(){function e(e){this.value=e}function t(t){function i(n,r){try{var s=t[n](r),a=s.value;a instanceof e?Promise.resolve(a.value).then(function(e){i("next",e)},function(e){i("throw",e)}):o(s.done?"return":"normal",s.value)}catch(e){o("throw",e)}}function o(e,t){switch(e){case"return":n.resolve({value:t,done:!0});break;case"throw":n.reject(t);break;default:n.resolve({value:t,done:!1})}(n=n.next)?i(n.key,n.arg):r=null}var n,r;this._invoke=function(e,t){return new Promise(function(o,s){var a={key:e,arg:t,resolve:o,reject:s,next:null};r?r=r.next=a:(n=r=a,i(e,t))})},"function"!=typeof t.return&&(this.return=void 0)}"function"==typeof Symbol&&Symbol.asyncIterator&&(t.prototype[Symbol.asyncIterator]=function(){return this}),t.prototype.next=function(e){return this._invoke("next",e)},t.prototype.throw=function(e){return this._invoke("throw",e)},t.prototype.return=function(e){return this._invoke("return",e)}}(),function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}),h=function(){function e(e,t){for(var i=0;i<t.length;i++){var o=t[i];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,i,o){return i&&e(t.prototype,i),o&&e(t,o),t}}(),u=function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)},c=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t},l=e.playerconfig.DEFAULT,p=(n=o=function(e){function t(e){a(this,t);var i=c(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return i.state={show:!0},i._updateMouseTime=i._updateMouseTime.bind(i),i._isShow=i._isShow.bind(i),i._checkRowImg=i._checkRowImg.bind(i),i}return u(t,e),h(t,[{key:"componentWillMount",value:function(){var e=this.props.player;this.width=160,this.haveImgSize=!1,e.on(l.EVENT.MOUSE_TIME_UPDATE,this._updateMouseTime),e.on(l.EVENT.MOUSE_DOWN_TIME_UPDATE,this._isShow)}},{key:"_isShow",value:function(e,t){t.isMouseDown?this.setState({show:!1}):this.setState({show:!0})}},{key:"_updateMouseTime",value:function(e,t){var i=this.props.player.options().params.vid,o=i.slice(0,i.indexOf("/")),n=i.slice(i.indexOf("/"));this.s_=parseInt(t.time/30),this.srcImg_="//hls.mediacdn.vn/"+o+"/timeline_thumb/s_"+(this.s_+n)+".jpg",this.haveImgSize||(this.haveImgSize=!0,this.getImgSize(this.srcImg_,t)),this.timeImg_=t.time-30*this.s_,this._checkRowImg(t)}},{key:"getImgSize",value:function(e,t){var i=this,o=new Image;o.onload=function(){var e=o.height,n=o.width;i.heightImg_=i.width/(n/5/(e/3)),i.heightImg_>90&&(i.heightImg_=90,i.width=i.heightImg_*(n/5/(e/3))),i._checkRowImg(t),i.setState({hei:3*i.heightImg_}),i.setState({wid:5*i.width}),i.setState({width:i.width})},o.src=e}},{key:"_checkRowImg",value:function(e){var t=parseInt(this.timeImg_/10);if(this.heightImg_)if(0===t){var i=this.heightImg_*t;this._getPositionImg(i,e)}else if(1===t){var o=this.heightImg_*t;this._getPositionImg(o,e)}else{var n=this.heightImg_*t;this._getPositionImg(n,e)}}},{key:"_getPositionImg",value:function(e,t){var o=this.props.player.currentDimension("width"),n=t.percent*o,r=void 0,s=void 0,a=void 0;n>=79&&n<=o-79?(r=t.percent*o-79+80-this.width/2+"px",a=t.percent*o-79+"px"):n<79?(r=80-this.width/2+"px",a="0px"):n>o-79&&(r=o-160+80-this.width/2+"px",a=o-160+"px");var h=parseInt(this.timeImg_%10),u=parseInt(h/2),c=i(t.time,t.duration);0===u?(s="-0px",this._setPostionImg(s,"-"+e+"px",r,c,a)):1===u?(s="-"+this.width+"px",this._setPostionImg(s,"-"+e+"px",r,c,a)):2===u?(s="-"+2*this.width+"px",this._setPostionImg(s,"-"+e+"px",r,c,a)):3===u?(s="-"+3*this.width+"px",this._setPostionImg(s,"-"+e+"px",r,c,a)):(s="-"+4*this.width+"px",this._setPostionImg(s,"-"+e+"px",r,c,a))}},{key:"_setPostionImg",value:function(e,t,i,o,n){this.setState({srcImg:this.srcImg_,widthImg:e,heightImg:t,left:i,mouseTime:o,height:this.heightImg_,positionBackGround:n})}},{key:"MoveThumb",value:function(){this.setState({srcImg:!1})}},{key:"render",value:function(){if(!this.state.srcImg||!this.state.show)return null;var e=this.state.srcImg,t=this.state,i=t.widthImg,o=t.width,n=t.heightImg,r=t.left,a=t.mouseTime,h=t.height,u=t.hei,c=t.wid,l=t.positionBackGround,p="url("+e+") "+i+" "+n+" / "+c+"px "+u+"px";return s.createElement("div",{className:"Kenh14Player-timeline"},s.createElement("div",{className:"timelineThumb",onMouseMove:this.MoveThumb.bind(this),style:{background:p,left:r,height:h+"px",top:-h-12+"px",width:o+"px"}},s.createElement("div",{className:"timeMouseDisplay"},s.createElement("div",{className:"tooltip-image"}),s.createElement("span",{className:"tooltip-text"},a))),s.createElement("div",{className:"backgroundImage",onMouseMove:this.MoveThumb.bind(this),style:{backgroundColor:"#f1f1f1",left:l,height:h+"px",top:-h-12+"px"}}),s.createElement("div",{className:"border-timeline",onMouseMove:this.MoveThumb.bind(this),style:{left:l,height:h+"px",top:-h-12+"px"}}))}}]),t}(t.Component),o.propTypes={player:e.PropTypes.object.isRequired},n),m=e.playerconfig.DEFAULT;r.registerPlugin("timelineThumbPlugin",function(){var t=this,i=t.options().params;if(!e.agent.isMobile&&!i.live){var o=!1;t.on("ready",function(){var e=t.currentDimension("width"),i=t.currentDimension("height");if(e<300||i<300)o=!0;else{var n=s.createElement(p,{key:"timelineThumb",player:t});t.container.controlBar.progressControl.progressSlider.addChild(n,3)}}),t.on(m.EVENT.MOUSE_TIME_UPDATE,function(){"none"!==window.ReactDOM.findDOMNode(t.container.controlBar.progressControl.progressSlider.mouseTimeDisplay).style.display&&(o||(window.ReactDOM.findDOMNode(t.container.controlBar.progressControl.progressSlider.mouseTimeDisplay).style.display="none"))})}})})}();/**
 * itvcPostMessage - v1.0.0 - 10:04:54 25-09-2018
 * Author: TuanLDT
 */

!function(){var e=void 0;!function(n,t){"object"==typeof exports&&"undefined"!=typeof module?t(require("playercore")):"function"==typeof e&&e.amd?e(["playercore"],t):t(n.Kenh14PlayerCore)}(this,function(e){"use strict";(e=e&&e.hasOwnProperty("default")?e.default:e).registerPlugin("itvcPostMessage",function(){function e(e){try{var a=e[e.message?"message":"data"];if(-1===a.indexOf(t))return;if(-1===a.indexOf("closebannerExpand"))return;n.vastAd.adUnit().containerEl.children[0].children[0].contentWindow.postMessage("admCloseExpand","*"),n.vastAd.adUnit().collapseAd()}catch(e){}}var n=this,t=n.id_;window.addEventListener?window.addEventListener("message",function(n){e(n)},!1):window.attachEvent&&window.attachEvent("onmessage",function(n){e(n)})})})}();(function () { var define = undefined; 

(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(require('playercore'), require('react')) :
	typeof define === 'function' && define.amd ? define(['playercore', 'react'], factory) :
	(factory(global.Kenh14PlayerCore,global.React));
}(this, (function (playercore,React) { 'use strict';

var playercore__default = 'default' in playercore ? playercore['default'] : playercore;
var React__default = 'default' in React ? React['default'] : React;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
  return typeof obj;
} : function (obj) {
  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
};





var asyncGenerator = function () {
  function AwaitValue(value) {
    this.value = value;
  }

  function AsyncGenerator(gen) {
    var front, back;

    function send(key, arg) {
      return new Promise(function (resolve, reject) {
        var request = {
          key: key,
          arg: arg,
          resolve: resolve,
          reject: reject,
          next: null
        };

        if (back) {
          back = back.next = request;
        } else {
          front = back = request;
          resume(key, arg);
        }
      });
    }

    function resume(key, arg) {
      try {
        var result = gen[key](arg);
        var value = result.value;

        if (value instanceof AwaitValue) {
          Promise.resolve(value.value).then(function (arg) {
            resume("next", arg);
          }, function (arg) {
            resume("throw", arg);
          });
        } else {
          settle(result.done ? "return" : "normal", result.value);
        }
      } catch (err) {
        settle("throw", err);
      }
    }

    function settle(type, value) {
      switch (type) {
        case "return":
          front.resolve({
            value: value,
            done: true
          });
          break;

        case "throw":
          front.reject(value);
          break;

        default:
          front.resolve({
            value: value,
            done: false
          });
          break;
      }

      front = front.next;

      if (front) {
        resume(front.key, front.arg);
      } else {
        back = null;
      }
    }

    this._invoke = send;

    if (typeof gen.return !== "function") {
      this.return = undefined;
    }
  }

  if (typeof Symbol === "function" && Symbol.asyncIterator) {
    AsyncGenerator.prototype[Symbol.asyncIterator] = function () {
      return this;
    };
  }

  AsyncGenerator.prototype.next = function (arg) {
    return this._invoke("next", arg);
  };

  AsyncGenerator.prototype.throw = function (arg) {
    return this._invoke("throw", arg);
  };

  AsyncGenerator.prototype.return = function (arg) {
    return this._invoke("return", arg);
  };

  return {
    wrap: function (fn) {
      return function () {
        return new AsyncGenerator(fn.apply(this, arguments));
      };
    },
    await: function (value) {
      return new AwaitValue(value);
    }
  };
}();



var asyncToGenerator = function (fn) {
  return function () {
    var gen = fn.apply(this, arguments);
    return new Promise(function (resolve, reject) {
      function step(key, arg) {
        try {
          var info = gen[key](arg);
          var value = info.value;
        } catch (error) {
          reject(error);
          return;
        }

        if (info.done) {
          resolve(value);
        } else {
          return Promise.resolve(value).then(function (value) {
            step("next", value);
          }, function (err) {
            step("throw", err);
          });
        }
      }

      return step("next");
    });
  };
};

var classCallCheck = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

var createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();







var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};



var inherits = function (subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
};











var possibleConstructorReturn = function (self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return call && (typeof call === "object" || typeof call === "function") ? call : self;
};



















var toConsumableArray = function (arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];

    return arr2;
  } else {
    return Array.from(arr);
  }
};

var _class$3;
var _temp$3;

/**
 * BaseClass của VCPlayer
 * @class VCPlayerObject
 */
var VCPlayerObject$1 = (_temp$3 = _class$3 = function () {

    /**
     * Tạo một instance của class SkyGoObject
     * @param  {Object} props
     */


    /**
     * Định props default
     * @type {Object}
     */
    function VCPlayerObject(props) {
        classCallCheck(this, VCPlayerObject);
        this.state = {};

        this._validProps(props);
        this._initProps(props);
    }

    /**
     * get default props
     * @return {Object}       Trả về props default (static defaultProps)
     */


    /**
     * Định nghĩa kiểu của props
     * @type {Object}
     */


    createClass(VCPlayerObject, [{
        key: 'getDefaultProps',
        value: function getDefaultProps() {
            return this.constructor.defaultProps;
        }

        /**
         * Hàm set state
         * @param {Object} state={}
         */

    }, {
        key: 'setState',
        value: function setState() {
            var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

            var old_state = this.state || {};
            this.state = _extends({}, old_state, state);

            playercore.log.stateInfo({
                label: this.constructor.name,
                prevState: old_state,
                nextState: state
            });
        }

        /**
         * Hàm update props
         * @param  {Object} props
         */

    }, {
        key: 'updateProps',
        value: function updateProps() {
            var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

            var old_props = this.props || {};
            this.props = _extends({}, old_props, props);
        }

        /**
         * Hàm init props. 
         * ```js
         * var defaultProps = this.getDefaultProps(props);
         * this.props = {...defaultProps, ...props};
         *  ```
         * @param  {Object} props Props được truyền vào trong constructor
         */

    }, {
        key: '_initProps',
        value: function _initProps(props) {
            var defaultProps = this.getDefaultProps(props);
            this.props = _extends({}, defaultProps, props);
        }

        /**
         * Hàm valid props truyền vào hàm constructor khi khởi tạo đối tượng dựa trên propTypes
         */

    }, {
        key: '_validProps',
        value: function _validProps(props) {
            var propTypes = this.constructor.propTypes;

            playercore.PropTypes.checkPropTypes(propTypes, props, 'prop', this.constructor.name);
        }
    }]);
    return VCPlayerObject;
}(), _class$3.propTypes = {}, _class$3.defaultProps = {}, _temp$3);

var ISO8086_REGEXP = /^([+-]?\d{4}(?!\d{2}\b))((-?)((0[1-9]|1[0-2])(\3([12]\d|0[1-9]|3[01]))?|W([0-4]\d|5[0-2])(-?[1-7])?|(00[1-9]|0[1-9]\d|[12]\d{2}|3([0-5]\d|6[1-6])))([T\s]((([01]\d|2[0-3])((:?)[0-5]\d)?|24:?00)([.,]\d+(?!:))?)?(\17[0-5]\d([.,]\d+)?)?([zZ]|([+-])([01]\d|2[0-3]):?([0-5]\d)?)?)?)?$/;

function noop() {}

function isNull(o) {
    return o === null;
}

function isDefined(o) {
    return o !== undefined;
}

function isObject(obj) {
    return (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object';
}

function isFunction(str) {
    return typeof str === 'function';
}

function isNumber(num) {
    return typeof num === 'number';
}

function isArray(array) {
    return Object.prototype.toString.call(array) === '[object Array]';
}

function isString(str) {
    return typeof str === 'string';
}

function isEmptyString(str) {
    return isString(str) && str.length === 0;
}

function isNotEmptyString(str) {
    return isString(str) && str.length !== 0;
}

function arrayLikeObjToArray(args) {
    return Array.prototype.slice.call(args);
}

function forEach(obj, iterator, context) {
    var key, length;
    if (obj) {
        if (isFunction(obj)) {
            for (key in obj) {
                // Need to check if hasOwnProperty exists,
                // as on IE8 the result of querySelectorAll is an object without a hasOwnProperty function
                if (key !== 'prototype' && key !== 'length' && key !== 'name' && (!obj.hasOwnProperty || obj.hasOwnProperty(key))) {
                    iterator.call(context, obj[key], key, obj);
                }
            }
        } else if (isArray(obj)) {
            var isPrimitive = (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) !== 'object';
            for (key = 0, length = obj.length; key < length; key++) {
                if (isPrimitive || key in obj) {
                    iterator.call(context, obj[key], key, obj);
                }
            }
        } else if (obj.forEach && obj.forEach !== forEach) {
            obj.forEach(iterator, context, obj);
        } else {
            for (key in obj) {
                if (obj.hasOwnProperty(key)) {
                    iterator.call(context, obj[key], key, obj);
                }
            }
        }
    }
    return obj;
}

function extend(obj) {
    var arg, i, k;
    for (i = 1; i < arguments.length; i++) {
        arg = arguments[i];
        for (k in arg) {
            if (arg.hasOwnProperty(k)) {
                if (isObject(obj[k]) && !isNull(obj[k]) && isObject(arg[k])) {
                    obj[k] = extend({}, obj[k], arg[k]);
                } else {
                    obj[k] = arg[k];
                }
            }
        }
    }
    return obj;
}

function capitalize(s) {
    return s.charAt(0).toUpperCase() + s.slice(1);
}

function decapitalize(s) {
    return s.charAt(0).toLowerCase() + s.slice(1);
}

/**
 * This method works the same way array.prototype.map works but if the transformer returns undefine, then
 * it won't be added to the transformed Array.
 */
function transformArray(array, transformer) {
    var transformedArray = [];

    array.forEach(function (item, index) {
        var transformedItem = transformer(item, index);
        if (isDefined(transformedItem)) {
            transformedArray.push(transformedItem);
        }
    });

    return transformedArray;
}

function toFixedDigits(num, digits) {
    var formattedNum = num + '';
    digits = isNumber(digits) ? digits : 0;
    num = isNumber(num) ? num : parseInt(num, 10);
    if (isNumber(num) && !isNaN(num)) {
        formattedNum = num + '';
        while (formattedNum.length < digits) {
            formattedNum = '0' + formattedNum;
        }
        return formattedNum;
    }
    return NaN + '';
}

function throttle(callback, delay) {
    var previousCall = new Date().getTime() - (delay + 1);
    return function () {
        var time = new Date().getTime();
        if (time - previousCall >= delay) {
            previousCall = time;
            callback.apply(this, arguments);
        }
    };
}

function isISO8601(value) {
    if (isNumber(value)) {
        value = value + ''; //we make sure that we are working with strings
    }

    if (!isString(value)) {
        return false;
    }

    return ISO8086_REGEXP.test(value.trim());
}

/**
 * Checks if the Browser is IE9 and below
 * @returns {boolean}
 */
function isOldIE() {
    var version = getInternetExplorerVersion(navigator);
    if (version === -1) {
        return false;
    }

    return version < 10;
}

/**
 * Returns the version of Internet Explorer or a -1 (indicating the use of another browser).
 * Source: https://msdn.microsoft.com/en-us/library/ms537509(v=vs.85).aspx
 * @returns {number} the version of Internet Explorer or a -1 (indicating the use of another browser).
 */
function getInternetExplorerVersion(navigator) {
    var rv = -1;

    if (navigator.appName == 'Microsoft Internet Explorer') {
        var ua = navigator.userAgent;
        var re = new RegExp('MSIE ([0-9]{1,}\\.[0-9]{0,})');
        var res = re.exec(ua);
        if (res !== null) {
            rv = parseFloat(res[1]);
        }
    }

    return rv;
}

var Dom = function () {
    function Dom() {
        classCallCheck(this, Dom);
    }

    createClass(Dom, null, [{
        key: 'addClass',
        value: function addClass(el, cssClass) {
            var classes;

            if (isNotEmptyString(cssClass)) {
                if (el.classList) {
                    return el.classList.add(cssClass);
                }

                classes = isString(el.getAttribute('class')) ? el.getAttribute('class').split(/\s+/) : [];
                if (isString(cssClass) && isNotEmptyString(cssClass.replace(/\s+/, ''))) {
                    classes.push(cssClass);
                    el.setAttribute('class', classes.join(' '));
                }
            }
        }
    }, {
        key: 'addEventListener',
        value: function addEventListener(el, type, handler) {
            if (isArray(el)) {
                forEach(el, function (e) {
                    Dom.addEventListener(e, type, handler);
                });
                return;
            }

            if (isArray(type)) {
                forEach(type, function (t) {
                    Dom.addEventListener(el, t, handler);
                });
                return;
            }

            if (el.addEventListener) {
                el.addEventListener(type, handler, false);
            } else if (el.attachEvent) {
                // WARNING!!! this is a very naive implementation !
                // the event object that should be passed to the handler
                // would not be there for IE8
                // we should use "window.event" and then "event.srcElement"
                // instead of "event.target"
                el.attachEvent('on' + type, handler);
            }
        }
    }, {
        key: 'remove',
        value: function remove(node) {
            if (node && node.parentNode) {
                node.parentNode.removeChild(node);
            }
        }
    }, {
        key: 'removeEventListener',
        value: function removeEventListener(el, type, handler) {
            if (isArray(el)) {
                forEach(el, function (e) {
                    Dom.removeEventListener(e, type, handler);
                });
                return;
            }

            if (isArray(type)) {
                forEach(type, function (t) {
                    Dom.removeEventListener(el, t, handler);
                });
                return;
            }

            if (el.removeEventListener) {
                el.removeEventListener(type, handler, false);
            } else if (el.detachEvent) {
                el.detachEvent('on' + type, handler);
            } else {
                el['on' + type] = null;
            }
        }
    }, {
        key: 'isDomElement',
        value: function isDomElement(ele) {
            return ele instanceof Element;
        }
    }, {
        key: 'getDimension',
        value: function getDimension(element) {
            var rect;

            //On IE9 and below getBoundingClientRect does not work consistently
            if (!isOldIE() && element.getBoundingClientRect) {
                rect = element.getBoundingClientRect();
                return {
                    width: rect.width,
                    height: rect.height
                };
            }

            return {
                width: element.offsetWidth,
                height: element.offsetHeight
            };
        }
    }]);
    return Dom;
}();

/**
 * class VastError
 */
var VastError = function () {
    function VastError() {
        var code = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
        var msg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
        var data = arguments[2];
        classCallCheck(this, VastError);

        this.code = code;
        this.msg = msg;
        if (data) {
            this.data = data;
        }
    }

    createClass(VastError, [{
        key: 'extendsWithData',
        value: function extendsWithData(data) {
            var code = this.code;
            var msg = this.msg;

            return new Error(code, msg, data);
        }
    }]);
    return VastError;
}();

var generateError = function generateError(code, msg) {
    return new VastError(code, msg);
};

/**
 * Danh sách các lỗi
 * @type {Object}
 */
var error = {
    ERROR_DF_99: generateError(99, 'timeout while waiting for the video to start playing'),
    ERROR_100: generateError(100, 'VASTClient, error parsing xml'),
    ERROR_102: generateError(102, 'VASTClient, not supported VAST version'),
    ERROR_301: generateError(301, 'VASTClient, request ad tag url error'),
    ERROR_303: generateError(303, 'VASTClient, no Ad in VAST tree'),
    ERROR_402: generateError(402, 'timeout while waiting for the video to start playing'),

    VPAIDHTML5TECH_INVALID_MEDIA_FILE: generateError(700, 'Invalid MediaFile'),
    VPAIDHTML5TECH_INVALID_DOM_CONTAINER_EL: generateError(701, 'Invalid container HtmlElement'),
    VPAIDHTML5TECH_INVALID_DOM_VIDEO_EL: generateError(702, 'Invalid HTMLVideoElement'),
    VPAIDHTML5TECH_MISSING_CALLBACK: generateError(702, 'Missing valid callback'),

    VASTTRACKER_ASSET_URI: generateError(110, 'VASTTracker, missing required the URI of the ad asset being played'),
    VASTTRACKER_VAST_RESPONSE: generateError(111, 'VASTTracker, missing required VAST response'),

    VASTClIENT_MISS_AD_TAG_URL: generateError(120, 'VASTClient, missing ad tag URL'),
    VASTClIENT_RESQUEST_AD_TAG_URL_ERROR: generateError(121, 'VASTClient, request ad tag url error'),
    VASTClIENT_NO_AD_IN_VAST_TREE: generateError(303, 'VASTClient, no Ad in VAST tree'),
    VASTClIENT_NOT_SUPPORT_VAST_VERSION: generateError(102, 'VASTClient, not supported VAST version'),
    VASTClIENT_PARSING_XML_ERROR: generateError(100, 'VASTClient, error parsing xml'),
    VASTClIENT_WRAPPER_LIMIT_REACHED: generateError(302, 'VASTClient, players wrapper limit reached'),
    VASTClIENT_AD_TYPE_NOT_SUPPORT: generateError(200, 'VASTClient, received an Ad type that is not supported'),
    VASTClIENT_MISSING_DURATION: generateError(101, 'VASTClient, missing duration field in VAST response'),
    VASTClIENT_MISSING_OFFSET_TRACKING: generateError(101, 'VASTClient, missing or wrong offset attribute on progress tracking event'),

    VALID_AD_ERROR_1: generateError(101, 'VASTClient, InLine and Wrapper both found on the same Ad'),
    VALID_AD_ERROR_2: generateError(101, 'VASTClient, nor wrapper nor inline elements found on the Ad'),
    VALID_AD_ERROR_3: generateError(403, 'VASTClient, could not find MediaFile that is supported by this video player'),
    VALID_AD_ERROR_4: generateError(133, 'VASTClient, missing "VASTAdTagURI" in wrapper'),

    VAST_INTEGRATOR_SOURCE_ERROR: generateError(403, 'VASTIntegrator, Could not find Ad mediafile supported by this player'),

    VPAID_INTEGRATOR_NOT_SUPPORT_MEDIAFILE: generateError(150, 'VPAIDIntegrator, Could not find a supported mediaFile'),
    VPAID_INTEGRATOR_HANDSHAKE_NOT_SUPPORT_VERSION: generateError(151, 'VPAIDIntegrator handshake, unsupported version'),
    VPAID_INTEGRATOR_ERROR_WHILE_WAITING_FINISH: generateError(152, ' VPAIDIntegrator, error while waiting for the adUnit to finish playing'),
    VPAID_INTEGRATOR_ERROR_WHILE_INIT: generateError(153, ' VPAIDIntegrator, error while waiting init adUnit'),

    VPAID_AD_UNIT_WRAPPER_AD_UNIT_NOT_FULLY: generateError(160, 'VPAIDAdUnitWrapper, the passed VPAID adUnit does not fully implement the VPAID interface'),
    VPAID_AD_UNIT_WRAPPER_METHOD_TIMEOUT: generateError(161, ' VPAIDAdUnitWrapper, timeout while waiting for a response on call method'),
    VPAID_AD_UNIT_WRAPPER_INVALID_METHOD_NAME: generateError(162, ' VPAIDAdUnitWrapper, invalid method name'),
    VPAID_AD_UNIT_WRAPPER_MISSING_CALLBACK: generateError(163, ' VPAIDAdUnitWrapper, missing callback'),

    VPAID_AD_UNIT_WRAPPER_EVENT_TIMEOUT: generateError(601, ' VPAIDAdUnitWrapper, timeout while waiting for event'),
    VPAID_AD_UNIT_WRAPPER_MISSING_EVENT_NAME: generateError(165, ' VPAIDAdUnitWrapper, missing event name'),
    VPAID_AD_UNIT_WRAPPER_MISSING_EVENT_CALLBACK: generateError(166, ' VPAIDAdUnitWrapper, missing event callback')
};

'use strict';

/**
 * noop a empty function
 */
function noop$1() {}

/**
 * validate if is not validate will return an Error with the message
 *
 * @param {boolean} isValid
 * @param {string} message
 */
function validate(isValid, message) {
    return isValid ? null : new Error(message);
}

/**
 * callbackTimeout if the onSuccess is not called and returns true in the timelimit then onTimeout will be called
 *
 * @param {number} timer
 * @param {function} onSuccess
 * @param {function} onTimeout
 */
function callbackTimeout(timer, onSuccess, onTimeout) {
    var callback, timeout;

    timeout = setTimeout(function () {
        onSuccess = noop$1;
        onTimeout();
    }, timer);

    callback = function () {
        // TODO avoid leaking arguments
        // https://github.com/petkaantonov/bluebird/wiki/Optimization-killers#32-leaking-arguments
        if (onSuccess.apply(this, arguments)) {
            clearTimeout(timeout);
        }
    };

    return callback;
}


/**
 * createElementInEl
 *
 * @param {HTMLElement} parent
 * @param {string} tagName
 * @param {string} id
 */
function createElementInEl(parent, tagName, id) {
    var nEl = document.createElement(tagName);
    if (id) nEl.id = id;
    parent.appendChild(nEl);
    return nEl;
}

/**
 * createIframeWithContent
 *
 * @param {HTMLElement} parent
 * @param {string} template simple template using {{var}}
 * @param {object} data
 */
function createIframeWithContent(parent, template, data) {
    var iframe = createIframe(parent, null, data.zIndex);
    if (!setIframeContent(iframe, simpleTemplate(template, data))) return;
    return iframe;
}

/**
 * createIframe
 *
 * @param {HTMLElement} parent
 * @param {string} url
 */
function createIframe(parent, url, zIndex) {
    var nEl = document.createElement('iframe');
    nEl.src = url || 'about:blank';
    nEl.marginWidth = '0';
    nEl.marginHeight = '0';
    nEl.frameBorder = '0';
    nEl.width = '100%';
    nEl.height = '100%';
    setFullSizeStyle(nEl);

    if(zIndex){
        nEl.style.zIndex = zIndex;
    }

    nEl.setAttribute('SCROLLING','NO');
    parent.innerHTML = '';
    parent.appendChild(nEl);
    return nEl;
}

function setFullSizeStyle(element) {
    if(element) {
        element.style.position = 'absolute';
        element.style.left = '0';
        element.style.top = '0';
        element.style.margin = '0px';
        element.style.padding = '0px';
        element.style.border = 'none';
        element.style.width = '100%';
        element.style.height = '100%';
    }
}

/**
 * simpleTemplate
 *
 * @param {string} template
 * @param {object} data
 */
function simpleTemplate(template, data) {
    Object.keys(data).forEach(function (key) {
        var value = (typeof value === 'object') ? JSON.stringify(data[key]) : data[key];
        template = template.replace(new RegExp('{{' + key + '}}', 'g'), value);
    });
    return template;
}

/**
 * setIframeContent
 *
 * @param {HTMLIframeElement} iframeEl
 * @param content
 */
function setIframeContent(iframeEl, content) {
    var iframeDoc = iframeEl.contentWindow && iframeEl.contentWindow.document;
    if (!iframeDoc) return false;

    iframeDoc.write(content);

    return true;
}


/**
 * extend object with keys from another object
 *
 * @param {object} toExtend
 * @param {object} fromSource
 */
function extend$1(toExtend, fromSource) {
    Object.keys(fromSource).forEach(function(key) {
        toExtend[key] = fromSource[key];
    });
    return toExtend;
}


/**
 * unique will create a unique string everytime is called, sequentially and prefixed
 *
 * @param {string} prefix
 */
function unique$1(prefix) {
    var count = -1;
    return function () {
        return prefix + '_' + (++count);
    };
}

var utils = {
    noop: noop$1,
    validate: validate,
    callbackTimeout: callbackTimeout,
    createElementInEl: createElementInEl,
    createIframeWithContent: createIframeWithContent,
    createIframe: createIframe,
    setFullSizeStyle: setFullSizeStyle,
    simpleTemplate: simpleTemplate,
    setIframeContent: setIframeContent,
    extend: extend$1,
    unique: unique$1
};

'use strict';

var METHODS$1 = [
    'handshakeVersion',
    'initAd',
    'startAd',
    'stopAd',
    'skipAd', // VPAID 2.0 new method
    'resizeAd',
    'pauseAd',
    'resumeAd',
    'expandAd',
    'collapseAd',
    'subscribe',
    'unsubscribe'
];

var EVENTS = [
    'AdLoaded',
    'AdStarted',
    'AdStopped',
    'AdSkipped',
    'AdSkippableStateChange', // VPAID 2.0 new event
    'AdSizeChange', // VPAID 2.0 new event
    'AdLinearChange',
    'AdDurationChange', // VPAID 2.0 new event
    'AdExpandedChange',
    'AdRemainingTimeChange', // [Deprecated in 2.0] but will be still fired for backwards compatibility
    'AdVolumeChange',
    'AdImpression',
    'AdVideoStart',
    'AdVideoFirstQuartile',
    'AdVideoMidpoint',
    'AdVideoThirdQuartile',
    'AdVideoComplete',
    'AdClickThru',
    'AdInteraction', // VPAID 2.0 new event
    'AdUserAcceptInvitation',
    'AdUserMinimize',
    'AdUserClose',
    'AdPaused',
    'AdPlaying',
    'AdLog',
    'AdError'
];

var GETTERS = [
    'getAdLinear',
    'getAdWidth', // VPAID 2.0 new getter
    'getAdHeight', // VPAID 2.0 new getter
    'getAdExpanded',
    'getAdSkippableState', // VPAID 2.0 new getter
    'getAdRemainingTime',
    'getAdDuration', // VPAID 2.0 new getter
    'getAdVolume',
    'getAdCompanions', // VPAID 2.0 new getter
    'getAdIcons' // VPAID 2.0 new getter
];

var SETTERS = [
    'setAdVolume'
];


/**
 * This callback is displayed as global member. The callback use nodejs error-first callback style
 * @callback NodeStyleCallback
 * @param {string|null}
 * @param {undefined|object}
 */


/**
 * IVPAIDAdUnit
 *
 * @class
 *
 * @param {object} creative
 * @param {HTMLElement} el
 * @param {HTMLVideoElement} video
 */
function IVPAIDAdUnit(creative, el, video) {}


/**
 * handshakeVersion
 *
 * @param {string} VPAIDVersion
 * @param {nodeStyleCallback} callback
 */
IVPAIDAdUnit.prototype.handshakeVersion = function (VPAIDVersion, callback) {};

/**
 * initAd
 *
 * @param {number} width
 * @param {number} height
 * @param {string} viewMode can be 'normal', 'thumbnail' or 'fullscreen'
 * @param {number} desiredBitrate indicates the desired bitrate in kbps
 * @param {object} [creativeData] used for additional initialization data
 * @param {object} [environmentVars] used for passing implementation-specific of js version
 * @param {NodeStyleCallback} callback
 */
IVPAIDAdUnit.prototype.initAd = function(width, height, viewMode, desiredBitrate, creativeData, environmentVars, callback) {};

/**
 * startAd
 *
 * @param {nodeStyleCallback} callback
 */
IVPAIDAdUnit.prototype.startAd = function(callback) {};

/**
 * stopAd
 *
 * @param {nodeStyleCallback} callback
 */
IVPAIDAdUnit.prototype.stopAd = function(callback) {};

/**
 * skipAd
 *
 * @param {nodeStyleCallback} callback
 */
IVPAIDAdUnit.prototype.skipAd = function(callback) {};

/**
 * resizeAd
 *
 * @param {nodeStyleCallback} callback
 */
IVPAIDAdUnit.prototype.resizeAd = function(width, height, viewMode, callback) {};

/**
 * pauseAd
 *
 * @param {nodeStyleCallback} callback
 */
IVPAIDAdUnit.prototype.pauseAd = function(callback) {};

/**
 * resumeAd
 *
 * @param {nodeStyleCallback} callback
 */
IVPAIDAdUnit.prototype.resumeAd = function(callback) {};

/**
 * expandAd
 *
 * @param {nodeStyleCallback} callback
 */
IVPAIDAdUnit.prototype.expandAd = function(callback) {};

/**
 * collapseAd
 *
 * @param {nodeStyleCallback} callback
 */
IVPAIDAdUnit.prototype.collapseAd = function(callback) {};

/**
 * subscribe
 *
 * @param {string} event
 * @param {nodeStyleCallback} handler
 * @param {object} context
 */
IVPAIDAdUnit.prototype.subscribe = function(event, handler, context) {};

/**
 * startAd
 *
 * @param {string} event
 * @param {function} handler
 */
IVPAIDAdUnit.prototype.unsubscribe = function(event, handler) {};



/**
 * getAdLinear
 *
 * @param {nodeStyleCallback} callback
 */
IVPAIDAdUnit.prototype.getAdLinear = function(callback) {};

/**
 * getAdWidth
 *
 * @param {nodeStyleCallback} callback
 */
IVPAIDAdUnit.prototype.getAdWidth = function(callback) {};

/**
 * getAdHeight
 *
 * @param {nodeStyleCallback} callback
 */
IVPAIDAdUnit.prototype.getAdHeight = function(callback) {};

/**
 * getAdExpanded
 *
 * @param {nodeStyleCallback} callback
 */
IVPAIDAdUnit.prototype.getAdExpanded = function(callback) {};

/**
 * getAdSkippableState
 *
 * @param {nodeStyleCallback} callback
 */
IVPAIDAdUnit.prototype.getAdSkippableState = function(callback) {};

/**
 * getAdRemainingTime
 *
 * @param {nodeStyleCallback} callback
 */
IVPAIDAdUnit.prototype.getAdRemainingTime = function(callback) {};

/**
 * getAdDuration
 *
 * @param {nodeStyleCallback} callback
 */
IVPAIDAdUnit.prototype.getAdDuration = function(callback) {};

/**
 * getAdVolume
 *
 * @param {nodeStyleCallback} callback
 */
IVPAIDAdUnit.prototype.getAdVolume = function(callback) {};

/**
 * getAdCompanions
 *
 * @param {nodeStyleCallback} callback
 */
IVPAIDAdUnit.prototype.getAdCompanions = function(callback) {};

/**
 * getAdIcons
 *
 * @param {nodeStyleCallback} callback
 */
IVPAIDAdUnit.prototype.getAdIcons = function(callback) {};

/**
 * setAdVolume
 *
 * @param {number} volume
 * @param {nodeStyleCallback} callback
 */
IVPAIDAdUnit.prototype.setAdVolume = function(volume, callback) {};

addStaticToInterface(IVPAIDAdUnit, 'METHODS', METHODS$1);
addStaticToInterface(IVPAIDAdUnit, 'GETTERS', GETTERS);
addStaticToInterface(IVPAIDAdUnit, 'SETTERS', SETTERS);
addStaticToInterface(IVPAIDAdUnit, 'EVENTS',  EVENTS);


var VPAID1_METHODS = METHODS$1.filter(function(method) {
    return ['skipAd'].indexOf(method) === -1;
});

addStaticToInterface(IVPAIDAdUnit, 'checkVPAIDInterface', function checkVPAIDInterface (creative) {
    var result = VPAID1_METHODS.every(function(key) {
        return typeof creative[key] === 'function';
    });
    return result;
});

var IVPAIDAdUnit_1 = IVPAIDAdUnit;

function addStaticToInterface(Interface, name, value) {
    Object.defineProperty(Interface, name, {
        writable: false,
        configurable: false,
        value: value
    });
}

'use strict';

function Subscriber() {
    this._subscribers = {};
}

Subscriber.prototype.subscribe = function subscribe(handler, eventName, context) {
    if (!this.isHandlerAttached(handler, eventName)) {
        this.get(eventName).push({handler: handler, context: context, eventName: eventName});
    }
};

Subscriber.prototype.unsubscribe = function unsubscribe(handler, eventName) {
    this._subscribers[eventName] = this.get(eventName).filter(function (subscriber) {
        return handler !== subscriber.handler;
    });
};

Subscriber.prototype.unsubscribeAll = function unsubscribeAll() {
    this._subscribers = {};
};

Subscriber.prototype.trigger = function(eventName, data) {
    var that = this;
    var subscribers = this.get(eventName)
        .concat(this.get('*'));

    subscribers.forEach(function (subscriber) {
        setTimeout(function () {
            if (that.isHandlerAttached(subscriber.handler, subscriber.eventName)) {
                subscriber.handler.call(subscriber.context, data);
            }
        }, 0);
    });
};

Subscriber.prototype.triggerSync = function(eventName, data) {
    var subscribers = this.get(eventName)
        .concat(this.get('*'));

    subscribers.forEach(function (subscriber) {
        subscriber.handler.call(subscriber.context, data);
    });
};

Subscriber.prototype.get = function get(eventName) {
    if (!this._subscribers[eventName]) {
        this._subscribers[eventName] = [];
    }
    return this._subscribers[eventName];
};

Subscriber.prototype.isHandlerAttached = function isHandlerAttached(handler, eventName) {
    return this.get(eventName).some(function(subscriber) {
        return handler === subscriber.handler;
    })
};

var subscriber = Subscriber;

'use strict';



var checkVPAIDInterface = IVPAIDAdUnit_1.checkVPAIDInterface;

var ERROR$1 = 'AdError';
var AD_CLICK = 'AdClickThru';
var FILTERED_EVENTS = IVPAIDAdUnit_1.EVENTS.filter(function (event) {
    return event != AD_CLICK;
});

/**
 * This callback is displayed as global member. The callback use nodejs error-first callback style
 * @callback NodeStyleCallback
 * @param {string|null}
 * @param {undefined|object}
 */


/**
 * VPAIDAdUnit
 * @class
 *
 * @param VPAIDCreative
 * @param {HTMLElement} [el] this will be used in initAd environmentVars.slot if defined
 * @param {HTMLVideoElement} [video] this will be used in initAd environmentVars.videoSlot if defined
 */
function VPAIDAdUnit(VPAIDCreative, el, video, iframe) {
    this._isValid = checkVPAIDInterface(VPAIDCreative);
    if (this._isValid) {
        this._creative = VPAIDCreative;
        this._el = el;
        this._videoEl = video;
        this._iframe = iframe;
        this._subscribers = new subscriber();
        utils.setFullSizeStyle(el);
        $addEventsSubscribers.call(this);
    }
}

VPAIDAdUnit.prototype = Object.create(IVPAIDAdUnit_1.prototype);

/**
 * isValidVPAIDAd will return if the VPAIDCreative passed in constructor is valid or not
 *
 * @return {boolean}
 */
VPAIDAdUnit.prototype.isValidVPAIDAd = function isValidVPAIDAd() {
    return this._isValid;
};

IVPAIDAdUnit_1.METHODS.forEach(function(method) {
    //NOTE: this methods arguments order are implemented differently from the spec
    var ignores = [
        'subscribe',
        'unsubscribe',
        'initAd'
    ];

    if (ignores.indexOf(method) !== -1) return;

    VPAIDAdUnit.prototype[method] = function () {
        var ariaty = IVPAIDAdUnit_1.prototype[method].length;
        // TODO avoid leaking arguments
        // https://github.com/petkaantonov/bluebird/wiki/Optimization-killers#32-leaking-arguments
        var args = Array.prototype.slice.call(arguments);
        var callback = (ariaty === args.length) ? args.pop() : undefined;

        setTimeout(function () {
            var result, error = null;
            try {
                result = this._creative[method].apply(this._creative, args);
            } catch(e) {
                error = e;
            }

            callOrTriggerEvent(callback, this._subscribers, error, result);
        }.bind(this), 0);
    };
});


/**
 * initAd concreate implementation
 *
 * @param {number} width
 * @param {number} height
 * @param {string} viewMode can be 'normal', 'thumbnail' or 'fullscreen'
 * @param {number} desiredBitrate indicates the desired bitrate in kbps
 * @param {object} [creativeData] used for additional initialization data
 * @param {object} [environmentVars] used for passing implementation-specific of js version, if el & video was used in constructor slot & videoSlot will be added to the object
 * @param {NodeStyleCallback} callback
 */
VPAIDAdUnit.prototype.initAd = function initAd(width, height, viewMode, desiredBitrate, creativeData, environmentVars, callback) {
    creativeData = creativeData || {};
    environmentVars = utils.extend({
        slot: this._el,
        videoSlot: this._videoEl
    }, environmentVars || {});

    setTimeout(function () {
        var error;
        try {
            this._creative.initAd(width, height, viewMode, desiredBitrate, creativeData, environmentVars);
        } catch (e) {
            error = e;
        }

        callOrTriggerEvent(callback, this._subscribers, error);
    }.bind(this), 0);
};

/**
 * subscribe
 *
 * @param {string} event
 * @param {nodeStyleCallback} handler
 * @param {object} context
 */
VPAIDAdUnit.prototype.subscribe = function subscribe(event, handler, context) {
    this._subscribers.subscribe(handler, event, context);
};


/**
 * unsubscribe
 *
 * @param {string} event
 * @param {nodeStyleCallback} handler
 */
VPAIDAdUnit.prototype.unsubscribe = function unsubscribe(event, handler) {
    this._subscribers.unsubscribe(handler, event);
};

//alias
VPAIDAdUnit.prototype.on = VPAIDAdUnit.prototype.subscribe;
VPAIDAdUnit.prototype.off = VPAIDAdUnit.prototype.unsubscribe;

IVPAIDAdUnit_1.GETTERS.forEach(function(getter) {
    VPAIDAdUnit.prototype[getter] = function (callback) {
        setTimeout(function () {

            var result, error = null;
            try {
                result = this._creative[getter]();
            } catch(e) {
                error = e;
            }

            callOrTriggerEvent(callback, this._subscribers, error, result);
        }.bind(this), 0);
    };
});

/**
 * setAdVolume
 *
 * @param volume
 * @param {nodeStyleCallback} callback
 */
VPAIDAdUnit.prototype.setAdVolume = function setAdVolume(volume, callback) {
    setTimeout(function () {

        var result, error = null;
        try {
            this._creative.setAdVolume(volume);
            result = this._creative.getAdVolume();
        } catch(e) {
            error = e;
        }

        if (!error) {
            error = utils.validate(result === volume, 'failed to apply volume: ' + volume);
        }
        callOrTriggerEvent(callback, this._subscribers, error, result);
    }.bind(this), 0);
};

VPAIDAdUnit.prototype._destroy = function destroy() {
    this.stopAd();
    this._subscribers.unsubscribeAll();
};

function $addEventsSubscribers() {
    // some ads implement
    // so they only handle one subscriber
    // to handle this we create our one
    FILTERED_EVENTS.forEach(function (event) {
        this._creative.subscribe($trigger.bind(this, event), event);
    }.bind(this));

    // map the click event to be an object instead of depending of the order of the arguments
    // and to be consistent with the flash
    this._creative.subscribe($clickThruHook.bind(this), AD_CLICK);

    // because we are adding the element inside the iframe
    // the user is not able to click in the video
    if (this._videoEl) {
        var documentElement = this._iframe.contentDocument.documentElement;
        var videoEl = this._videoEl;
        documentElement.addEventListener('click', function(e) {
            if (e.target === documentElement) {
                videoEl.click();
            }
        });
    }
}

function $clickThruHook(url, id, playerHandles) {
    this._subscribers.triggerSync(AD_CLICK, {url: url, id: id, playerHandles: playerHandles});
}

function $trigger(event) {
    // TODO avoid leaking arguments
    // https://github.com/petkaantonov/bluebird/wiki/Optimization-killers#32-leaking-arguments
    this._subscribers.trigger(event, Array.prototype.slice(arguments, 1));
}

function callOrTriggerEvent(callback, subscribers, error, result) {
    if (callback) {
        callback(error, result);
    } else if (error) {
        subscribers.trigger(ERROR$1, error);
    }
}

var VPAIDAdUnit_1 = VPAIDAdUnit;

'use strict';


var unique = utils.unique('vpaidIframe');


var defaultTemplate = '<!DOCTYPE html>' +
    '<html lang="en">' +
    '<head><meta charset="UTF-8"></head>' +
    '<body style="margin:0;padding:0"><div class="ad-element"></div>' +
    '<script type="text/javascript" src="{{iframeURL_JS}}"></script>' +
    '<script type="text/javascript">' +
    'window.parent.postMessage(\'{"event": "ready", "id": "{{iframeID}}"}\', \'{{origin}}\');' +
    '</script>' +
    '</body>' +
    '</html>';

var AD_STOPPED = 'AdStopped';

/**
 * This callback is displayed as global member. The callback use nodejs error-first callback style
 * @callback NodeStyleCallback
 * @param {string|null}
 * @param {undefined|object}
 */

/**
 * VPAIDHTML5Client
 * @class
 *
 * @param {HTMLElement} el that will contain the iframe to load adUnit and a el to add to adUnit slot
 * @param {HTMLVideoElement} video default video element to be used by adUnit
 * @param {object} [templateConfig] template: html template to be used instead of the default, extraOptions: to be used when rendering the template
 * @param {object} [vpaidOptions] timeout: when loading adUnit
 */
function VPAIDHTML5Client(el, video, templateConfig, vpaidOptions) {
    templateConfig = templateConfig || {};

    this._id = unique();
    this._destroyed = false;

    this._frameContainer = utils.createElementInEl(el, 'div');
    this._videoEl = video;
    this._vpaidOptions = vpaidOptions || {timeout: 10000};

    this._templateConfig = {
        template: templateConfig.template || defaultTemplate,
        extraOptions: templateConfig.extraOptions || {}
    };
}

/**
 * destroy
 *
 */
VPAIDHTML5Client.prototype.destroy = function destroy() {
    if (this._destroyed) {
        return;
    }
    this._destroyed = true;
    $unloadPreviousAdUnit.call(this);
};

/**
 * isDestroyed
 *
 * @return {boolean}
 */
VPAIDHTML5Client.prototype.isDestroyed = function isDestroyed() {
    return this._destroyed;
};

/**
 * loadAdUnit
 *
 * @param {string} adURL url of the js of the adUnit
 * @param {nodeStyleCallback} callback
 */
VPAIDHTML5Client.prototype.loadAdUnit = function loadAdUnit(adURL, callback) {
    if(this._onLoad){ return }

    $throwIfDestroyed.call(this);
    $unloadPreviousAdUnit.call(this);
    var that = this;

    var frame = utils.createIframeWithContent(
        this._frameContainer,
        this._templateConfig.template,
        utils.extend({
            iframeURL_JS: adURL,
            iframeID: this.getID(),
            origin: getOrigin()
        }, this._templateConfig.extraOptions)
    );

    this._frame = frame;

    this._onLoad = utils.callbackTimeout(
        this._vpaidOptions.timeout,
        onLoad.bind(this),
        onTimeout.bind(this)
    );

    window.addEventListener('message', this._onLoad);
    function onLoad (e) {
        /*jshint validthis: false */
        //don't clear timeout
        var result;
        if (typeof e.data !== "string") {
            return;
        }else{
            try{
                result = JSON.parse(e.data);
            }
            catch(err){
                // do stuff
                return;
            }
        }

        if (e.origin !== getOrigin()) return;

        //don't clear timeout
        if (result.id !== that.getID()) return;

        var adUnit, error, createAd;
        if (!that._frame.contentWindow) {

            error = 'the iframe is not anymore in the DOM tree';

        } else {
            createAd = that._frame.contentWindow.getVPAIDAd;
            error = utils.validate(typeof createAd === 'function', 'the ad didn\'t return a function to create an ad');
        }

        if (!error) {
            var adEl = that._frame.contentWindow.document.querySelector('.ad-element');
            adUnit = new VPAIDAdUnit_1(createAd(), adEl, that._videoEl, that._frame);
            adUnit.subscribe(AD_STOPPED, $adDestroyed.bind(that));
            error = utils.validate(adUnit.isValidVPAIDAd(), 'the add is not fully complaint with VPAID specification');
        }

        that._adUnit = adUnit;
        $destroyLoadListener.call(that);
        callback(error, error ? null : adUnit);

        //clear timeout
        return true;
    }

    function onTimeout() {
        callback('timeout', null);
    }
};

/**
 * unloadAdUnit
 *
 */
VPAIDHTML5Client.prototype.unloadAdUnit = function unloadAdUnit() {
    $unloadPreviousAdUnit.call(this);
};

/**
 * getID will return the unique id
 *
 * @return {string}
 */
VPAIDHTML5Client.prototype.getID = function () {
    return this._id;
};


/**
 * $removeEl
 *
 * @param {string} key
 */
function $removeEl(key) {
    var el = this[key];
    if (el && el.parentNode) {
        el.parentNode.removeChild(el);
        delete this[key];
    }
}

function $adDestroyed() {
    $removeAdElements.call(this);
    delete this._adUnit;
}

function $unloadPreviousAdUnit() {
    $removeAdElements.call(this);
    $destroyAdUnit.call(this);
}

function $removeAdElements() {
    $removeEl.call(this, '_frame');
    $destroyLoadListener.call(this);
}

/**
 * $destroyLoadListener
 *
 */
function $destroyLoadListener() {
    if (this._onLoad) {
        window.removeEventListener('message', this._onLoad);
        delete this._onLoad;
    }
}


function $destroyAdUnit() {
    if (this._adUnit) {
        this._adUnit.stopAd();
        delete this._adUnit;
    }
}

/**
 * $throwIfDestroyed
 *
 */
function $throwIfDestroyed() {
    if (this._destroyed) {
        throw new Error ('VPAIDHTML5Client already destroyed!');
    }
}

function getOrigin() {
    if (window.location.origin === 'null'){
        return window.location.ancestorOrigins[0];
    }

    if( window.location.origin ) {
        return window.location.origin;
    }
    else {
        return window.location.protocol + "//" +
            window.location.hostname +
            (window.location.port ? ':' + window.location.port: '');
    }
}

var VPAIDHTML5Client_1 = VPAIDHTML5Client;
window.VPAIDHTML5Client = VPAIDHTML5Client;

var _class$5;
var _temp$5;

var VPAIDHTML5Tech = (_temp$5 = _class$5 = function () {
    function VPAIDHTML5Tech(mediaFile) {
        classCallCheck(this, VPAIDHTML5Tech);

        if (!mediaFile || !isString(mediaFile.src)) {
            throw error.VPAIDHTML5TECH_INVALID_MEDIA_FILE;
        }

        this.name = 'vpaid-html5';
        this.containerEl = null;
        this.videoEl = null;
        this.vpaidHTMLClient = null;

        this.mediaFile = mediaFile;
    }

    createClass(VPAIDHTML5Tech, [{
        key: 'loadAdUnit',
        value: function loadAdUnit(containerEl, videoEl, callback) {
            if (!Dom.isDomElement(containerEl)) {
                throw error.VPAIDHTML5TECH_INVALID_DOM_CONTAINER_EL;
            }

            if (!Dom.isDomElement(videoEl) || videoEl.tagName.toLowerCase() !== 'video') {
                throw error.VPAIDHTML5TECH_INVALID_DOM_CONTAINER_EL;
            }

            if (!isFunction(callback)) {
                throw error.VPAIDHTML5TECH_MISSING_CALLBACK;
            }

            this.containerEl = containerEl;
            this.videoEl = videoEl;
            this.vpaidHTMLClient = new VPAIDHTML5Client_1(containerEl, videoEl, {});
            this.vpaidHTMLClient.loadAdUnit(this.mediaFile.src, callback);
        }
    }, {
        key: 'unloadAdUnit',
        value: function unloadAdUnit() {
            if (this.vpaidHTMLClient) {
                try {
                    this.vpaidHTMLClient.destroy();
                } catch (e) {
                    playercore.log.error('VAST ERROR: trying to unload the VPAID adunit');
                }

                this.vpaidHTMLClient = null;
            }

            if (this.containerEl) {
                Dom.remove(this.containerEl);
                this.containerEl = null;
            }
        }
    }], [{
        key: 'supports',
        value: function supports(type) {
            return !isOldIE() && this.types.indexOf(type) > -1;
        }
    }]);
    return VPAIDHTML5Tech;
}(), _class$5.types = ['text/javascript', 'text/javascript1.0', 'text/javascript1.2', 'text/javascript1.4', 'text/jscript', 'application/javascript', 'application/x-javascript', 'text/ecmascript', 'text/ecmascript1.0', 'text/ecmascript1.2', 'text/ecmascript1.4', 'text/livescript', 'application/ecmascript', 'application/x-ecmascript'], _temp$5);

var _class$4;
var _temp$4;

var VastUtil = (_temp$4 = _class$4 = function () {
    function VastUtil() {
        classCallCheck(this, VastUtil);
    }

    createClass(VastUtil, null, [{
        key: 'track',
        value: function track(URLMacros, variables) {
            var sources = this.parseURLMacros(URLMacros, variables);
            var trackImgs = [];
            sources.forEach(function (src) {
                var img = new Image();
                img.src = src;
                trackImgs.push(img);
            });
            return trackImgs;
        }
    }, {
        key: 'parseURLMacros',
        value: function parseURLMacros(URLMacros, variables) {
            var self = this;
            var parsedURLs = [];

            variables = variables || {};

            if (!variables['CACHEBUSTING']) {
                variables['CACHEBUSTING'] = Math.round(Math.random() * 1.0e+10);
            }

            URLMacros.forEach(function (URLMacro) {
                URLMacro && parsedURLs.push(self._parseURLMacro(URLMacro, variables));
            });

            return parsedURLs;
        }
    }, {
        key: 'parseURLMacro',
        value: function parseURLMacro(URLMacro, variables) {
            variables = variables || {};

            if (!variables['CACHEBUSTING']) {
                variables['CACHEBUSTING'] = Math.round(Math.random() * 1.0e+10);
            }

            return this._parseURLMacro(URLMacro, variables);
        }
    }, {
        key: 'parseDuration',
        value: function parseDuration(durationStr) {
            var durationRegex = /(\d\d):(\d\d):(\d\d)(\.(\d\d\d))?/;
            var match, durationInMs;

            if (isString(durationStr)) {
                match = durationStr.match(durationRegex);
                if (match) {
                    durationInMs = parseHoursToMs(match[1]) + parseMinToMs(match[2]) + parseSecToMs(match[3]) + parseInt(match[5] || 0);
                }
            }

            return isNaN(durationInMs) ? null : durationInMs;

            /*** local functions ***/
            function parseHoursToMs(hourStr) {
                return parseInt(hourStr, 10) * 60 * 60 * 1000;
            }

            function parseMinToMs(minStr) {
                return parseInt(minStr, 10) * 60 * 1000;
            }

            function parseSecToMs(secStr) {
                return parseInt(secStr, 10) * 1000;
            }
        }
    }, {
        key: 'parseImpressions',
        value: function parseImpressions(impressions) {
            if (impressions) {
                impressions = isArray(impressions) ? impressions : [impressions];
                return transformArray(impressions, function (impression) {
                    if (isNotEmptyString(impression.keyValue)) {
                        return impression.keyValue;
                    }
                    return undefined;
                });
            }
            return [];
        }

        //We assume that the progress is going to arrive in milliseconds

    }, {
        key: 'formatProgress',
        value: function formatProgress(progress) {
            var hours, minutes, seconds, milliseconds;
            hours = progress / (60 * 60 * 1000);
            hours = Math.floor(hours);
            minutes = progress / (60 * 1000) % 60;
            minutes = Math.floor(minutes);
            seconds = progress / 1000 % 60;
            seconds = Math.floor(seconds);
            milliseconds = progress % 1000;
            return toFixedDigits(hours, 2) + ':' + toFixedDigits(minutes, 2) + ':' + toFixedDigits(seconds, 2) + '.' + toFixedDigits(milliseconds, 3);
        }
    }, {
        key: 'parseOffset',
        value: function parseOffset(offset, duration) {
            if (isPercentage(offset)) {
                return calculatePercentage(offset, duration);
            }
            return this.parseDuration(offset);

            /*** Local function ***/
            function isPercentage(offset) {
                var percentageRegex = /^\d+(\.\d+)?%$/g;
                return percentageRegex.test(offset);
            }

            function calculatePercentage(percentStr, duration) {
                if (duration) {
                    return calcPercent(duration, parseFloat(percentStr.replace('%', '')));
                }
                return null;
            }

            function calcPercent(quantity, percent) {
                return quantity * percent / 100;
            }
        }
    }, {
        key: 'isVPAID',
        value: function isVPAID(mediaFile) {
            return !!mediaFile && mediaFile.apiFramework === 'VPAID';
        }
    }, {
        key: 'findSupportedVPAIDTech',
        value: function findSupportedVPAIDTech(mimeType) {
            var i, len, VPAIDTech;

            for (i = 0, len = this.VPAID_techs.length; i < len; i += 1) {
                VPAIDTech = this.VPAID_techs[i];
                if (VPAIDTech.supports(mimeType)) {
                    return VPAIDTech;
                }
            }
            return null;
        }
    }, {
        key: 'isFlashSupported',
        value: function isFlashSupported() {
            return false;
        }
    }, {
        key: '_parseURLMacro',
        value: function _parseURLMacro(URLMacro, variables) {
            variables = variables || {};

            forEach(variables, function (value, key) {
                URLMacro = URLMacro.replace(new RegExp('\\[' + key + '\\]', 'gm'), value);
            });

            return URLMacro;
        }
    }]);
    return VastUtil;
}(), _class$4.VPAID_techs = [VPAIDHTML5Tech], _temp$4);

var JXONTree = function () {
    function JXONTree(oXMLParent) {
        classCallCheck(this, JXONTree);

        var parseText = xml.parseText;

        //The document object is an especial object that it may miss some functions or attrs depending on the browser.
        //To prevent this problem with create the JXONTree using the root childNode which is a fully fleshed node on all supported
        //browsers.
        if (oXMLParent.documentElement) {
            return new JXONTree(oXMLParent.documentElement);
        }

        if (oXMLParent.hasChildNodes()) {
            var sCollectedTxt = '';
            for (var oNode, sProp, vContent, nItem = 0; nItem < oXMLParent.childNodes.length; nItem++) {
                oNode = oXMLParent.childNodes.item(nItem);
                /*jshint bitwise: false*/
                if ((oNode.nodeType - 1 | 1) === 3) {
                    sCollectedTxt += oNode.nodeType === 3 ? oNode.nodeValue.trim() : oNode.nodeValue;
                } else if (oNode.nodeType === 1 && !oNode.prefix) {
                    sProp = decapitalize(oNode.nodeName);
                    vContent = new JXONTree(oNode);
                    if (this.hasOwnProperty(sProp)) {
                        if (this[sProp].constructor !== Array) {
                            this[sProp] = [this[sProp]];
                        }
                        this[sProp].push(vContent);
                    } else {
                        this[sProp] = vContent;
                    }
                }
            }
            if (sCollectedTxt) {
                this.keyValue = parseText(sCollectedTxt);
            }
        }

        //IE8 Stupid fix
        var hasAttr = typeof oXMLParent.hasAttributes === 'undefined' ? oXMLParent.attributes.length > 0 : oXMLParent.hasAttributes();
        if (hasAttr) {
            var oAttrib;
            for (var nAttrib = 0; nAttrib < oXMLParent.attributes.length; nAttrib++) {
                oAttrib = oXMLParent.attributes.item(nAttrib);
                this['@' + decapitalize(oAttrib.name)] = parseText(oAttrib.value.trim());
            }
        }
    }

    createClass(JXONTree, [{
        key: 'attr',
        value: function attr(_attr) {
            return this['@' + decapitalize(_attr)];
        }
    }]);
    return JXONTree;
}();

var xml = function () {
    function xml() {
        classCallCheck(this, xml);
    }

    createClass(xml, null, [{
        key: 'strToXMLDoc',
        value: function strToXMLDoc(stringContainingXMLSource) {
            //IE 8
            if (typeof window.DOMParser === 'undefined') {
                var xmlDocument = new ActiveXObject('Microsoft.XMLDOM');
                xmlDocument.async = false;
                xmlDocument.loadXML(stringContainingXMLSource);
                return xmlDocument;
            }

            return parseString(stringContainingXMLSource);

            function parseString(stringContainingXMLSource) {
                var parser = new DOMParser();
                var parsedDocument;

                //Note: This try catch is to deal with the fact that on IE parser.parseFromString does throw an error but the rest of the browsers don't.
                try {
                    parsedDocument = parser.parseFromString(stringContainingXMLSource, 'application/xml');

                    if (isParseError(parsedDocument) || isEmptyString(stringContainingXMLSource)) {
                        throw new Error();
                    }
                } catch (e) {
                    throw new Error('xml.strToXMLDOC: Error parsing the string: ' + stringContainingXMLSource);
                }

                return parsedDocument;
            }

            function isParseError(parsedDocument) {
                try {
                    // parser and parsererrorNS could be cached on startup for efficiency
                    var parser = new DOMParser(),
                        erroneousParse = parser.parseFromString('INVALID', 'text/xml'),
                        parsererrorNS = erroneousParse.getElementsByTagName('parsererror')[0].namespaceURI;

                    if (parsererrorNS === 'http://www.w3.org/1999/xhtml') {
                        // In PhantomJS the parseerror element doesn't seem to have a special namespace, so we are just guessing here :(
                        return parsedDocument.getElementsByTagName('parsererror').length > 0;
                    }

                    return parsedDocument.getElementsByTagNameNS(parsererrorNS, 'parsererror').length > 0;
                } catch (e) {
                    //Note on IE parseString throws an error by itself and it will never reach this code. Because it will have failed before
                }
            }
        }
    }, {
        key: 'parseText',
        value: function parseText(sValue) {
            if (/^\s*$/.test(sValue)) {
                return null;
            }
            if (/^(?:true|false)$/i.test(sValue)) {
                return sValue.toLowerCase() === 'true';
            }
            if (isFinite(sValue)) {
                return parseFloat(sValue);
            }
            if (isISO8601(sValue)) {
                return new Date(sValue);
            }
            return sValue.trim();
        }
    }, {
        key: 'toJXONTree',
        value: function toJXONTree(xmlString) {
            var xmlDoc = xml.strToXMLDoc(xmlString);
            return new JXONTree(xmlDoc);
        }
    }, {
        key: 'keyValue',
        value: function keyValue(xmlObj) {
            if (xmlObj) {
                return xmlObj.keyValue;
            }
            return undefined;
        }
    }, {
        key: 'attr',
        value: function attr(xmlObj, _attr2) {
            if (xmlObj) {
                return xmlObj['@' + decapitalize(_attr2)];
            }
            return undefined;
        }
    }, {
        key: 'encode',
        value: function encode(str) {
            if (!isString(str)) return undefined;

            return str.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;').replace(/'/g, '&apos;');
        }
    }, {
        key: 'decode',
        value: function decode(str) {
            if (!isString(str)) return undefined;

            return str.replace(/&apos;/g, '\'').replace(/&quot;/g, '"').replace(/&gt;/g, '>').replace(/&lt;/g, '<').replace(/&amp;/g, '&');
        }
    }]);
    return xml;
}();

var TrackingEvent = function TrackingEvent(trackingJTree, duration) {
    classCallCheck(this, TrackingEvent);

    this.name = trackingJTree.attr('event');
    this.uri = xml.keyValue(trackingJTree);

    if ('progress' === this.name) {
        this.offset = VastUtil.parseOffset(trackingJTree.attr('offset'), duration);
    }
};

var attributesList = [
//Required attributes
'delivery', 'type', 'width', 'height',
//Optional attributes
'codec', 'id', 'bitrate', 'minBitrate', 'maxBitrate', 'scalable', 'maintainAspectRatio', 'apiFramework'];

var MediaFile = function () {
    function MediaFile(mediaFileJTree) {
        classCallCheck(this, MediaFile);

        //Required attributes
        this.src = xml.keyValue(mediaFileJTree);

        for (var x = 0; x < attributesList.length; x++) {
            var attribute = attributesList[x];
            this[attribute] = mediaFileJTree.attr(attribute);
        }

        if (this['type'] === 'video/x-mp4') {
            this['type'] = 'video/mp4';
        }
    }

    createClass(MediaFile, [{
        key: 'isSupported',
        value: function isSupported() {
            if (VastUtil.isVPAID(this)) {
                return !!VastUtil.findSupportedVPAIDTech(this.type);
            }

            if (this.type === 'video/x-flv') {
                return VastUtil.isFlashSupported();
            }

            return true;
        }
    }]);
    return MediaFile;
}();

var VideoClicks = function () {
    function VideoClicks(videoClickJTree) {
        classCallCheck(this, VideoClicks);

        this.clickThrough = xml.keyValue(videoClickJTree.clickThrough);
        this.clickTrackings = this._parseClickTrackings(videoClickJTree.clickTracking);
        this.customClicks = this._parseClickTrackings(videoClickJTree.customClick);
    }

    createClass(VideoClicks, [{
        key: '_parseClickTrackings',
        value: function _parseClickTrackings(trackingData) {
            var clickTrackings = [];
            if (trackingData) {
                trackingData = isArray(trackingData) ? trackingData : [trackingData];
                trackingData.forEach(function (clickTrackingData) {
                    clickTrackings.push(xml.keyValue(clickTrackingData));
                });
            }
            return clickTrackings;
        }
    }]);
    return VideoClicks;
}();

var Linear = function () {
    function Linear(linearJTree) {
        classCallCheck(this, Linear);

        this.duration = VastUtil.parseDuration(xml.keyValue(linearJTree.duration));
        this.mediaFiles = this._parseMediaFiles(linearJTree.mediaFiles && linearJTree.mediaFiles.mediaFile);

        //Optional fields
        this.trackingEvents = this._parseTrackingEvents(linearJTree.trackingEvents && linearJTree.trackingEvents.tracking, this.duration);
        this.skipoffset = VastUtil.parseOffset(xml.attr(linearJTree, 'skipoffset'), this.duration);

        if (linearJTree.videoClicks) {
            this.videoClicks = new VideoClicks(linearJTree.videoClicks);
        }

        if (linearJTree.adParameters) {
            this.adParameters = xml.keyValue(linearJTree.adParameters);

            if (xml.attr(linearJTree.adParameters, 'xmlEncoded')) {
                this.adParameters = xml.decode(this.adParameters);
            }
        }
    }

    createClass(Linear, [{
        key: '_parseMediaFiles',
        value: function _parseMediaFiles(mediaFilesJxonTree) {
            var mediaFiles = [];
            if (isDefined(mediaFilesJxonTree)) {
                mediaFilesJxonTree = isArray(mediaFilesJxonTree) ? mediaFilesJxonTree : [mediaFilesJxonTree];

                mediaFilesJxonTree.forEach(function (mfData) {
                    mediaFiles.push(new MediaFile(mfData));
                });
            }
            return mediaFiles;
        }
    }, {
        key: '_parseTrackingEvents',
        value: function _parseTrackingEvents(trackingEvents, duration) {
            var trackings = [];
            if (isDefined(trackingEvents)) {
                trackingEvents = isArray(trackingEvents) ? trackingEvents : [trackingEvents];
                trackingEvents.forEach(function (trackingData) {
                    trackings.push(new TrackingEvent(trackingData, duration));
                });
            }
            return trackings;
        }
    }, {
        key: 'isSupported',
        value: function isSupported() {
            var i, len;
            for (i = 0, len = this.mediaFiles.length; i < len; i += 1) {
                if (this.mediaFiles[i].isSupported()) {
                    return true;
                }
            }

            return false;
        }
    }]);
    return Linear;
}();

var Companion = function () {
    function Companion(companionJTree) {
        classCallCheck(this, Companion);

        playercore.log.info('<Companion> found companion ad');
        playercore.log.debug('<Companion>  companionJTree:', companionJTree);

        //Required Elements
        this.creativeType = xml.attr(companionJTree.staticResource, 'creativeType');
        this.staticResource = xml.keyValue(companionJTree.staticResource);

        playercore.log.info('<Companion>  creativeType: ' + this.creativeType);
        playercore.log.info('<Companion>  staticResource: ' + this.staticResource);

        // Weird bug when the JXON tree is built it doesn't handle casing properly in this situation...
        var htmlResource = null;
        if (xml.keyValue(companionJTree.HTMLResource)) {
            htmlResource = xml.keyValue(companionJTree.HTMLResource);
        } else if (xml.keyValue(companionJTree.hTMLResource)) {
            htmlResource = xml.keyValue(companionJTree.hTMLResource);
        }

        if (htmlResource !== null) {
            playercore.log.info('<Companion> found html resource', htmlResource);
        }

        this.htmlResource = htmlResource;

        var iframeResource = null;
        if (xml.keyValue(companionJTree.IFrameResource)) {
            iframeResource = xml.keyValue(companionJTree.IFrameResource);
        } else if (xml.keyValue(companionJTree.iFrameresource)) {
            iframeResource = xml.keyValue(companionJTree.iFrameresource);
        }

        if (iframeResource !== null) {
            playercore.log.info('<Companion> found iframe resource', iframeResource);
        }

        this.iframeResource = iframeResource;

        //Optional fields
        this.id = xml.attr(companionJTree, 'id');
        this.width = xml.attr(companionJTree, 'width');
        this.height = xml.attr(companionJTree, 'height');
        this.expandedWidth = xml.attr(companionJTree, 'expandedWidth');
        this.expandedHeight = xml.attr(companionJTree, 'expandedHeight');
        this.scalable = xml.attr(companionJTree, 'scalable');
        this.maintainAspectRatio = xml.attr(companionJTree, 'maintainAspectRatio');
        this.minSuggestedDuration = xml.attr(companionJTree, 'minSuggestedDuration');
        this.apiFramework = xml.attr(companionJTree, 'apiFramework');
        this.companionClickThrough = xml.keyValue(companionJTree.companionClickThrough);
        this.trackingEvents = this._parseTrackingEvents(companionJTree.trackingEvents && companionJTree.trackingEvents.tracking);

        playercore.log.info('<Companion>  companionClickThrough: ' + this.companionClickThrough);
    }

    createClass(Companion, [{
        key: '_parseTrackingEvents',
        value: function _parseTrackingEvents(trackingEvents) {
            var trackings = [];
            if (isDefined(trackingEvents)) {
                trackingEvents = isArray(trackingEvents) ? trackingEvents : [trackingEvents];
                trackingEvents.forEach(function (trackingData) {
                    trackings.push(new TrackingEvent(trackingData));
                });
            }
            return trackings;
        }
    }]);
    return Companion;
}();

var Creative = function () {
    function Creative(creativeJTree) {
        classCallCheck(this, Creative);

        this.id = creativeJTree.attr('id');
        this.sequence = creativeJTree.attr('sequence');
        this.adId = creativeJTree.attr('adId');
        this.apiFramework = creativeJTree.attr('apiFramework');

        if (creativeJTree.linear) {
            this.linear = new Linear(creativeJTree.linear);
        }

        if (creativeJTree.companionAds) {
            var companions = [];
            var companionAds = creativeJTree.companionAds && creativeJTree.companionAds.companion;
            if (isDefined(companionAds)) {
                companionAds = isArray(companionAds) ? companionAds : [companionAds];
                companionAds.forEach(function (companionData) {
                    companions.push(new Companion(companionData));
                });
            }
            this.companionAds = companions;
        }
    }

    createClass(Creative, [{
        key: 'isSupported',
        value: function isSupported() {
            if (this.linear) {
                return this.linear.isSupported();
            }

            return true;
        }
    }], [{
        key: 'parseCreatives',
        value: function parseCreatives(creativesJTree) {
            var creatives = [];
            var creativesData;
            if (isDefined(creativesJTree) && isDefined(creativesJTree.creative)) {
                creativesData = isArray(creativesJTree.creative) ? creativesJTree.creative : [creativesJTree.creative];
                creativesData.forEach(function (creative) {
                    creatives.push(new Creative(creative));
                });
            }
            return creatives;
        }
    }]);
    return Creative;
}();

var InLine = function () {
    function InLine(inlineJTree) {
        classCallCheck(this, InLine);

        //Required Fields
        this.adTitle = xml.keyValue(inlineJTree.adTitle);
        this.adSystem = xml.keyValue(inlineJTree.adSystem);
        this.impressions = VastUtil.parseImpressions(inlineJTree.impression);
        this.creatives = Creative.parseCreatives(inlineJTree.creatives);

        //Optional Fields
        this.description = xml.keyValue(inlineJTree.description);
        this.advertiser = xml.keyValue(inlineJTree.advertiser);
        this.surveys = this._parseSurveys(inlineJTree.survey);
        this.error = xml.keyValue(inlineJTree.error);
        this.pricing = xml.keyValue(inlineJTree.pricing);
        this.extensions = inlineJTree.extensions;
    }

    createClass(InLine, [{
        key: '_parseSurveys',
        value: function _parseSurveys(inlineSurveys) {
            if (inlineSurveys) {
                return transformArray(isArray(inlineSurveys) ? inlineSurveys : [inlineSurveys], function (survey) {
                    if (isNotEmptyString(survey.keyValue)) {
                        return {
                            uri: survey.keyValue,
                            type: survey.attr('type')
                        };
                    }

                    return undefined;
                });
            }
            return [];
        }
    }, {
        key: 'isSupported',
        value: function isSupported() {
            var i, len;

            if (this.creatives.length === 0) {
                return false;
            }

            for (i = 0, len = this.creatives.length; i < len; i += 1) {
                if (!this.creatives[i].isSupported()) {
                    return false;
                }
            }
            return true;
        }
    }]);
    return InLine;
}();

var Wrapper = function Wrapper(wrapperJTree) {
    classCallCheck(this, Wrapper);

    //Required elements
    this.adSystem = xml.keyValue(wrapperJTree.adSystem);
    this.impressions = VastUtil.parseImpressions(wrapperJTree.impression);
    this.VASTAdTagURI = xml.keyValue(wrapperJTree.vASTAdTagURI);

    //Optional elements
    this.creatives = Creative.parseCreatives(wrapperJTree.creatives);
    this.error = xml.keyValue(wrapperJTree.error);
    this.extensions = wrapperJTree.extensions;

    //Optional attrs
    this.followAdditionalWrappers = isDefined(xml.attr(wrapperJTree, 'followAdditionalWrappers')) ? xml.attr(wrapperJTree, 'followAdditionalWrappers') : true;
    this.allowMultipleAds = xml.attr(wrapperJTree, 'allowMultipleAds');
    this.fallbackOnNoAd = xml.attr(wrapperJTree, 'fallbackOnNoAd');
};

var Ad = function () {
    function Ad(adJTree) {
        classCallCheck(this, Ad);

        this._initialize(adJTree);
    }

    createClass(Ad, [{
        key: '_initialize',
        value: function _initialize(adJTree) {
            this.id = adJTree.attr('id');
            this.sequence = adJTree.attr('sequence');

            if (adJTree.inLine) {
                this.inLine = new InLine(adJTree.inLine);
            }

            if (adJTree.wrapper) {
                this.wrapper = new Wrapper(adJTree.wrapper);
            }
        }
    }]);
    return Ad;
}();

var VASTResponse = function () {
    function VASTResponse() {
        classCallCheck(this, VASTResponse);

        this._linearAdded = false;
        this.ads = [];
        this.errorURLMacros = [];
        this.impressions = [];
        this.clickTrackings = [];
        this.customClicks = [];
        this.trackingEvents = {};
        this.mediaFiles = [];
        this.clickThrough = undefined;
        this.adTitle = '';
        this.duration = undefined;
        this.skipoffset = undefined;
    }

    createClass(VASTResponse, [{
        key: 'addAd',
        value: function addAd(ad) {
            var inLine, wrapper;
            if (ad instanceof Ad) {
                inLine = ad.inLine;
                wrapper = ad.wrapper;

                this.ads.push(ad);

                if (inLine) {
                    this._addInLine(inLine);
                }

                if (wrapper) {
                    this._addWrapper(wrapper);
                }
            }
        }
    }, {
        key: '_addErrorTrackUrl',
        value: function _addErrorTrackUrl(error) {
            var errorURL = error instanceof JXONTree ? xml.keyValue(error) : error;
            if (errorURL) {
                this.errorURLMacros.push(errorURL);
            }
        }
    }, {
        key: '_addImpressions',
        value: function _addImpressions(impressions) {
            isArray(impressions) && appendToArray(this.impressions, impressions);
        }
    }, {
        key: '_addClickThrough',
        value: function _addClickThrough(clickThrough) {
            if (isNotEmptyString(clickThrough)) {
                this.clickThrough = clickThrough;
            }
        }
    }, {
        key: '_addClickTrackings',
        value: function _addClickTrackings(clickTrackings) {
            isArray(clickTrackings) && appendToArray(this.clickTrackings, clickTrackings);
        }
    }, {
        key: '_addCustomClicks',
        value: function _addCustomClicks(customClicks) {
            isArray(customClicks) && appendToArray(this.customClicks, customClicks);
        }
    }, {
        key: '_addTrackingEvents',
        value: function _addTrackingEvents(trackingEvents) {
            var eventsMap = this.trackingEvents;

            if (trackingEvents) {
                trackingEvents = isArray(trackingEvents) ? trackingEvents : [trackingEvents];
                trackingEvents.forEach(function (trackingEvent) {
                    if (!eventsMap[trackingEvent.name]) {
                        eventsMap[trackingEvent.name] = [];
                    }
                    eventsMap[trackingEvent.name].push(trackingEvent);
                });
            }
        }
    }, {
        key: '_addTitle',
        value: function _addTitle(title) {
            if (isNotEmptyString(title)) {
                this.adTitle = title;
            }
        }
    }, {
        key: '_addDuration',
        value: function _addDuration(duration) {
            if (isNumber(duration)) {
                this.duration = duration;
            }
        }
    }, {
        key: '_addVideoClicks',
        value: function _addVideoClicks(videoClicks, isWrapper) {
            if (videoClicks instanceof VideoClicks) {
                if (!isWrapper) {
                    this._addClickThrough(videoClicks.clickThrough);
                }
                this._addClickTrackings(videoClicks.clickTrackings);
                this._addCustomClicks(videoClicks.customClicks);
            }
        }
    }, {
        key: '_addMediaFiles',
        value: function _addMediaFiles(mediaFiles) {
            isArray(mediaFiles) && appendToArray(this.mediaFiles, mediaFiles);
        }
    }, {
        key: '_addSkipoffset',
        value: function _addSkipoffset(offset) {
            if (offset) {
                this.skipoffset = offset;
            }
        }
    }, {
        key: '_addAdParameters',
        value: function _addAdParameters(adParameters) {
            if (adParameters) {
                this.adParameters = adParameters;
            }
        }
    }, {
        key: '_addLinear',
        value: function _addLinear(linear) {
            if (linear instanceof Linear) {
                this._addDuration(linear.duration);
                this._addTrackingEvents(linear.trackingEvents);
                this._addVideoClicks(linear.videoClicks);
                this._addMediaFiles(linear.mediaFiles);
                this._addSkipoffset(linear.skipoffset);
                this._addAdParameters(linear.adParameters);
                this._linearAdded = true;
            }
        }
    }, {
        key: '_addInLine',
        value: function _addInLine(inLine) {
            var that = this;

            if (inLine instanceof InLine) {
                this._addTitle(inLine.adTitle);
                this._addErrorTrackUrl(inLine.error);
                this._addImpressions(inLine.impressions);

                inLine.creatives.forEach(function (creative) {
                    if (creative.linear) {
                        that._addLinear(creative.linear);
                    }
                });
            }
        }
    }, {
        key: '_addWrapper',
        value: function _addWrapper(wrapper) {
            var that = this;

            if (wrapper instanceof Wrapper) {
                this._addErrorTrackUrl(wrapper.error);
                this._addImpressions(wrapper.impressions);

                wrapper.creatives.forEach(function (creative) {
                    var linear = creative.linear;
                    if (linear) {
                        that._addVideoClicks(linear.videoClicks, true);
                        // that.clickThrough = undefined;//We ensure that no clickThrough has been added
                        that._addTrackingEvents(linear.trackingEvents);
                    }
                });
            }
        }
    }, {
        key: 'hasLinear',
        value: function hasLinear() {
            return this._linearAdded;
        }
    }]);
    return VASTResponse;
}();

function appendToArray(array, items) {
    items.forEach(function (item) {
        array.push(item);
    });
}

var VASTTracker = function () {
    function VASTTracker(assetURI, vastResponse) {
        classCallCheck(this, VASTTracker);

        this._sanityCheck(assetURI, vastResponse);
        this._initialize(assetURI, vastResponse);
    }

    createClass(VASTTracker, [{
        key: '_sanityCheck',
        value: function _sanityCheck(assetURI, vastResponse) {
            if (!isString(assetURI) || isEmptyString(assetURI)) {
                throw error.VASTTRACKER_ASSET_URI;
            }

            if (!(vastResponse instanceof VASTResponse)) {
                throw error.VASTTRACKER_VAST_RESPONSE;
            }
        }
    }, {
        key: '_initialize',
        value: function _initialize(assetURI, vastResponse) {
            this.response = vastResponse;
            this.assetURI = assetURI;
            this.progress = 0;
            this.quartiles = {
                firstQuartile: { tracked: false, time: Math.round(25 * vastResponse.duration) / 100 },
                midpoint: { tracked: false, time: Math.round(50 * vastResponse.duration) / 100 },
                thirdQuartile: { tracked: false, time: Math.round(75 * vastResponse.duration) / 100 }
            };
        }
    }, {
        key: 'durationChange',
        value: function durationChange(duration) {
            this.quartiles = {
                firstQuartile: { tracked: false, time: Math.round(25 * duration) / 100 },
                midpoint: { tracked: false, time: Math.round(50 * duration) / 100 },
                thirdQuartile: { tracked: false, time: Math.round(75 * duration) / 100 }
            };
        }
    }, {
        key: 'trackURLs',
        value: function trackURLs(urls, variables) {
            if (isArray(urls) && urls.length > 0) {
                variables = extend({
                    ASSETURI: this.assetURI,
                    CONTENTPLAYHEAD: VastUtil.formatProgress(this.progress)
                }, variables || {});

                VastUtil.track(urls, variables);
            }
        }
    }, {
        key: 'trackEvent',
        value: function trackEvent(eventName, trackOnce) {
            this.trackURLs(this._getEventUris(this.response.trackingEvents[eventName]));
            if (trackOnce) {
                this.response.trackingEvents[eventName] = undefined;
            }
        }
    }, {
        key: 'trackProgress',
        value: function trackProgress(newProgressInMs) {
            var that = this;
            var events = [];
            var ONCE = true;
            var ALWAYS = false;
            var trackingEvents = this.response.trackingEvents;

            if (isNumber(newProgressInMs)) {
                addTrackEvent('start', ONCE, newProgressInMs > 0);
                addTrackEvent('rewind', ALWAYS, hasRewound(this.progress, newProgressInMs));
                addQuartileEvents(newProgressInMs);
                trackProgressEvents(newProgressInMs);
                trackEvents();
                this.progress = newProgressInMs;
            }

            /*** Local function ***/
            function hasRewound(currentProgress, newProgress) {
                var REWIND_THRESHOLD = 3000; //IOS video clock is very unreliable and we need a 3 seconds threshold to ensure that there was a rewind an that it was on purpose.
                return currentProgress > newProgressInMs && Math.abs(newProgress - currentProgress) > REWIND_THRESHOLD;
            }

            function addTrackEvent(eventName, trackOnce, canBeAdded) {
                if (trackingEvents[eventName] && canBeAdded) {
                    events.push({
                        name: eventName,
                        trackOnce: !!trackOnce
                    });
                }
            }

            function addQuartileEvents(progress) {
                var quartiles = that.quartiles;
                var firstQuartile = that.quartiles.firstQuartile;
                var midpoint = that.quartiles.midpoint;
                var thirdQuartile = that.quartiles.thirdQuartile;

                if (!firstQuartile.tracked) {
                    trackQuartile('firstQuartile', progress);
                } else if (!midpoint.tracked) {
                    trackQuartile('midpoint', progress);
                } else if (!thirdQuartile.tracked) {
                    trackQuartile('thirdQuartile', progress);
                }

                /*** Local function ***/
                function trackQuartile(quartileName, progress) {
                    var quartile = quartiles[quartileName];
                    if (canBeTracked(quartile, progress)) {
                        quartile.tracked = true;
                        addTrackEvent(quartileName, ONCE, true);
                    }
                }
            }

            function canBeTracked(quartile, progress) {
                var quartileTime = quartile.time;
                //We only fire the quartile event if the progress is bigger than the quartile time by 5 seconds at most.
                return progress >= quartileTime && progress <= quartileTime + 5000;
            }

            function trackProgressEvents(progress) {
                if (!isArray(trackingEvents.progress)) {
                    return; //Nothing to track
                }

                var pendingProgressEvts = [];

                trackingEvents.progress.forEach(function (evt) {
                    if (evt.offset <= progress) {
                        that.trackURLs([evt.uri]);
                    } else {
                        pendingProgressEvts.push(evt);
                    }
                });
                trackingEvents.progress = pendingProgressEvts;
            }

            function trackEvents() {
                events.forEach(function (event) {
                    that.trackEvent(event.name, event.trackOnce);
                });
            }
        }
    }, {
        key: 'trackComplete',
        value: function trackComplete() {
            if (this.quartiles.thirdQuartile.tracked) {
                this.trackEvent('complete', true);
            }
        }
    }, {
        key: 'trackErrorWithCode',
        value: function trackErrorWithCode(errorcode) {
            if (isNumber(errorcode)) {
                this.trackURLs(this.response.errorURLMacros, { ERRORCODE: errorcode });
            }
        }
    }, {
        key: 'trackImpressions',
        value: function trackImpressions() {
            this.trackURLs(this.response.impressions);
        }
    }, {
        key: 'trackCreativeView',
        value: function trackCreativeView() {
            this.trackEvent('creativeView');
        }
    }, {
        key: 'trackClick',
        value: function trackClick() {
            this.trackURLs(this.response.clickTrackings);
        }
    }, {
        key: '_getEventUris',
        value: function _getEventUris(trackingEvents) {
            var uris;

            if (trackingEvents) {
                uris = [];
                trackingEvents.forEach(function (event) {
                    if (event.uri) {
                        uris.push(event.uri);
                    }
                });
            }
            return uris;
        }
    }]);
    return VASTTracker;
}();

['rewind', 'fullscreen', 'exitFullscreen', 'pause', 'resume', 'mute', 'unmute', 'acceptInvitation', 'acceptInvitationLinear', 'collapse', 'expand'].forEach(function (eventName) {
    VASTTracker.prototype['track' + capitalize(eventName)] = function () {
        this.trackEvent(eventName);
    };
});

['start', 'skip', 'close', 'closeLinear'].forEach(function (eventName) {
    VASTTracker.prototype['track' + capitalize(eventName)] = function () {
        this.trackEvent(eventName, true);
    };
});

['firstQuartile', 'midpoint', 'thirdQuartile'].forEach(function (quartile) {
    VASTTracker.prototype['track' + capitalize(quartile)] = function () {
        this.quartiles[quartile].tracked = true;
        this.trackEvent(quartile, true);
    };
});

var playerUtils = function () {
    function playerUtils() {
        classCallCheck(this, playerUtils);
    }

    createClass(playerUtils, null, [{
        key: "once",
        value: function once(player, events, handler) {
            function listener() {
                for (var i = 0; i < events.length; i++) {
                    player.off(events[i], listener);
                }

                handler.apply(null, arguments);
            }

            events.forEach(function (event) {
                player.on(event, listener);
            });
        }
    }]);
    return playerUtils;
}();

var _class$7;
var _temp$7;

var DEFAULT$3 = playercore.playerconfig.DEFAULT;
var AdVideoEl = (_temp$7 = _class$7 = function (_VCPlayerObject) {
    inherits(AdVideoEl, _VCPlayerObject);

    function AdVideoEl(props) {
        classCallCheck(this, AdVideoEl);

        var _this = possibleConstructorReturn(this, (AdVideoEl.__proto__ || Object.getPrototypeOf(AdVideoEl)).call(this, props));

        var player = _this.props.player;

        _this.createAdVideoEl();
        _this._dispose = _this._dispose.bind(_this);
        _this._showAds = _this._showAds.bind(_this);
        player.on(DEFAULT$3.EVENT.AD_END, _this._dispose);
        player.on(DEFAULT$3.EVENT.USER_SKIP_AD, _this._dispose);
        player.on(DEFAULT$3.EVENT.VAST_AD_VIDEO_COMPLETE, _this._dispose);
        player.on(DEFAULT$3.EVENT.VPAID_AD_VIDEO_COMPLETE, _this._dispose);
        player.on(DEFAULT$3.EVENT.VPAID_AD_STARTED, _this._showAds);
        return _this;
    }
    /**
    * Định nghĩa kiểu của props
    * @type {Object}
    */


    createClass(AdVideoEl, [{
        key: '_dispose',
        value: function _dispose() {
            var videoEl = this.state.videoEl;
            var player = this.props.player;

            player.overlay.getElementsByClassName('overlay-ad')[0].style.opacity = '0';

            Dom.remove(videoEl);
            videoEl = null;
            player.off(DEFAULT$3.EVENT.AD_END, this._dispose);
            player.off(DEFAULT$3.EVENT.USER_SKIP_AD, this._dispose);
            player.off(DEFAULT$3.EVENT.VAST_AD_VIDEO_COMPLETE, this._dispose);
            player.off(DEFAULT$3.EVENT.VPAID_AD_VIDEO_COMPLETE, this._dispose);
            player.off(DEFAULT$3.EVENT.VPAID_AD_STARTED, this._showAds);
        }
    }, {
        key: '_showAds',
        value: function _showAds() {
            var player = this.props.player;
            var videoEl = this.state.videoEl;


            videoEl.style.display = 'block';
            player.overlay.getElementsByClassName('overlay-ad')[0].style.opacity = '1';
        }
    }, {
        key: 'createAdVideoEl',
        value: function createAdVideoEl() {
            var player = this.props.player;

            var self = this;
            var videoEl = document.createElement('video');
            videoEl.style.display = 'none';
            videoEl.muted = true;
            Dom.addClass(videoEl, 'VideoEl-container');
            player.overlay.getElementsByClassName('overlay-ad')[0].append(videoEl);

            this.setState({
                videoEl: videoEl
            });
            videoEl.addEventListener('playing', function () {
                self._showAds();
            });

            videoEl.ontimeupdate = function () {
                player.trigger('timeupdate');
            };

            videoEl.onvolumechange = function () {
                player.trigger('advolumechange');
            };

            videoEl.onended = function () {
                player.trigger('advideoend');
            };
        }
    }, {
        key: 'src',
        value: function src(source) {
            var videoEl = this.state.videoEl;

            videoEl.src = source.src;
        }
    }, {
        key: 'on',
        value: function on(event, cb) {
            var videoEl = this.state.videoEl;

            videoEl.addEventListener(event, cb);
        }
    }, {
        key: 'off',
        value: function off(event, cb) {
            var videoEl = this.state.videoEl;

            videoEl.removeEventListener(event, cb);
        }
    }, {
        key: 'currentTime',
        value: function currentTime() {
            var videoEl = this.state.videoEl;

            return videoEl.currentTime;
        }
    }, {
        key: 'duration',
        value: function duration() {
            var videoEl = this.state.videoEl;

            return videoEl.duration;
        }
    }, {
        key: 'load',
        value: function load() {
            var videoEl = this.state.videoEl;

            videoEl.load();
        }
    }, {
        key: 'volume',
        value: function volume(_volume) {
            var videoEl = this.state.videoEl;

            if (typeof _volume !== 'number') {
                return videoEl.volume;
            }

            if (_volume !== 0) {
                videoEl.muted = false;
            }
            videoEl.volume = _volume;
        }
    }, {
        key: 'paused',
        value: function paused() {
            var videoEl = this.state.videoEl;

            return videoEl.paused;
        }
    }, {
        key: 'play',
        value: function play() {
            var videoEl = this.state.videoEl;
            var player = this.props.player;

            player.trigger('play');
            videoEl.play().then(function () {
                // do stuff
            }).catch(function (err) {
                console.log(err);
            });
        }
    }, {
        key: 'pause',
        value: function pause() {
            var videoEl = this.state.videoEl;
            var player = this.props.player;

            player.trigger('pause');
            videoEl.pause();
        }
    }, {
        key: 'preload',
        value: function preload(pre) {
            var videoEl = this.state.videoEl;

            videoEl.preload = pre;
        }
    }, {
        key: 'muted',
        value: function muted(_mute) {
            var videoEl = this.state.videoEl;

            if (_mute !== undefined) {
                videoEl.muted = _mute;
            }

            return videoEl.muted;
        }
    }]);
    return AdVideoEl;
}(VCPlayerObject$1), _class$7.propTypes = {
    player: playercore.PropTypes.object.isRequired
}, _temp$7);

var _class$6;
var _temp$6;

var PlayerAdUnit = (_temp$6 = _class$6 = function (_VCPlayerObject) {
    inherits(PlayerAdUnit, _VCPlayerObject);

    function PlayerAdUnit(props) {
        classCallCheck(this, PlayerAdUnit);

        var _this = possibleConstructorReturn(this, (PlayerAdUnit.__proto__ || Object.getPrototypeOf(PlayerAdUnit)).call(this, props));

        _this.selectPlayerAd();
        return _this;
    }
    /**
    * Định nghĩa kiểu của props
    * @type {Object}
    */


    createClass(PlayerAdUnit, [{
        key: 'createAdVideoEl',
        value: function createAdVideoEl() {
            var player = this.props.player;

            var PlayerAdUnit = new AdVideoEl({ player: player });
            return PlayerAdUnit;
        }
    }, {
        key: 'selectPlayerAd',
        value: function selectPlayerAd() {
            var _props = this.props,
                player = _props.player,
                preLoaded = _props.preLoaded;

            var PlayerAdUnit = void 0;

            if (playercore.agent.isIOS || !preLoaded) {
                PlayerAdUnit = player;
            } else {
                PlayerAdUnit = this.createAdVideoEl();
            }

            this.setState({
                PlayerAdUnit: PlayerAdUnit
            });
        }
    }, {
        key: 'dispose',
        value: function dispose() {
            var PlayerAdUnit = this.state.PlayerAdUnit;

            if (!playercore.agent.isIOS) {
                PlayerAdUnit._dispose();
            }
        }
    }, {
        key: 'getPlayerAdUnit',
        value: function getPlayerAdUnit() {
            var PlayerAdUnit = this.state.PlayerAdUnit;


            if (!PlayerAdUnit) {
                return;
            }

            return PlayerAdUnit;
        }
    }]);
    return PlayerAdUnit;
}(VCPlayerObject$1), _class$6.propTypes = {
    player: playercore.PropTypes.object.isRequired
}, _temp$6);

var DEFAULT$2 = playercore.playerconfig.DEFAULT;

var VastTest = function (_VCPlayerObject) {
    inherits(VastTest, _VCPlayerObject);

    function VastTest(props) {
        classCallCheck(this, VastTest);

        var _this = possibleConstructorReturn(this, (VastTest.__proto__ || Object.getPrototypeOf(VastTest)).call(this, props));

        _this.type = 'VAST';
        _this.state = {
            tracker: null,
            duration: null,
            orderPlay: false,
            firstAdVideoStart: false,
            canPlay: false
        };
        var player = _this.props.player;

        player.one(DEFAULT$2.EVENT.AD_END, _this._handleAdEnd);
        return _this;
    }

    createClass(VastTest, [{
        key: '_handleAdEnd',
        value: function _handleAdEnd() {}
    }, {
        key: 'playAd',
        value: function playAd(vastResponse) {
            var self = this;
            this.setState({
                vastResponse: vastResponse
            });

            return this._start().then(function () {
                return self._createAdPlayer();
            }).then(function () {
                return self._selectAdSource();
            }).then(function () {
                return self._createVASTTracker();
            }).then(function () {
                return self._addClickThrough();
            }).then(function () {
                return self._addSkipButton();
            }).then(function () {
                return self._setupEvents();
            }).then(function () {
                return self._playSelectedAd();
            }).catch(function (e) {
                if (self.state.playerAd) {
                    self.state.playerAd.dispose();
                }
                self._trackError(e);
                throw e;
            });
        }

        // playSelectedAd(){
        //     return this._playSelectedAd();
        // }

    }, {
        key: '_createAdPlayer',
        value: function _createAdPlayer() {
            var _this2 = this;

            var self = this;

            return new Promise(function (resolve) {
                var playerAd = new PlayerAdUnit(_this2.props);
                self.setState({
                    playerAdUnit: playerAd.getPlayerAdUnit(),
                    playerAd: playerAd
                });
                resolve();
            });
        }
    }, {
        key: 'getPlayerAdUnit',
        value: function getPlayerAdUnit() {
            var playerAdUnit = this.state.playerAdUnit;

            return playerAdUnit;
        }
    }, {
        key: '_start',
        value: function _start() {
            return new Promise(function (resolve) {
                resolve();
            });
        }
    }, {
        key: '_selectAdSource',
        value: function _selectAdSource() {
            var source = void 0;
            var player = this.props.player;
            var vastResponse = this.state.vastResponse;


            var playerWidth = Dom.getDimension(player.el()).width;
            vastResponse.mediaFiles.sort(function compareTo(a, b) {
                var deltaA = Math.abs(playerWidth - a.width);
                var deltaB = Math.abs(playerWidth - b.width);
                return deltaA - deltaB;
            });

            vastResponse.mediaFiles = vastResponse.mediaFiles.filter(function (a) {
                return a.type === 'video/mp4';
            });

            source = player.selectSource(vastResponse.mediaFiles).source;

            if (source) {
                playercore.log.info('selected source: ', source);
                if (this._adUnit) {
                    this._adUnit._src = source;
                }
                this.setState({ source: source });
                return;
            }

            throw error.VAST_INTEGRATOR_SOURCE_ERROR;
        }
    }, {
        key: '_createVASTTracker',
        value: function _createVASTTracker() {
            var _state = this.state,
                source = _state.source,
                vastResponse = _state.vastResponse;

            var tracker = new VASTTracker(source.src, vastResponse);
            this.setState({ tracker: tracker });
        }
    }, {
        key: '_addClickThrough',
        value: function _addClickThrough() {
            var player = this.props.player;
            var _state2 = this.state,
                source = _state2.source,
                vastResponse = _state2.vastResponse,
                playerAdUnit = _state2.playerAdUnit;

            var updateBlocker = updateBlockerURL.bind(null, vastResponse, playerAdUnit, player);

            playerAdUnit.on('timeupdate', updateBlocker);

            // player.on(DEFAULT.EVENT.VAST_AD_TIMEUPDATE, updateBlocker);
            // videoEl.ontimeupdate = updateBlocker;

            function updateBlockerURL(response, playerAdUnit, player) {
                try {
                    var href = generateClickThroughURL(response.clickThrough, playerAdUnit);
                    player.container.ad.clickThrough.updateBlocker(href);
                } catch (e) {
                    // ignore
                }
            }

            function generateClickThroughURL(clickThroughMacro, playerAdUnit) {
                var variables = {
                    ASSETURI: source.src,
                    CONTENTPLAYHEAD: VastUtil.formatProgress(playerAdUnit.currentTime() * 1000)
                };

                return clickThroughMacro ? VastUtil.parseURLMacro(clickThroughMacro, variables) : '#';
            }
        }
    }, {
        key: '_addSkipButton',
        value: function _addSkipButton() {}
    }, {
        key: '_setupEvents',
        value: function _setupEvents() {
            var player = this.props.player;
            var _state3 = this.state,
                tracker = _state3.tracker,
                playerAdUnit = _state3.playerAdUnit;

            var isTrackDuration = false;
            function unbindEvents() {
                player.off('fullscreenchange', trackFullscreenChange);
                player.off(DEFAULT$2.EVENT.VAST_AD_VIDEO_START, trackImpressions);
                playerAdUnit.off('pause', trackPause);
                playerAdUnit.off('timeupdate', trackProgress);
                playerAdUnit.off('volumechange', trackVolumeChange);
                playerAdUnit.off('durationchange', onDurationChange);
            }

            function unbindDurationChange() {
                playerAdUnit.off('durationchange', onDurationChange);
            }

            function trackFullscreenChange() {
                if (player.isFullscreen()) {
                    tracker.trackFullscreen();
                } else {
                    tracker.trackExitFullscreen();
                }
            }

            function trackPause() {
                //NOTE: whenever a video ends the video Element triggers a 'pause' event before the 'ended' event.
                //      We should not track this pause event because it makes the VAST tracking confusing again we use a
                //      Threshold of 2 seconds to prevent false positives on IOS.
                if (Math.abs(playerAdUnit.duration() - playerAdUnit.currentTime()) < 2) {
                    return;
                }
                tracker.trackPause();
                playerUtils.once(player, [DEFAULT$2.EVENT.VAST_AD_RESUME, DEFAULT$2.EVENT.AD_END, DEFAULT$2.EVENT.AD_CANCEL], function (evt) {
                    if (evt.type === DEFAULT$2.EVENT.VAST_AD_RESUME) {
                        tracker.trackResume();
                    }
                });
            }

            function trackProgress() {
                var currentTimeInMs = playerAdUnit.currentTime() * 1000;
                tracker.trackProgress(currentTimeInMs);
            }

            function trackImpressions() {
                tracker.trackImpressions();
                tracker.trackCreativeView();
            }

            function trackVolumeChange() {
                var volume_ = playerAdUnit.volume();
                var mute_ = playerAdUnit.muted();
                if (volume_ === 0 || mute_) {
                    tracker.trackMute();
                } else {
                    tracker.trackUnmute();
                }
            }

            function onDurationChange() {
                var duration = playerAdUnit.duration();
                if (isNaN(duration) || isTrackDuration) {
                    return;
                }
                isTrackDuration = true;
                tracker.durationChange(duration * 1000);
            }

            player.on('fullscreenchange', trackFullscreenChange);
            player.on(DEFAULT$2.EVENT.VAST_AD_VIDEO_START, trackImpressions);
            player.on(DEFAULT$2.EVENT.VAST_AD_START, unbindDurationChange);

            /* Setup Event tracker   */

            /* Setup Event cho Player */

            playerAdUnit.on('durationchange', function () {
                playerAdUnit.on('pause', trackPause);
                playerAdUnit.on('timeupdate', trackProgress);
                playerAdUnit.on('volumechange', trackVolumeChange);
                playerAdUnit.on('durationchange', onDurationChange);

                playerAdUnit.on('play', function () {
                    player.trigger(DEFAULT$2.EVENT.VAST_AD_RESUME);
                });

                // player.on('pause', trackPause);
                // player.on('timeupdate', trackProgress);
                // player.on('volumechange', trackVolumeChange);
                // player.on('durationchange', onDurationChange);
                onDurationChange();
            });

            playerUtils.once(player, [DEFAULT$2.EVENT.AD_END, DEFAULT$2.EVENT.AD_CANCEL, DEFAULT$2.EVENT.AD_SKIP], unbindEvents);
            playerUtils.once(player, [DEFAULT$2.EVENT.AD_END, DEFAULT$2.EVENT.AD_CANCEL, DEFAULT$2.EVENT.AD_SKIP], function (evt) {
                if (evt.type === DEFAULT$2.EVENT.AD_END) {
                    tracker.trackComplete();
                }
            });

            /*** Local Functions ***/
        }
    }, {
        key: '_playSelectedAd',
        value: function _playSelectedAd() {
            var self = this;
            var _props = this.props,
                player = _props.player,
                type = _props.type,
                preLoaded = _props.preLoaded;
            var _state4 = this.state,
                playerAdUnit = _state4.playerAdUnit,
                orderPlay = _state4.orderPlay,
                firstAdVideoStart = _state4.firstAdVideoStart,
                canPlay = _state4.canPlay,
                source = _state4.source,
                vastResponse = _state4.vastResponse;
            var vastAd = player.vastAd;


            return new Promise(function (resolve, reject) {
                function unbindEvents() {
                    player.off(DEFAULT$2.EVENT.AD_SKIP, proceed);
                    player.off('play', _snapshotPlayer);
                    player.off('timeupdate', _preroll);
                    player.off('timeupdate', _playAd);
                    player.off(DEFAULT$2.EVENT.AD_ORDER_START_MIDROLL, _snapshotPlayer);
                    player.off(DEFAULT$2.EVENT.AD_ORDER_START_POSTROLL, _snapshotPlayer);
                    playerAdUnit.off('ended', proceed);
                }

                function proceed(evt) {
                    if (evt.type === 'ended' && playerAdUnit.duration() - playerAdUnit.currentTime() > 3) {
                        // Ignore ended event if the Ad time was not 'near' the end
                        // avoids issues where IOS controls could skip the Ad
                        return;
                    }

                    unbindEvents();

                    //NOTE: if the ads get cancel we do nothing apart removing the listners
                    if (evt.type === 'ended' || evt.type === DEFAULT$2.EVENT.AD_SKIP) {
                        player.trigger(DEFAULT$2.EVENT.VAST_AD_VIDEO_COMPLETE);
                        resolve();
                    }
                }

                function playAd() {
                    if (!canPlay) {
                        orderPlay = true;
                        return;
                    }
                    player.trigger(DEFAULT$2.EVENT.AD_PLAY, vastAd.state.vastResponse);
                    player.trigger(DEFAULT$2.EVENT.VAST_AD_START);
                    player.trigger(DEFAULT$2.EVENT.AD_START, vastAd);
                    playerAdUnit.play();
                }

                function _playAd() {
                    player.vastAd._prepareForAd();

                    player.vastAd.firstAd = true;
                    playAd();
                }

                playerAdUnit.on('error', function () {
                    unbindEvents();
                    reject('Error! Something went wrong');
                });

                playerAdUnit.on('loadedmetadata', function () {
                    if (orderPlay && !canPlay) {
                        canPlay = true;
                        playAd();
                    }
                    player.trigger('ad:ready', vastResponse);
                    canPlay = true;
                });

                playerAdUnit.on('playing', function () {
                    if (!firstAdVideoStart) {
                        self._vastAdVideoStart();
                        firstAdVideoStart = true;
                    }
                });

                playerAdUnit.on('ended', proceed);
                player.on(DEFAULT$2.EVENT.AD_CANCEL, proceed);
                player.on(DEFAULT$2.EVENT.AD_SKIP, proceed);

                if (!preLoaded && !player.vastAd.firstAd) {
                    player.vastAd._setUpRestorePlayer();
                    player.trigger('snapshotPlayer');
                    playerAdUnit.preload('auto');
                    playerAdUnit.src(source);
                    playerAdUnit.load();
                    _playAd();
                    return;
                }

                if (player.vastAd.firstAd) {
                    playAd();
                    return;
                }

                /**
                 * Check thuộc loại ads nào để load trước mediafile Ads
                 */

                function _preroll() {
                    if (player.paused()) {
                        player.one('play', _snapshotPlayer);
                    } else {
                        _snapshotPlayer();
                    }
                }

                function _snapshotPlayer() {
                    player.trigger('snapshotPlayer');
                    _playAd();
                }

                player.vastAd._setUpRestorePlayer();
                playerAdUnit.preload('auto');
                playerAdUnit.src(source);

                if (type === 'preroll') {
                    playerAdUnit.load();
                    player.one('timeupdate', _preroll);
                } else if (type === 'midroll') {
                    playerAdUnit.load();
                    player.one(DEFAULT$2.EVENT.AD_ORDER_START_MIDROLL, _snapshotPlayer);
                    player.trigger('prepareMidrollVastSuccess');
                } else if (type === 'postroll') {
                    playerAdUnit.load();
                    player.one(DEFAULT$2.EVENT.AD_ORDER_START_POSTROLL, _snapshotPlayer);
                    player.trigger('preparePostrollSuccess');
                }
            });
        }
    }, {
        key: '_vastAdVideoStart',
        value: function _vastAdVideoStart() {
            var player = this.props.player;

            player.trigger(DEFAULT$2.EVENT.VAST_AD_VIDEO_START);
        }
    }, {
        key: 'getAdDuration',
        value: function getAdDuration() {
            var playerAdUnit = this.state.playerAdUnit;

            var duration = playerAdUnit.duration();
            return Promise.resolve(duration);
        }
    }, {
        key: 'getSkipOffSet',
        value: function getSkipOffSet() {
            var skipoffset = this.props.skipoffset;


            if (!skipoffset) {
                return;
            }

            return skipoffset;
        }
    }, {
        key: '_trackError',
        value: function _trackError(error$$1) {
            var vastResponse = this.state.vastResponse;

            VastUtil.track(vastResponse.errorURLMacros, { ERRORCODE: error$$1.code || 900 });
        }
    }, {
        key: 'getAdRemainingTime',
        value: function getAdRemainingTime() {
            // let { player } = this.props;
            var playerAdUnit = this.state.playerAdUnit;

            var remainingTime = playerAdUnit.duration() - playerAdUnit.currentTime();
            return Promise.resolve(remainingTime);
        }
    }, {
        key: 'getAdVolume',
        value: function getAdVolume() {
            // let { player } = this.props;
            var playerAdUnit = this.state.playerAdUnit;

            var volume = playerAdUnit.volume();
            return Promise.resolve(volume);
        }
    }, {
        key: 'skipAd',
        value: function skipAd() {
            var player = this.props.player;
            var tracker = this.state.tracker;


            if (!player || !tracker) {
                return;
            }
            tracker.trackSkip();
            player.trigger(DEFAULT$2.EVENT.AD_SKIP);
        }
    }, {
        key: 'pauseAd',
        value: function pauseAd() {
            var player = this.props.player;
            var playerAdUnit = this.state.playerAdUnit;

            playerAdUnit.pause(true);
            player.trigger(DEFAULT$2.EVENT.AD_PAUSE_AD);
        }
    }, {
        key: 'resumeAd',
        value: function resumeAd() {
            var player = this.props.player;
            var playerAdUnit = this.state.playerAdUnit;

            playerAdUnit.play(true);
            player.trigger(DEFAULT$2.EVENT.AD_RESUME_AD);
        }
    }, {
        key: 'clickThrough',
        value: function clickThrough() {
            var player = this.props.player;
            var tracker = this.state.tracker;


            if (!player || !tracker) {
                return;
            }
            player.trigger(DEFAULT$2.EVENT.VAST_AD_CLICK_THRU);
            tracker.trackClick();
        }
    }, {
        key: 'setAdVolume',
        value: function setAdVolume(volume) {
            var playerAdUnit = this.state.playerAdUnit;

            playerAdUnit.volume(volume);
        }
    }, {
        key: 'isPaused',
        value: function isPaused() {
            var playerAdUnit = this.state.playerAdUnit;

            return playerAdUnit.paused();
        }
    }]);
    return VastTest;
}(VCPlayerObject$1);

var _class$9;
var _temp$9;

var EVENTS$1 = ['AdLoaded', 'AdStarted', 'AdStopped', 'AdSkipped', 'AdSkippableStateChange', // VPAID 2.0 new event
'AdSizeChange', // VPAID 2.0 new event
'AdLinearChange', 'AdDurationChange', // VPAID 2.0 new event
'AdExpandedChange', 'AdRemainingTimeChange', // [Deprecated in 2.0] but will be still fired for backwards compatibility
'AdVolumeChange', 'AdImpression', 'AdVideoStart', 'AdVideoFirstQuartile', 'AdVideoMidpoint', 'AdVideoThirdQuartile', 'AdVideoComplete', 'AdClickThru', 'AdInteraction', // VPAID 2.0 new event
'AdUserAcceptInvitation', 'AdUserMinimize', 'AdUserClose', 'AdPaused', 'AdPlaying', 'AdLog', 'AdError'];

var VPAIDAdUnitWrapper = (_temp$9 = _class$9 = function (_VCPlayerObject) {
    inherits(VPAIDAdUnitWrapper, _VCPlayerObject);

    function VPAIDAdUnitWrapper(props) {
        classCallCheck(this, VPAIDAdUnitWrapper);

        var _this = possibleConstructorReturn(this, (VPAIDAdUnitWrapper.__proto__ || Object.getPrototypeOf(VPAIDAdUnitWrapper)).call(this, props));

        var _this$props = _this.props,
            adUnit = _this$props.adUnit,
            player = _this$props.player;

        if (!adUnit || !_this._checkVPAIDInterface(adUnit)) {
            throw error.VPAID_AD_UNIT_WRAPPER_AD_UNIT_NOT_FULLY;
        }

        EVENTS$1.forEach(function (event) {
            this.on(event, function () {
                player.trigger('ads.log', event);
            });
        }.bind(_this));
        return _this;
    }

    /**
     * Định nghĩa kiểu của props
     * @type {Object}
     */


    createClass(VPAIDAdUnitWrapper, [{
        key: '_checkVPAIDInterface',
        value: function _checkVPAIDInterface(VPAIDAdUnit) {
            //NOTE: skipAd is not part of the method list because it only appears in VPAID 2.0 and we support VPAID 1.0
            var VPAIDInterfaceMethods = ['handshakeVersion', 'initAd', 'startAd', 'stopAd', 'resizeAd', 'pauseAd', 'expandAd', 'collapseAd'];

            for (var i = 0, len = VPAIDInterfaceMethods.length; i < len; i++) {
                if (!VPAIDAdUnit || !isFunction(VPAIDAdUnit[VPAIDInterfaceMethods[i]])) {
                    return false;
                }
            }

            return canSubscribeToEvents(VPAIDAdUnit) && canUnsubscribeFromEvents(VPAIDAdUnit);

            /*** Local Functions ***/

            function canSubscribeToEvents(adUnit) {
                return isFunction(adUnit.subscribe) || isFunction(adUnit.addEventListener) || isFunction(adUnit.on);
            }

            function canUnsubscribeFromEvents(adUnit) {
                return isFunction(adUnit.unsubscribe) || isFunction(adUnit.removeEventListener) || isFunction(adUnit.off);
            }
        }
    }, {
        key: 'adUnitAsyncCall',
        value: function adUnitAsyncCall() {
            var _props = this.props,
                adUnit = _props.adUnit,
                responseTimeout = _props.responseTimeout;

            var args = arrayLikeObjToArray(arguments);
            var method = args.shift();
            var cb = args.pop();
            var timeoutId;

            sanityCheck(method, cb, adUnit);
            args.push(wrapCallback());

            adUnit[method].apply(adUnit, args);
            timeoutId = setTimeout(function () {
                timeoutId = null;
                cb(error.VPAID_AD_UNIT_WRAPPER_METHOD_TIMEOUT.extendsWithData({ method: method }));
                cb = noop;
            }, responseTimeout);

            /*** Local functions ***/
            function sanityCheck(method, cb, adUnit) {
                if (!isString(method) || !isFunction(adUnit[method])) {
                    throw error.VPAID_AD_UNIT_WRAPPER_INVALID_METHOD_NAME.extendsWithData({ method: method });
                }

                if (!isFunction(cb)) {
                    throw error.VPAID_AD_UNIT_WRAPPER_MISSING_CALLBACK.extendsWithData({ method: method });
                }
            }

            function wrapCallback() {
                return function () {
                    if (timeoutId) {
                        clearTimeout(timeoutId);
                    }
                    cb.apply(this, arguments);
                };
            }
        }
    }, {
        key: 'on',
        value: function on(evtName, handler) {
            var adUnit = this.props.adUnit;

            var addEventListener = adUnit.addEventListener || adUnit.subscribe || adUnit.on;
            addEventListener.call(adUnit, evtName, handler);
        }
    }, {
        key: 'off',
        value: function off(evtName, handler) {
            var adUnit = this.props.adUnit;

            var removeEventListener = adUnit.removeEventListener || adUnit.unsubscribe || adUnit.off;
            removeEventListener.call(adUnit, evtName, handler);
        }
    }, {
        key: 'waitForEvent',
        value: function waitForEvent(evtName, cb, context, timeout) {
            var responseTimeout = this.props.responseTimeout;

            var timeoutId = void 0;
            sanityCheck(evtName, cb);
            context = context || null;

            this.on(evtName, responseListener);

            timeoutId = setTimeout(function () {
                cb(error.VPAID_AD_UNIT_WRAPPER_EVENT_TIMEOUT.extendsWithData({ event: evtName }));
                timeoutId = null;
                cb = noop;
            }, timeout || responseTimeout);

            /*** Local functions ***/
            function sanityCheck(evtName, cb) {
                if (!isString(evtName)) {
                    throw error.VPAID_AD_UNIT_WRAPPER_MISSING_EVENT_NAME.extendsWithData({ event: evtName });
                }

                if (!isFunction(cb)) {
                    throw error.VPAID_AD_UNIT_WRAPPER_MISSING_EVENT_CALLBACK.extendsWithData({ event: evtName });
                }
            }

            function responseListener() {
                var args = arrayLikeObjToArray(arguments);

                if (timeoutId) {
                    clearTimeout(timeoutId);
                    timeoutId = null;
                }

                args.unshift(null);
                cb.apply(context, args);
            }
        }
    }, {
        key: 'handshakeVersion',
        value: function handshakeVersion(version, cb) {
            this.adUnitAsyncCall('handshakeVersion', version, cb);
        }
    }, {
        key: 'initAd',
        value: function initAd(width, height, viewMode, desiredBitrate, adUnitData, cb) {
            var adUnit = this.props.adUnit;

            var isLoaded = false;
            var isError = false;

            this.waitForEvent('AdLoaded', function () {
                if (isError) {
                    return;
                }
                isLoaded = true;
                cb.apply(null, arguments);
            });

            this.on('AdError', function (error$$1) {
                if (isLoaded) {
                    return;
                }

                isError = true;
                cb(error$$1);
            });

            adUnit.initAd(width, height, viewMode, desiredBitrate, adUnitData, { iframe: adUnit._iframe });
        }
    }, {
        key: 'resizeAd',
        value: function resizeAd(width, height, viewMode, cb) {
            // NOTE: AdSizeChange event is only supported on VPAID 2.0 so for the moment we are not going to use it
            // and will assume that everything is fine after the async call
            this.adUnitAsyncCall('resizeAd', width, height, viewMode, cb);
        }
    }, {
        key: 'startAd',
        value: function startAd(cb) {
            var adUnit = this.props.adUnit;

            this.waitForEvent('AdStarted', cb);
            adUnit.startAd();
        }
    }, {
        key: 'stopAd',
        value: function stopAd(cb) {
            var adUnit = this.props.adUnit;

            this.waitForEvent('AdStopped', cb, null, 300);
            adUnit.stopAd();
        }
    }, {
        key: 'pauseAd',
        value: function pauseAd(cb) {
            var adUnit = this.props.adUnit;

            this.waitForEvent('AdPaused', cb);
            adUnit.pauseAd();
        }
    }, {
        key: 'resumeAd',
        value: function resumeAd(cb) {
            var adUnit = this.props.adUnit;

            this.waitForEvent('AdPlaying', cb);
            adUnit.resumeAd();
        }
    }, {
        key: 'expandAd',
        value: function expandAd(cb) {
            var adUnit = this.props.adUnit;

            this.waitForEvent('AdExpandedChange', cb);
            adUnit.expandAd();
        }
    }, {
        key: 'collapseAd',
        value: function collapseAd(cb) {
            var adUnit = this.props.adUnit;

            this.waitForEvent('AdExpandedChange', cb);
            adUnit.collapseAd();
        }
    }, {
        key: 'skipAd',
        value: function skipAd(cb) {
            var adUnit = this.props.adUnit;

            this.waitForEvent('AdSkipped', cb, null, 300);
            adUnit.skipAd();
        }
    }, {
        key: 'setAdVolume',
        value: function setAdVolume(volume, cb) {
            this.adUnitAsyncCall('setAdVolume', volume, cb);
        }
    }]);
    return VPAIDAdUnitWrapper;
}(VCPlayerObject$1), _class$9.propTypes = {
    adUnit: playercore.PropTypes.object.isRequired,
    player: playercore.PropTypes.object.isRequired,
    responseTimeout: playercore.PropTypes.number.isRequired,
    src: playercore.PropTypes.string.isRequired
}, _temp$9);

//VPAID property getters

['adLinear', 'adWidth', 'adHeight', 'adExpanded', 'adSkippableState', 'adRemainingTime', 'adDuration', 'adVolume', 'adCompanions', 'adIcons'].forEach(function (property) {
    var getterName = 'get' + capitalize(property);

    VPAIDAdUnitWrapper.prototype[getterName] = function (cb) {
        this.adUnitAsyncCall(getterName, cb);
    };
});

var _class$8;
var _class2$2;
var _temp$8;

function _applyDecoratedDescriptor$2(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
        desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
        desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
        return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
        desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
        desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
        Object['define' + 'Property'](target, property, desc);
        desc = null;
    }

    return desc;
}

var DEFAULT$4 = playercore.playerconfig.DEFAULT;
var VPAIDIntegrator = (_class$8 = (_temp$8 = _class2$2 = function (_VCPlayerObject) {
    inherits(VPAIDIntegrator, _VCPlayerObject);

    function VPAIDIntegrator(props) {
        classCallCheck(this, VPAIDIntegrator);

        var _this = possibleConstructorReturn(this, (VPAIDIntegrator.__proto__ || Object.getPrototypeOf(VPAIDIntegrator)).call(this, props));

        _this.type = 'VPAID';
        _this.VIEW_MODE = {
            NORMAL: 'normal',
            FULLSCREEN: 'fullscreen',
            THUMBNAIL: 'thumbnail'
        };
        _this.state = {
            ended: false,
            duration: null
        };
        var player = _this.props.player;
        // this.containerEl = this._createVPAIDContainerEl(player);

        player.one('vpaid:AdEnd', _this._handleAdEnd);
        player.one(DEFAULT$4.EVENT.AD_END, _this._handleAdEnd);
        return _this;
    }

    createClass(VPAIDIntegrator, [{
        key: '_handleAdEnd',
        value: function _handleAdEnd() {
            playercore.log.debug('<VPAIDIntegrator._handleAdEnd>');

            var tech = this.state.tech;

            if (tech) {
                tech.unloadAdUnit();
            }

            if (this.containerEl) {
                Dom.remove(this.containerEl);
                this.containerEl = null;
            }
        }
    }, {
        key: 'playAd',
        value: function playAd(vastResponse) {
            var _this2 = this;

            var self = this;
            var player = this.props.player;

            this.setState({
                vastResponse: vastResponse
            });

            return this._start().then(function () {
                return self._createAdPlayer();
            }).then(function () {
                return self._findSupportedTech();
            }).then(function () {
                return self._loadAdUnit();
            }).then(function () {
                return self._playAdUnit();
            }).then(function () {
                var playerAdUnit = _this2.state.playerAdUnit;
                var snapshot = player.vastAd.state.restorePlayer.state.snapshot;

                var volume = snapshot.muted ? 0 : snapshot.volume;
                playerAdUnit.muted(snapshot.muted);
                self.setAdVolume(volume);
                return self._finishPlaying();
            }).catch(function (e) {
                self._trackError(e);
                throw e;
            });
        }
    }, {
        key: '_createAdPlayer',
        value: function _createAdPlayer() {
            var self = this;
            var player = this.props.player;

            this.containerEl = this._createVPAIDContainerEl(player);

            return new Promise(function (resolve) {
                var playerAd = new PlayerAdUnit({ player: player });
                self.setState({
                    playerAdUnit: playerAd.getPlayerAdUnit()
                });
                resolve();
            });
        }
    }, {
        key: 'getSkipOffSet',
        value: function getSkipOffSet() {
            var skipoffset = this.props.skipoffset;


            if (!skipoffset) {
                return;
            }

            return skipoffset;
        }
    }, {
        key: 'skipAd',
        value: function skipAd() {
            var player = this.props.player;
            var _state = this.state,
                tracker = _state.tracker,
                adUnit = _state.adUnit;


            if (!player || !tracker) {
                return;
            }

            tracker.trackSkip();
            adUnit.skipAd(function (error$$1) {
                if (error$$1) {
                    player.trigger('vpaid-skip-ad-error', error$$1);
                }
            });
        }
    }, {
        key: 'getAdVolume',
        value: function getAdVolume() {
            var adUnit = this.state.adUnit;

            return new Promise(function (resolve, reject) {
                adUnit.getAdVolume(function (error$$1, currentVolume) {
                    if (error$$1) {
                        return reject(error$$1);
                    }

                    resolve(currentVolume);
                });
            });
        }
    }, {
        key: 'getAdExpanded',
        value: function getAdExpanded() {
            var adUnit = this.state.adUnit;

            return new Promise(function (resolve, reject) {
                adUnit.getAdExpanded(function (error$$1, expandAd) {
                    if (error$$1) {
                        reject(error$$1);
                    }
                    resolve(expandAd);
                });
            });
        }
    }, {
        key: 'setAdVolume',
        value: function setAdVolume(volume) {
            var adUnit = this.state.adUnit;

            adUnit.setAdVolume(volume, this._logError);
        }
    }, {
        key: 'pauseAd',
        value: function pauseAd() {
            var player = this.props.player;

            player.trigger('vpaid.pauseAd');
            player.pause(true); //we make sure that the video content gets stopped.
            player.trigger(DEFAULT$4.EVENT.AD_PAUSE_AD);
        }
    }, {
        key: 'resumeAd',
        value: function resumeAd() {
            var player = this.props.player;

            player.trigger('vpaid.resumeAd');
            player.trigger(DEFAULT$4.EVENT.AD_RESUME_AD);
        }
    }, {
        key: 'isPaused',
        value: function isPaused() {
            var paused = this.state.paused;

            return paused;
        }
    }, {
        key: 'getSrc',
        value: function getSrc() {
            var tech = this.state.tech;

            return tech.mediaFile;
        }
    }, {
        key: 'techName',
        value: function techName() {
            var tech = this.state.tech;

            return tech.name;
        }
    }, {
        key: 'getAdRemainingTime',
        value: function getAdRemainingTime() {
            var adUnit = this.state.adUnit;

            return new Promise(function (resolve, reject) {
                adUnit.getAdRemainingTime(function (error$$1, remainingTime) {
                    if (error$$1) {
                        return reject(error$$1);
                    }

                    resolve(remainingTime);
                });
            });
        }
    }, {
        key: 'getAdDuration',
        value: function getAdDuration() {
            var _state2 = this.state,
                adUnit = _state2.adUnit,
                duration = _state2.duration;

            if (duration) {
                return Promise.resolve(duration);
            }

            return new Promise(function (resolve, reject) {
                adUnit.getAdDuration(function (error$$1, duration) {
                    if (error$$1) {
                        return reject(error$$1);
                    }

                    resolve(duration);
                });
            });
        }
    }, {
        key: '_createVPAIDContainerEl',
        value: function _createVPAIDContainerEl() {
            var player = this.props.player;

            var containerEl = document.createElement('div');
            containerEl.style.display = 'none';
            Dom.addClass(containerEl, 'VPAID-container');

            player.overlay.append(containerEl);
            return containerEl;
        }
    }, {
        key: '_start',
        value: function _start() {
            return new Promise(function (resolve) {
                resolve();
            });
        }
    }, {
        key: '_findSupportedTech',
        value: function _findSupportedTech() {
            var vastResponse = this.state.vastResponse;

            var vpaidMediaFiles = vastResponse.mediaFiles.filter(VastUtil.isVPAID);
            var skippedSupportTechs = [];
            var tech = void 0;

            for (var i = 0, len = vpaidMediaFiles.length; i < len; i += 1) {
                var mediaFile = vpaidMediaFiles[i];
                var VPAIDTech = VastUtil.findSupportedVPAIDTech(mediaFile.type);
                if (!VPAIDTech) {
                    continue;
                }

                skippedSupportTechs.push({ mediaFile: mediaFile, tech: VPAIDTech });
            }

            if (skippedSupportTechs.length) {
                var firstTech = skippedSupportTechs[0];
                tech = new firstTech.tech(firstTech.mediaFile, this.props);
            }

            if (tech) {
                playercore.log.info('<VPAIDIntegrator.playAd> found tech: ', tech);
                this.setState({
                    tech: tech
                });
                return;
            }

            throw error.VPAID_INTEGRATOR_NOT_SUPPORT_MEDIAFILE;
        }
    }, {
        key: 'getPlayerAdUnit',
        value: function getPlayerAdUnit() {
            var playerAdUnit = this.state.playerAdUnit;

            return playerAdUnit;
        }
    }, {
        key: '_loadAdUnit',
        value: function _loadAdUnit() {
            playercore.log.debug('<VPAIDIntegrator._loadAdUnit>');

            var self = this;
            var _props = this.props,
                player = _props.player,
                responseTimeout = _props.responseTimeout;
            var _state3 = this.state,
                tech = _state3.tech,
                playerAdUnit = _state3.playerAdUnit;

            var videoEl = void 0;
            if (playercore.agent.isIOS) {
                videoEl = playerAdUnit.el().querySelector('.vjs-tech');
            } else {
                videoEl = playerAdUnit.state.videoEl;
            }
            // let vjsTechEl = player.el().querySelector('.vjs-tech');

            //player.reset();

            return new Promise(function (resolve, reject) {
                tech.loadAdUnit(self.containerEl, videoEl, function (error$$1, adUnit) {
                    if (error$$1) {
                        playercore.log.debug('<VPAIDIntegrator._loadAdUnit> error: ', error$$1);
                        reject(error$$1);
                        return;
                    }

                    try {
                        adUnit = self._createVPAIDAdUnitWrapper(adUnit, tech.mediaFile.src, responseTimeout);
                        player.trigger(tech.name + '-ad');
                        self.setState({
                            adUnit: adUnit
                        });
                        playercore.log.debug('<VPAIDIntegrator._loadAdUnit> success');
                        resolve();
                    } catch (e) {
                        playercore.log.debug('<VPAIDIntegrator._loadAdUnit> error: ', error$$1);
                        reject(error$$1);
                    }
                });
            });
        }
    }, {
        key: '_playAdUnit',
        value: function _playAdUnit() {
            playercore.log.debug('<VPAIDIntegrator._playAdUnit>');

            var self = this;
            return this._start().then(function () {
                return self._handshake();
            }).then(function () {
                return self._setupEvents();
            }).then(function () {
                return self._initAd();
            }).then(function () {
                return self._addSkipButton();
            }).then(function () {
                return self._addMuteButton();
            }).then(function () {
                return self._linkPlayerControls();
            }).then(function () {
                return self._playVideoEl();
            }).then(function () {
                return self._startAd();
            });
        }
    }, {
        key: '_playVideoEl',
        value: function _playVideoEl() {
            var _props2 = this.props,
                preLoaded = _props2.preLoaded,
                type = _props2.type,
                player = _props2.player,
                adsITVC = _props2.adsITVC;
            var vastResponse = this.state.vastResponse;

            return new Promise(function (resolve) {

                player.trigger('ad:ready', vastResponse);

                function playAd() {
                    resolve();
                }

                function _playAd() {
                    player.vastAd._setUpRestorePlayer();
                    player.trigger('snapshotPlayer');
                    player.vastAd._prepareForAd();
                    player.trigger(DEFAULT$4.EVENT.AD_START, player.vastAd);
                    player.vastAd.firstAd = true;
                    playAd();
                }

                function _preroll() {
                    if (player.paused()) {
                        player.one('play', _playAd);
                    } else {
                        _playAd();
                    }
                }

                if (!preLoaded && !player.vastAd.firstAd) {
                    _playAd();
                    return;
                }

                if (player.vastAd.firstAd) {
                    playAd();
                    return;
                }

                if (adsITVC && type === 'preroll') {
                    _playAd();
                    return;
                }

                if (type === 'preroll') {
                    player.one('timeupdate', _preroll);
                } else if (type === 'midroll') {
                    player.one(DEFAULT$4.EVENT.AD_ORDER_START_MIDROLL, _playAd);
                    player.trigger('prepareMidrollVastSuccess');
                } else if (type === 'postroll') {
                    player.one(DEFAULT$4.EVENT.AD_ORDER_START_POSTROLL, _playAd);
                    player.one(DEFAULT$4.EVENT.PLAYER_ENDED_CONTEND, function () {
                        player.trigger('preparePostrollSuccess');
                    });
                }
            });
        }
    }, {
        key: '_handshake',
        value: function _handshake() {
            playercore.log.debug('<VPAIDIntegrator._handshake>');

            var adUnit = this.state.adUnit;
            var VPAID_VERSION = this.props.VPAID_VERSION;


            function isSupportedVersion(version) {
                var majorNum = major(version);
                return majorNum >= 1 && majorNum <= 2;
            }

            function major(version) {
                var parts = version.split('.');
                return parseInt(parts[0], 10);
            }

            return new Promise(function (resolve, reject) {
                adUnit.handshakeVersion(VPAID_VERSION, function (error$$1, version) {
                    if (error$$1) {
                        reject(error$$1);
                        return;
                    }

                    if (version && isSupportedVersion(version)) {
                        resolve();
                        return;
                    }

                    reject(error.VPAID_INTEGRATOR_HANDSHAKE_NOT_SUPPORT_VERSION);
                });
            });
        }
    }, {
        key: '_initAd',
        value: function _initAd() {
            playercore.log.debug('<VPAIDIntegrator._initAd>');

            var self = this;
            var _state4 = this.state,
                adUnit = _state4.adUnit,
                vastResponse = _state4.vastResponse;
            var player = this.props.player;

            var tech = player.el().querySelector('.vjs-tech');
            // let videoEl_ = this.videoEl;

            var dimension = Dom.getDimension(tech);

            return new Promise(function (resolve, reject) {

                adUnit.initAd(dimension.width, dimension.height, self.VIEW_MODE.NORMAL, -1, {
                    AdParameters: vastResponse.adParameters || '',
                    playerID: player.id_
                }, function (error$$1) {
                    if (error$$1) {
                        reject(error.VPAID_INTEGRATOR_ERROR_WHILE_INIT.extendsWithData({
                            error: error$$1
                        }));
                        return;
                    }

                    self.setState({
                        inited: true
                    });

                    resolve();
                });
            });
        }
    }, {
        key: '_setupEvents',
        value: function _setupEvents() {
            playercore.log.debug('<VPAIDIntegrator._setupEvents>');

            var self = this;
            var tracker = this._createVASTTracker();
            var player = this.props.player;
            var _state5 = this.state,
                adUnit = _state5.adUnit,
                vastResponse = _state5.vastResponse;


            this.setState({
                tracker: tracker
            });

            adUnit.on('AdSkipped', function () {
                playercore.log.trace('<VPAIDIntegrator Event>', 'AdSkipped');

                player.trigger(DEFAULT$4.EVENT.VPAID_AD_SKIPPED);
                tracker.trackSkip();
            });

            adUnit.on('AdImpression', function () {
                playercore.log.trace('<VPAIDIntegrator Event>', 'AdImpression');

                player.trigger(DEFAULT$4.EVENT.VPAID_AD_IMPRESSION);
                tracker.trackImpressions();
            });

            adUnit.on('AdStarted', function () {
                playercore.log.trace('<VPAIDIntegrator Event>', 'AdStarted');

                player.trigger(DEFAULT$4.EVENT.VPAID_AD_STARTED);
                tracker.trackCreativeView();
                notifyPlayToPlayer();
            });

            adUnit.on('AdVideoStart', function () {
                playercore.log.trace('<VPAIDIntegrator Event>', 'AdVideoStart');

                player.trigger(DEFAULT$4.EVENT.VPAID_AD_VIDEO_START);
                tracker.trackStart();
                notifyPlayToPlayer();
            });

            adUnit.on('AdPlaying', function () {
                playercore.log.trace('<VPAIDIntegrator Event>', 'AdPlaying');

                player.trigger(DEFAULT$4.EVENT.VPAID_AD_PLAYING);
                player.trigger(DEFAULT$4.EVENT.AD_RESUME_AD);
                tracker.trackResume();
                notifyPlayToPlayer();
            });

            adUnit.on('AdPaused', function () {
                playercore.log.trace('<VPAIDIntegrator Event>', 'AdPaused');

                player.trigger(DEFAULT$4.EVENT.VPAID_AD_PAUSED);
                player.trigger(DEFAULT$4.EVENT.AD_PAUSE_AD);
                tracker.trackPause();
                notifyPauseToPlayer();
            });

            function notifyPlayToPlayer() {
                if (self.isPaused()) {
                    self.setState({
                        paused: false
                    });
                }
                // player.trigger('play');
            }

            function notifyPauseToPlayer() {
                self.setState({
                    paused: true
                });
                // player.trigger;
            }

            adUnit.on('AdVideoFirstQuartile', function () {
                playercore.log.trace('<VPAIDIntegrator Event>', 'AdVideoFirstQuartile');

                player.trigger(DEFAULT$4.EVENT.VPAID_AD_VIDEO_FIRST_QUARTILE);
                tracker.trackFirstQuartile();
            });

            adUnit.on('AdVideoMidpoint', function () {
                playercore.log.trace('<VPAIDIntegrator Event>', 'AdVideoMidpoint');

                player.trigger(DEFAULT$4.EVENT.VPAID_AD_VIDEO_MID_POINT);
                tracker.trackMidpoint();
            });

            adUnit.on('AdVideoThirdQuartile', function () {
                playercore.log.trace('<VPAIDIntegrator Event>', 'AdVideoThirdQuartile');

                player.trigger(DEFAULT$4.EVENT.VPAID_AD_VIDEO_THIRD_QUARTILE);
                tracker.trackThirdQuartile();
            });

            adUnit.on('AdVideoComplete', function () {
                playercore.log.trace('<VPAIDIntegrator Event>', 'AdVideoComplete');

                player.trigger(DEFAULT$4.EVENT.VPAID_AD_VIDEO_COMPLETE);
                tracker.trackComplete();
            });

            adUnit.on('AdClickThru', function (data) {
                playercore.log.trace('<VPAIDIntegrator Event>', 'AdClickThru');

                player.trigger(DEFAULT$4.EVENT.VPAID_AD_CLICK_THRU);
                var url = data.url;
                var playerHandles = data.playerHandles;
                var clickThruUrl = isNotEmptyString(url) ? url : generateClickThroughURL(vastResponse.clickThrough);
                //var clickThruUrl = utilities.isNotEmptyString(url) ? url : null;

                tracker.trackClick();
                if (playerHandles && clickThruUrl) {
                    window.open(clickThruUrl, '_blank');
                }

                function generateClickThroughURL(clickThroughMacro) {
                    var variables = {
                        //ASSETURI: adUnit.options.src,
                        CONTENTPLAYHEAD: 0 //In VPAID there is no method to know the current time from the adUnit
                    };

                    return clickThroughMacro ? VastUtil.parseURLMacro(clickThroughMacro, variables) : null;
                }
            });

            adUnit.on('AdUserAcceptInvitation', function () {
                playercore.log.trace('<VPAIDIntegrator Event>', 'AdUserAcceptInvitation');

                player.trigger(DEFAULT$4.EVENT.VPAID_AD_USER_ACCEPT_INVITATION);
                tracker.trackAcceptInvitation();
                tracker.trackAcceptInvitationLinear();
            });

            adUnit.on('AdUserClose', function () {
                playercore.log.trace('<VPAIDIntegrator Event>', 'AdUserClose');

                player.trigger(DEFAULT$4.EVENT.VPAID_AD_USER_CLOSE);
                tracker.trackClose();
                tracker.trackCloseLinear();
            });

            adUnit.on('AdUserMinimize', function () {
                playercore.log.trace('<VPAIDIntegrator Event>', 'AdUserMinimize');

                player.trigger(DEFAULT$4.EVENT.VPAID_AD_USER_MINIMIZE);
                tracker.trackCollapse();
            });

            adUnit.on('AdError', function () {
                playercore.log.trace('<VPAIDIntegrator Event>', 'AdError');

                player.trigger(DEFAULT$4.EVENT.VPAID_AD_ERROR);
                //NOTE: we track errors code 901, as noted in VAST 3.0
                tracker.trackErrorWithCode(901);
            });

            adUnit.on('AdVolumeChange', function () {
                playercore.log.trace('<VPAIDIntegrator Event>', 'AdVolumeChange');
                player.trigger(DEFAULT$4.EVENT.VPAID_AD_VOLUME_CHANGE);
                adUnit.getAdVolume(function (error$$1, currentVolume) {
                    if (currentVolume === 0) {
                        tracker.trackMute();
                    }

                    if (currentVolume > 0) {
                        tracker.trackUnmute();
                    }
                });
            });

            adUnit.on('AdExpandedChange', function () {
                playercore.log.trace('< VPAIDIntegrator Event > ', 'AdExpandedChange');
                adUnit.getAdExpanded(function (error$$1, expandAd) {
                    if (expandAd) {
                        tracker.trackExpand();
                    } else {
                        tracker.trackCollapse();
                    }
                });
            });

            var updateViewSizeThrottled = throttle(this._resizeAd, 100);
            var autoResize = this.props.autoResize;


            if (autoResize) {
                Dom.addEventListener(window, 'resize', updateViewSizeThrottled);
                Dom.addEventListener(window, 'orientationchange', updateViewSizeThrottled);
            }

            player.on('vast.resize', updateViewSizeThrottled);
            player.on('vpaid.pauseAd', pauseAdUnit);
            player.on('vpaid.resumeAd', resumeAdUnit);
            player.one(DEFAULT$4.EVENT.VPAID_AD_STARTED, updateViewSizeThrottled);
            player.one(DEFAULT$4.EVENT.VPAID_AD_IMPRESSION, updateViewSizeThrottled);

            player.one(DEFAULT$4.EVENT.AD_END, function () {
                player.off('vast.resize', updateViewSizeThrottled);
                player.off('vpaid.pauseAd', pauseAdUnit);
                player.off('vpaid.resumeAd', resumeAdUnit);
                player.off(DEFAULT$4.EVENT.VPAID_AD_STARTED, updateViewSizeThrottled);
                player.off(DEFAULT$4.EVENT.VPAID_AD_IMPRESSION, updateViewSizeThrottled);

                if (autoResize) {
                    Dom.removeEventListener(window, 'resize', updateViewSizeThrottled);
                    Dom.removeEventListener(window, 'orientationchange', updateViewSizeThrottled);
                }
            });

            /*** Local Functions ***/
            function pauseAdUnit() {
                adUnit.pauseAd(noop);
            }

            function resumeAdUnit() {
                adUnit.resumeAd(noop);
            }
        }
    }, {
        key: '_addSkipButton',
        value: function _addSkipButton() {}
    }, {
        key: '_addMuteButton',
        value: function _addMuteButton() {}
    }, {
        key: '_linkPlayerControls',
        value: function _linkPlayerControls() {}
    }, {
        key: '_startAd',
        value: function _startAd() {
            playercore.log.debug('<VPAIDIntegrator._startAd>');
            var player = this.props.player;
            var adUnit = this.state.adUnit;

            this.containerEl.style.display = '';

            return new Promise(function (resolve, reject) {
                adUnit.startAd(function (error$$1) {
                    if (error$$1) {
                        playercore.log.debug('<VPAIDIntegrator._startAd> error: ', error$$1);
                        reject(error$$1);
                        return;
                    }

                    playercore.log.debug('<VPAIDIntegrator._startAd> success');
                    player.trigger(DEFAULT$4.EVENT.VPAID_AD_START);
                    resolve();
                });
            });
        }
    }, {
        key: '_finishPlaying',
        value: function _finishPlaying() {
            playercore.log.debug('<VPAIDIntegrator._finishPlaying>');

            var self = this;
            var player = this.props.player;
            var adUnit = this.state.adUnit;


            return new Promise(function (resolve, reject) {

                function adStopped(error$$1) {
                    var ended = self.state.ended;


                    if (ended) {
                        return;
                    }

                    player.off('vpaid-skip-ad-error');

                    adUnit.off('AdStopped');
                    adUnit.off('AdVideoComplete');
                    adUnit.off('AdError');

                    self.setState({
                        ended: true
                    });

                    player.trigger('vpaid:AdEnd');

                    if (error$$1) {
                        return reject(error$$1);
                    }
                    resolve();
                }

                adUnit.on('AdStopped', function () {
                    adStopped();
                });

                adUnit.on('AdVideoComplete', function () {
                    adStopped();
                });

                adUnit.on('AdError', function (error$$1) {
                    adStopped(error.VPAID_INTEGRATOR_ERROR_WHILE_WAITING_FINISH.extendsWithData({
                        error: error$$1
                    }));
                });

                player.one('vpaid-skip-ad-error', function (evt, error$$1) {
                    adStopped(error$$1);
                });
            });
        }
    }, {
        key: '_createVPAIDAdUnitWrapper',
        value: function _createVPAIDAdUnitWrapper(adUnit, src, responseTimeout) {
            var player = this.props.player;

            return new VPAIDAdUnitWrapper({
                player: player,
                adUnit: adUnit,
                src: src,
                responseTimeout: responseTimeout
            });
        }
    }, {
        key: '_createVASTTracker',
        value: function _createVASTTracker() {
            var _state6 = this.state,
                tech = _state6.tech,
                vastResponse = _state6.vastResponse;

            return new VASTTracker(tech.mediaFile.src, vastResponse);
        }
    }, {
        key: '_resizeAd',
        value: function _resizeAd() {
            var player = this.props.player;
            var adUnit = this.state.adUnit;

            var VIEW_MODE = this.VIEW_MODE;

            var tech = player.el().querySelector('.vjs-tech');
            // let videoEl_ = this.videoEl;
            var dimension = Dom.getDimension(tech);

            var MODE = player.isFullscreen() ? VIEW_MODE.FULLSCREEN : VIEW_MODE.NORMAL;
            adUnit.resizeAd(dimension.width, dimension.height, MODE, this._logError);

            playercore.log.info('resizeAd', 'width:', dimension.width, 'height:', dimension.height);
        }
    }, {
        key: '_logError',
        value: function _logError(error$$1) {
            if (error$$1) {
                playercore.log.error('ERROR: ' + error$$1.message, error$$1);
            }
        }
    }, {
        key: 'expandAd',
        value: function expandAd() {
            var player = this.props.player;
            var adUnit = this.state.adUnit;


            if (!player) {
                return;
            }

            adUnit.expandAd(function () {
                //ignore
            });
        }
    }, {
        key: 'collapseAd',
        value: function collapseAd() {
            var player = this.props.player;
            var adUnit = this.state.adUnit;


            if (!player) {
                return;
            }

            adUnit.collapseAd(function () {
                //ignore
            });
        }
    }, {
        key: '_trackError',
        value: function _trackError(error$$1) {
            var vastResponse = this.state.vastResponse;

            VastUtil.track(vastResponse.errorURLMacros, { ERRORCODE: error$$1.code || 901 });
        }
    }]);
    return VPAIDIntegrator;
}(VCPlayerObject$1), _class2$2.defaultProps = {
    responseTimeout: 5000,
    VPAID_VERSION: '2.0',
    autoResize: true
}, _temp$8), (_applyDecoratedDescriptor$2(_class$8.prototype, '_handleAdEnd', [playercore.autobind], Object.getOwnPropertyDescriptor(_class$8.prototype, '_handleAdEnd'), _class$8.prototype), _applyDecoratedDescriptor$2(_class$8.prototype, '_resizeAd', [playercore.autobind], Object.getOwnPropertyDescriptor(_class$8.prototype, '_resizeAd'), _class$8.prototype), _applyDecoratedDescriptor$2(_class$8.prototype, '_logError', [playercore.autobind], Object.getOwnPropertyDescriptor(_class$8.prototype, '_logError'), _class$8.prototype)), _class$8);

/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * IMA SDK integration plugin for Video.js. For more information see
 * https://www.github.com/googleads/videojs-ima
 */

/*eslint indent: ["error", 2]*/

/**
  * Implementation of the IMA SDK for the plugin.
  *
  * @param {Object} controller Reference to the parent controller.
  *
  * @constructor
  * @struct
  * @final
  */
var SdkImpl = function SdkImpl(controller) {
  /**
   * Plugin controller.
   */
  this.controller = controller;

  /**
   * IMA SDK AdDisplayContainer.
   */
  this.adDisplayContainer = null;

  /**
   * True if the AdDisplayContainer has been initialized. False otherwise.
   */
  this.adDisplayContainerInitialized = false;

  /**
   * IMA SDK AdsLoader
   */
  this.adsLoader = null;

  /**
   * IMA SDK AdsManager
   */
  this.adsManager = null;

  /**
   * IMA SDK AdsRenderingSettings.
   */
  this.adsRenderingSettings = null;

  /**
   * Ad tag URL. Should return VAST, VMAP, or ad rules.
   */
  this.adTagUrl = null;

  /**
   * VAST, VMAP, or ad rules response. Used in lieu of fetching a response
   * from an ad tag URL.
   */
  this.adsResponse = null;

  /**
   * Current IMA SDK Ad.
   */
  this.currentAd = null;

  /**
   * Timer used to track ad progress.
   */
  this.adTrackingTimer = null;

  /**
   * True if ALL_ADS_COMPLETED has fired, false until then.
   */
  this.allAdsCompleted = false;

  /**
   * True if ads are currently displayed, false otherwise.
   * True regardless of ad pause state if an ad is currently being displayed.
   */
  this.adsActive = false;

  /**
   * True if ad is currently playing, false if ad is paused or ads are not
   * currently displayed.
   */
  this.adPlaying = false;

  /**
   * True if the ad is muted, false otherwise.
   */
  this.adMuted = false;

  /**
   * Listener to be called to trigger manual ad break playback.
   */
  this.adBreakReadyListener = undefined;

  /**
   * Tracks whether or not we have already called adsLoader.contentComplete().
   */
  this.contentCompleteCalled = false;

  /**
   * Stores the dimensions for the ads manager.
   */
  this.adsManagerDimensions = {
    width: 0,
    height: 0
  };

  /**
   * Boolean flag to enable manual ad break playback.
   */
  this.autoPlayAdBreaks = true;
  if (this.controller.getSettings().autoPlayAdBreaks === false) {
    this.autoPlayAdBreaks = false;
  }

  // Set SDK settings from plugin settings.
  if (this.controller.getSettings().locale) {
    /* eslint no-undef: 'error' */
    /* global google */
    google.ima.settings.setLocale(this.controller.getSettings().locale);
  }
  if (this.controller.getSettings().disableFlashAds) {
    google.ima.settings.setDisableFlashAds(this.controller.getSettings().disableFlashAds);
  }
  if (this.controller.getSettings().disableCustomPlaybackForIOS10Plus) {
    google.ima.settings.setDisableCustomPlaybackForIOS10Plus(this.controller.getSettings().disableCustomPlaybackForIOS10Plus);
  }

  this.initAdObjects();

  if (this.controller.getSettings().adTagUrl || this.controller.getSettings().adsResponse) {
    this.requestAds();
  }
};

/**
 * Creates and initializes the IMA SDK objects.
 */
SdkImpl.prototype.initAdObjects = function () {
  this.adDisplayContainer = new google.ima.AdDisplayContainer(this.controller.getAdContainerDiv(), this.controller.getContentPlayer());

  this.adsLoader = new google.ima.AdsLoader(this.adDisplayContainer);

  this.adsLoader.getSettings().setVpaidMode(google.ima.ImaSdkSettings.VpaidMode.ENABLED);
  if (this.controller.getSettings().vpaidAllowed == false) {
    this.adsLoader.getSettings().setVpaidMode(google.ima.ImaSdkSettings.VpaidMode.DISABLED);
  }
  if (this.controller.getSettings().vpaidMode) {
    this.adsLoader.getSettings().setVpaidMode(this.controller.getSettings().vpaidMode);
  }

  if (this.controller.getSettings().locale) {
    this.adsLoader.getSettings().setLocale(this.controller.getSettings().locale);
  }

  if (this.controller.getSettings().numRedirects) {
    this.adsLoader.getSettings().setNumRedirects(this.controller.getSettings().numRedirects);
  }

  this.adsLoader.getSettings().setPlayerType('vcplayer');
  this.adsLoader.getSettings().setPlayerVersion('2.0');
  this.adsLoader.getSettings().setAutoPlayAdBreaks(this.autoPlayAdBreaks);

  this.adsLoader.addEventListener(google.ima.AdsManagerLoadedEvent.Type.ADS_MANAGER_LOADED, this.onAdsManagerLoaded.bind(this), false);
  this.adsLoader.addEventListener(google.ima.AdErrorEvent.Type.AD_ERROR, this.onAdsLoaderError.bind(this), false);
};

/**
 * Creates the AdsRequest and request ads through the AdsLoader.
 */
SdkImpl.prototype.requestAds = function () {
  var adsRequest = new google.ima.AdsRequest();
  if (this.controller.getSettings().adTagUrl) {
    adsRequest.adTagUrl = this.controller.getSettings().adTagUrl;
  } else {
    adsRequest.adsResponse = this.controller.getSettings().adsResponse;
  }
  if (this.controller.getSettings().forceNonLinearFullSlot) {
    adsRequest.forceNonLinearFullSlot = true;
  }

  adsRequest.linearAdSlotWidth = this.controller.getPlayerWidth();
  adsRequest.linearAdSlotHeight = this.controller.getPlayerHeight();
  adsRequest.nonLinearAdSlotWidth = this.controller.getSettings().nonLinearWidth || this.controller.getPlayerWidth();
  adsRequest.nonLinearAdSlotHeight = this.controller.getSettings().nonLinearHeight || this.controller.getPlayerHeight();
  adsRequest.setAdWillAutoPlay(this.controller.adsWillAutoplay());
  adsRequest.setAdWillPlayMuted(this.controller.adsWillPlayMuted());

  this.adsLoader.requestAds(adsRequest);
};

/**
 * Listener for the ADS_MANAGER_LOADED event. Creates the AdsManager,
 * sets up event listeners, and triggers the 'adsready' event for
 * videojs-ads-contrib.
 *
 * @param {google.ima.AdsManagerLoadedEvent} adsManagerLoadedEvent Fired when
 *     the AdsManager loads.
 */
SdkImpl.prototype.onAdsManagerLoaded = function (adsManagerLoadedEvent) {
  this.createAdsRenderingSettings();

  this.adsManager = adsManagerLoadedEvent.getAdsManager(this.controller.getContentPlayheadTracker(), this.adsRenderingSettings);

  this.adsManager.addEventListener(google.ima.AdErrorEvent.Type.AD_ERROR, this.onAdError.bind(this));
  this.adsManager.addEventListener(google.ima.AdEvent.Type.AD_BREAK_READY, this.onAdBreakReady.bind(this));
  this.adsManager.addEventListener(google.ima.AdEvent.Type.CONTENT_PAUSE_REQUESTED, this.onContentPauseRequested.bind(this));
  this.adsManager.addEventListener(google.ima.AdEvent.Type.CONTENT_RESUME_REQUESTED, this.onContentResumeRequested.bind(this));
  this.adsManager.addEventListener(google.ima.AdEvent.Type.ALL_ADS_COMPLETED, this.onAllAdsCompleted.bind(this));

  this.adsManager.addEventListener(google.ima.AdEvent.Type.LOADED, this.onAdLoaded.bind(this));
  this.adsManager.addEventListener(google.ima.AdEvent.Type.STARTED, this.onAdStarted.bind(this));
  this.adsManager.addEventListener(google.ima.AdEvent.Type.CLICK, this.onAdPaused.bind(this));
  this.adsManager.addEventListener(google.ima.AdEvent.Type.COMPLETE, this.onAdComplete.bind(this));
  this.adsManager.addEventListener(google.ima.AdEvent.Type.SKIPPED, this.onAdComplete.bind(this));

  if (this.controller.getIsMobile()) {
    // Show/hide controls on pause and resume (triggered by tap).
    this.adsManager.addEventListener(google.ima.AdEvent.Type.PAUSED, this.onAdPaused.bind(this));
    this.adsManager.addEventListener(google.ima.AdEvent.Type.RESUMED, this.onAdResumed.bind(this));
  }

  if (!this.autoPlayAdBreaks) {
    this.initAdsManager();
  }

  this.controller.onAdsReady();

  if (this.controller.getSettings().adsManagerLoadedCallback) {
    this.controller.getSettings().adsManagerLoadedCallback();
  }
};

/**
 * Listener for errors fired by the AdsLoader.
 * @param {google.ima.AdErrorEvent} event The error event thrown by the
 *     AdsLoader. See
 *     https://developers.google.com/interactive-media-ads/docs/sdks/html5/v3/apis#ima.AdError.Type
 */
SdkImpl.prototype.onAdsLoaderError = function (event) {
  window.console.warn('AdsLoader error: ' + event.getError());
  this.controller.onErrorLoadingAds(event);
  if (this.adsManager) {
    this.adsManager.destroy();
  }
};

/**
 * Initialize the ads manager.
 */
SdkImpl.prototype.initAdsManager = function () {
  try {
    var initWidth = this.controller.getPlayerWidth();
    var initHeight = this.controller.getPlayerHeight();
    this.adsManagerDimensions.width = initWidth;
    this.adsManagerDimensions.height = initHeight;
    this.adsManager.init(initWidth, initHeight, google.ima.ViewMode.NORMAL);
    this.adsManager.setVolume(this.controller.getPlayerVolume());
    if (!this.adDisplayContainerInitialized) {
      this.adDisplayContainer.initialize();
      this.adDisplayContainer.initialized = true;
    }
  } catch (adError) {
    this.onAdError(adError);
  }
};

/**
 * Create AdsRenderingSettings for the IMA SDK.
 */
SdkImpl.prototype.createAdsRenderingSettings = function () {
  this.adsRenderingSettings = new google.ima.AdsRenderingSettings();
  this.adsRenderingSettings.restoreCustomPlaybackStateOnAdBreakComplete = true;
  if (this.controller.getSettings().adsRenderingSettings) {
    for (var setting in this.controller.getSettings().adsRenderingSettings) {
      if (setting !== '') {
        this.adsRenderingSettings[setting] = this.controller.getSettings().adsRenderingSettings[setting];
      }
    }
  }
};

/**
 * Listener for errors thrown by the AdsManager.
 * @param {google.ima.AdErrorEvent} adErrorEvent The error event thrown by
 *     the AdsManager.
 */
SdkImpl.prototype.onAdError = function (adErrorEvent) {
  var errorMessage = adErrorEvent.getError !== undefined ? adErrorEvent.getError() : adErrorEvent.stack;
  window.console.warn('Ad error: ' + errorMessage);
  this.adsManager.destroy();
  this.controller.onAdError(adErrorEvent);
};

/**
 * Listener for AD_BREAK_READY. Passes event on to publisher's listener.
 * @param {google.ima.AdEvent} adEvent AdEvent thrown by the AdsManager.
 */
SdkImpl.prototype.onAdBreakReady = function (adEvent) {
  this.adBreakReadyListener(adEvent);
};

/**
 * Pauses the content video and displays the ad container so ads can play.
 * @param {google.ima.AdEvent} adEvent The AdEvent thrown by the AdsManager.
 */
SdkImpl.prototype.onContentPauseRequested = function (adEvent) {
  this.adsActive = true;
  this.adPlaying = true;
  this.controller.onAdBreakStart(adEvent);
};

/**
 * Resumes content video and hides the ad container.
 * @param {google.ima.AdEvent} adEvent The AdEvent thrown by the AdsManager.
 */
SdkImpl.prototype.onContentResumeRequested = function () {
  this.adsActive = false;
  this.adPlaying = false;
  this.controller.onAdBreakEnd();
  // Hide controls in case of future non-linear ads. They'll be unhidden in
  // content_pause_requested.
};

/**
 * Records that ads have completed and calls contentAndAdsEndedListeners
 * if content is also complete.
 * @param {google.ima.AdEvent} adEvent The AdEvent thrown by the AdsManager.
 */
SdkImpl.prototype.onAllAdsCompleted = function () {
  this.allAdsCompleted = true;
  this.controller.onAllAdsCompleted();
};

/**
 * Starts the content video when a non-linear ad is loaded.
 * @param {google.ima.AdEvent} adEvent The AdEvent thrown by the AdsManager.
 */
SdkImpl.prototype.onAdLoaded = function (adEvent) {
  if (!adEvent.getAd().isLinear()) {
    this.controller.onNonLinearAdLoad();
    this.controller.playContent();
  }
};

/**
 * Starts the interval timer to check the current ad time when an ad starts
 * playing.
 * @param {google.ima.AdEvent} adEvent The AdEvent thrown by the AdsManager.
 */
SdkImpl.prototype.onAdStarted = function (adEvent) {
  this.currentAd = adEvent.getAd();
  if (this.currentAd.isLinear()) {
    this.adTrackingTimer = setInterval(this.onAdPlayheadTrackerInterval.bind(this), 250);
    this.controller.onLinearAdStart();
  } else {
    this.controller.onNonLinearAdStart();
  }
};

/**
 * Handles an ad click. Puts the player UI in a paused state.
 */
SdkImpl.prototype.onAdPaused = function () {
  this.controller.onAdsPaused();
};

/**
 * Syncs controls when an ad resumes.
 * @param {google.ima.AdEvent} adEvent The AdEvent thrown by the AdsManager.
 */
SdkImpl.prototype.onAdResumed = function () {
  this.controller.onAdsResumed();
};

/**
 * Clears the interval timer for current ad time when an ad completes.
 */
SdkImpl.prototype.onAdComplete = function () {
  if (this.currentAd.isLinear()) {
    clearInterval(this.adTrackingTimer);
  }
};

/**
 * Gets the current time and duration of the ad and calls the method to
 * update the ad UI.
 */
SdkImpl.prototype.onAdPlayheadTrackerInterval = function () {
  var remainingTime = this.adsManager.getRemainingTime();
  var duration = this.currentAd.getDuration();
  var currentTime = duration - remainingTime;
  currentTime = currentTime > 0 ? currentTime : 0;
  var totalAds = 0;
  var adPosition = void 0;
  if (this.currentAd.getAdPodInfo()) {
    adPosition = this.currentAd.getAdPodInfo().getAdPosition();
    totalAds = this.currentAd.getAdPodInfo().getTotalAds();
  }

  this.controller.onAdPlayheadUpdated(currentTime, remainingTime, duration, adPosition, totalAds);
};

/**
 * Called by the player wrapper when content completes.
 */
SdkImpl.prototype.onContentComplete = function () {
  if (this.adsLoader) {
    this.adsLoader.contentComplete();
    this.contentCompleteCalled = true;
  }

  if (this.adsManager && this.adsManager.getCuePoints() && !this.adsManager.getCuePoints().includes(-1)) {
    this.controller.onNoPostroll();
  }

  if (this.allAdsCompleted) {
    this.controller.onContentAndAdsCompleted();
  }
};

/**
 * Called when the player is disposed.
 */
SdkImpl.prototype.onPlayerDisposed = function () {
  if (this.adTrackingTimer) {
    clearInterval(this.adTrackingTimer);
  }
  if (this.adsManager) {
    this.adsManager.destroy();
    this.adsManager = null;
  }
};

SdkImpl.prototype.onPlayerReadyForPreroll = function () {
  if (this.autoPlayAdBreaks) {
    this.initAdsManager();
    try {
      this.controller.showAdContainer();
      // Sync ad volume with content volume.
      this.adsManager.setVolume(this.controller.getPlayerVolume());
      this.adsManager.start();
    } catch (adError) {
      this.onAdError(adError);
    }
  }
};

SdkImpl.prototype.onPlayerEnterFullscreen = function () {
  if (this.adsManager) {
    this.adsManager.resize(window.screen.width, window.screen.height, google.ima.ViewMode.FULLSCREEN);
  }
};

SdkImpl.prototype.onPlayerExitFullscreen = function () {
  if (this.adsManager) {
    this.adsManager.resize(this.controller.getPlayerWidth(), this.controller.getPlayerHeight(), google.ima.ViewMode.NORMAL);
  }
};

/**
 * Called when the player volume changes.
 *
 * @param {number} volume The new player volume.
 */
SdkImpl.prototype.onPlayerVolumeChanged = function (volume) {
  if (this.adsManager) {
    this.adsManager.setVolume(volume);
  }

  if (volume == 0) {
    this.adMuted = true;
  } else {
    this.adMuted = false;
  }
};

/**
 * Called when the player wrapper detects that the player has been resized.
 *
 * @param {number} width The post-resize width of the player.
 * @param {number} height The post-resize height of the player.
 */
SdkImpl.prototype.onPlayerResize = function (width, height) {
  if (this.adsManager) {
    this.adsManagerDimensions.width = width;
    this.adsManagerDimensions.height = height;
    /* global google */
    /* eslint no-undef: 'error' */
    this.adsManager.resize(width, height, google.ima.ViewMode.NORMAL);
  }
};

/**
 * @return {Object} The current ad.
 */
SdkImpl.prototype.getCurrentAd = function () {
  return this.currentAd;
};

/**
 * Listener JSDoc for ESLint. This listener can be passed to
 * setAdBreakReadyListener.
 * @callback listener
 */

/**
 * Sets the listener to be called to trigger manual ad break playback.
 * @param {listener} listener The listener to be called to trigger manual ad
 *     break playback.
 */
SdkImpl.prototype.setAdBreakReadyListener = function (listener) {
  this.adBreakReadyListener = listener;
};

/**
 * @return {boolean} True if an ad is currently playing. False otherwise.
 */
SdkImpl.prototype.isAdPlaying = function () {
  return this.adPlaying;
};

/**
 * @return {boolean} True if an ad is currently playing. False otherwise.
 */
SdkImpl.prototype.isAdMuted = function () {
  return this.adMuted;
};

/**
 * Pause ads.
 */
SdkImpl.prototype.pauseAds = function () {
  this.adsManager.pause();
  this.adPlaying = false;
};

/**
 * Resume ads.
 */
SdkImpl.prototype.resumeAds = function () {
  this.adsManager.resume();
  this.adPlaying = true;
};

/**
 * Unmute ads.
 */
SdkImpl.prototype.unmute = function () {
  this.adsManager.setVolume(1);
  this.adMuted = false;
};

/**
 * Mute ads.
 */
SdkImpl.prototype.mute = function () {
  this.adsManager.setVolume(0);
  this.adMuted = true;
};

/**
 * Set the volume of the ads. 0-1.
 *
 * @param {number} volume The new volume.
 */
SdkImpl.prototype.setVolume = function (volume) {
  this.adsManager.setVolume(volume);
  if (volume == 0) {
    this.adMuted = true;
  } else {
    this.adMuted = false;
  }
};

/**
 * Initializes the AdDisplayContainer. On mobile, this must be done as a
 * result of user action.
 */
SdkImpl.prototype.initializeAdDisplayContainer = function () {
  this.adDisplayContainerInitialized = true;
  this.adDisplayContainer.initialize();
};

/**
 * Called by publishers in manual ad break playback mode to start an ad
 * break.
 */
SdkImpl.prototype.playAdBreak = function () {
  if (!this.autoPlayAdBreaks) {
    this.controller.showAdContainer();
    // Sync ad volume with content volume.
    this.adsManager.setVolume(this.controller.getPlayerVolume());
    this.adsManager.start();
  }
};

/**
 * Callback JSDoc for ESLint. This callback can be passed to addEventListener.
 * @callback callback
 */

/**
 * Ads an EventListener to the AdsManager. For a list of available events,
 * see
 * https://developers.google.com/interactive-media-ads/docs/sdks/html5/v3/apis#ima.AdEvent.Type
 * @param {google.ima.AdEvent.Type} event The AdEvent.Type for which to
 *     listen.
 * @param {callback} callback The method to call when the event is fired.
 */
SdkImpl.prototype.addEventListener = function (event, callback) {
  if (this.adsManager) {
    this.adsManager.addEventListener(event, callback);
  }
};

SdkImpl.prototype.removeEventListener = function (event, callback) {
  if (this.adsManager) {
    this.adsManager.removeEventListener(event, callback);
  }
};

/**
 * Returns the instance of the AdsManager.
 * @return {google.ima.AdsManager} The AdsManager being used by the plugin.
 */
SdkImpl.prototype.getAdsManager = function () {
  return this.adsManager;
};

/**
 * Reset the SDK implementation.
 */
SdkImpl.prototype.reset = function () {
  this.adsActive = false;
  this.adPlaying = false;
  if (this.adTrackingTimer) {
    // If this is called while an ad is playing, stop trying to get that
    // ad's current time.
    clearInterval(this.adTrackingTimer);
  }
  if (this.adsManager) {
    this.adsManager.destroy();
    this.adsManager = null;
  }
  if (this.adsLoader && !this.contentCompleteCalled) {
    this.adsLoader.contentComplete();
  }
  this.contentCompleteCalled = false;
  this.allAdsCompleted = false;
};

var _class$12;
var _temp$11;

var Controller = (_temp$11 = _class$12 = function (_VCPlayerObject) {
    inherits(Controller, _VCPlayerObject);

    /**
     * Định nghĩa kiểu của props
     * @type {Object}
     */
    function Controller(props) {
        classCallCheck(this, Controller);

        var _this = possibleConstructorReturn(this, (Controller.__proto__ || Object.getPrototypeOf(Controller)).call(this, props));

        _this.settings = {
            //autoPlayAdBreaks: false,
            locale: null,
            disableFlashAds: true,
            disableCustomPlaybackForIOS10Plus: true,
            adTagUrl: null,
            adsResponse: null,
            vpaidAllowed: true,
            vpaidMode: true,
            numRedirects: 5,
            forceNonLinearFullSlot: false,
            nonLinearWidth: null,
            nonLinearHeight: null,
            adsManagerLoadedCallback: null,
            adsRenderingSettings: null,

            debug: false,
            timeout: 5000,
            prerollTimeout: 1000,
            adLabel: 'Advertisement',
            showControlsForJSAds: true,

            AdContainer: null,
            videoEl: null
        };

        _this.settings = _extends({}, _this.settings, _this.props);

        _this.sdkImpl = new SdkImpl(_this);
        return _this;
    }

    createClass(Controller, [{
        key: 'requestAds',
        value: function requestAds() {
            this.sdkImpl.requestAds();
        }
    }, {
        key: 'onPlayerReadyForPreroll',
        value: function onPlayerReadyForPreroll() {
            this.sdkImpl.onPlayerReadyForPreroll();
        }
    }, {
        key: 'initializeAdDisplayContainer',
        value: function initializeAdDisplayContainer() {
            this.sdkImpl.initializeAdDisplayContainer();
        }
    }, {
        key: 'playAdBreak',
        value: function playAdBreak() {
            this.sdkImpl.playAdBreak();
        }
    }, {
        key: 'addEventListener',
        value: function addEventListener(event, callback) {
            this.sdkImpl.addEventListener(event, callback);
        }
    }, {
        key: 'removeEventListener',
        value: function removeEventListener(event, callback) {
            this.sdkImpl.removeEventListener(event, callback);
        }
    }, {
        key: 'getAdsManager',
        value: function getAdsManager() {
            return this.sdkImpl.getAdsManager();
        }

        ////////////////////////////

    }, {
        key: 'getSettings',
        value: function getSettings() {
            return this.settings;
        }
    }, {
        key: 'getAdContainerDiv',
        value: function getAdContainerDiv() {
            return this.settings.AdContainer;
        }
    }, {
        key: 'getContentPlayer',
        value: function getContentPlayer() {
            return this.settings.videoEl;
        }
    }, {
        key: 'getPlayerWidth',
        value: function getPlayerWidth() {
            var player = this.props.player;

            var tech = player.el().querySelector('.vjs-tech');
            var dimension = Dom.getDimension(tech);
            return dimension.width;
        }
    }, {
        key: 'getPlayerHeight',
        value: function getPlayerHeight() {
            var player = this.props.player;

            var tech = player.el().querySelector('.vjs-tech');
            var dimension = Dom.getDimension(tech);
            return dimension.height;
        }
    }, {
        key: 'adsWillAutoplay',
        value: function adsWillAutoplay() {}
    }, {
        key: 'adsWillPlayMuted',
        value: function adsWillPlayMuted() {}
    }, {
        key: 'getContentPlayheadTracker',
        value: function getContentPlayheadTracker() {
            return {
                currentTime: 0,
                previousTime: 0,
                seeking: false,
                duration: 0
            };
        }
    }, {
        key: 'getIsMobile',
        value: function getIsMobile() {
            return playercore.agent.isMobile;
        }

        /**
         * abstract
         * @return {[type]} [description]
         */

    }, {
        key: 'onAdsReady',
        value: function onAdsReady() {
            playercore.log.debug('<ImaController.onAdsReady>');
        }

        /**
         * abstract
         * @return {[type]} [description]
         */

    }, {
        key: 'onErrorLoadingAds',
        value: function onErrorLoadingAds() {
            playercore.log.debug('<ImaController.onErrorLoadingAds>');
        }
    }, {
        key: 'getPlayerVolume',
        value: function getPlayerVolume() {
            return 1;
        }
    }, {
        key: 'onAdError',
        value: function onAdError(e) {
            playercore.log.debug('<ImaController.onAdError>', e);
        }
    }, {
        key: 'onAdBreakStart',
        value: function onAdBreakStart() {
            playercore.log.debug('<ImaController.onAdBreakStart>');
        }
    }, {
        key: 'onAdBreakEnd',
        value: function onAdBreakEnd() {
            playercore.log.debug('<ImaController.onAdBreakEnd>');
        }
    }, {
        key: 'onAllAdsCompleted',
        value: function onAllAdsCompleted() {
            playercore.log.debug('<ImaController.onAllAdsCompleted>');
        }
    }, {
        key: 'onNonLinearAdLoad',
        value: function onNonLinearAdLoad() {
            playercore.log.debug('<ImaController.onNonLinearAdLoad>');
        }
    }, {
        key: 'onLinearAdStart',
        value: function onLinearAdStart() {
            playercore.log.debug('<ImaController.onLinearAdStart>');
        }
    }, {
        key: 'onNonLinearAdStart',
        value: function onNonLinearAdStart() {
            playercore.log.debug('<ImaController.onNonLinearAdStart>');
        }
    }, {
        key: 'onAdsPaused',
        value: function onAdsPaused() {
            playercore.log.debug('<ImaController.onAdsPaused>');
        }
    }, {
        key: 'onAdsResumed',
        value: function onAdsResumed() {
            playercore.log.debug('<ImaController.onAdsResumed>');
        }
    }, {
        key: 'onAdPlayheadUpdated',
        value: function onAdPlayheadUpdated() {
            playercore.log.debug('<ImaController.onAdPlayheadUpdated>');
        }
    }, {
        key: 'onContentAndAdsCompleted',
        value: function onContentAndAdsCompleted() {
            playercore.log.debug('<ImaController.onContentAndAdsCompleted>');
        }
    }, {
        key: 'onNoPostroll',
        value: function onNoPostroll() {
            playercore.log.debug('<ImaController.onNoPostroll>');
        }
    }, {
        key: 'showAdContainer',
        value: function showAdContainer() {
            playercore.log.debug('<ImaController.showAdContainer>');
        }
    }, {
        key: 'playContent',
        value: function playContent() {
            playercore.log.debug('<ImaController.playContent>');
        }

        /**
         * Pauses the ad.
         */

    }, {
        key: 'pauseAd',
        value: function pauseAd() {
            this.sdkImpl.pauseAds();
        }

        /**
         * Resumes the ad.
         */

    }, {
        key: 'resumeAd',
        value: function resumeAd() {
            this.sdkImpl.resumeAds();
        }
    }]);
    return Controller;
}(VCPlayerObject$1), _class$12.propTypes = {
    player: playercore.PropTypes.object.isRequired
}, _temp$11);

var _class$11;
var _temp$10;

var ImaAdUnit = (_temp$10 = _class$11 = function (_VCPlayerObject) {
    inherits(ImaAdUnit, _VCPlayerObject);

    function ImaAdUnit(props) {
        classCallCheck(this, ImaAdUnit);
        return possibleConstructorReturn(this, (ImaAdUnit.__proto__ || Object.getPrototypeOf(ImaAdUnit)).call(this, props));
    }
    /**
     * Định nghĩa kiểu của props
     * @type {Object}
     */


    createClass(ImaAdUnit, [{
        key: 'loadAdUnit',
        value: function loadAdUnit(AdContainer, videoEl, callback) {
            playercore.log.debug('<ImaAdUnit.loadAdUnit>');
            var controller = this.controller = new Controller(_extends({}, this.props, { AdContainer: AdContainer, videoEl: videoEl }));
            controller.onAdsReady = function () {
                playercore.log.debug('<ImaAdUnit.loadAdUnit> success');
                callback();
            };

            controller.onErrorLoadingAds = function (e) {
                playercore.log.debug('<ImaAdUnit.loadAdUnit> error', e);
                callback(e);
            };
        }
    }, {
        key: 'startAd',
        value: function startAd() {
            playercore.log.debug('<ImaAdUnit.startAd>');
            this.controller.onPlayerReadyForPreroll();
        }
    }, {
        key: 'pauseAd',
        value: function pauseAd() {
            this.controller.pauseAd();
        }
    }, {
        key: 'resumeAd',
        value: function resumeAd() {
            this.controller.resumeAd();
        }
    }, {
        key: 'onAdError',
        value: function onAdError(callback) {
            this.controller.onAdError = callback;
        }
    }, {
        key: 'on',
        value: function on(evt, handle) {
            this.controller.addEventListener(evt, handle);
        }
    }, {
        key: 'off',
        value: function off(evt, handle) {
            this.controller.removeEventListener(evt, handle);
        }
    }]);
    return ImaAdUnit;
}(VCPlayerObject$1), _class$11.propTypes = {
    player: playercore.PropTypes.object.isRequired
}, _temp$10);

var _class$10;

function _applyDecoratedDescriptor$3(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
        desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
        desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
        return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
        desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
        desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
        Object['define' + 'Property'](target, property, desc);
        desc = null;
    }

    return desc;
}

var DEFAULT$5 = playercore.playerconfig.DEFAULT;

/* global google */

if (!window.google && !window.___firstLoadGoogle__) {
    window.___firstLoadGoogle__ = true;
    var head = document.getElementsByTagName('head')[0];
    var script = document.createElement('script');
    script.type = 'text/javascript';
    script.src = '//imasdk.googleapis.com/js/sdkloader/ima3.js';
    head.appendChild(script);
}

var ImaIntegrator = (_class$10 = function (_VCPlayerObject) {
    inherits(ImaIntegrator, _VCPlayerObject);

    function ImaIntegrator(props) {
        classCallCheck(this, ImaIntegrator);

        var _this = possibleConstructorReturn(this, (ImaIntegrator.__proto__ || Object.getPrototypeOf(ImaIntegrator)).call(this, props));

        var player = _this.props.player;

        _this.containerEl = _this._createImaContainerEl(player);
        player.one(DEFAULT$5.EVENT.AD_END, _this._handleAdEnd);
        return _this;
    }

    createClass(ImaIntegrator, [{
        key: '_createImaContainerEl',
        value: function _createImaContainerEl() {
            var player = this.props.player;

            var containerEl = document.createElement('div');
            Dom.addClass(containerEl, 'ima-container');

            player.overlay.append(containerEl);
            return containerEl;
        }
    }, {
        key: '_handleAdEnd',
        value: function _handleAdEnd() {
            playercore.log.debug('<VPAIDIntegrator._handleAdEnd>');
            if (this.containerEl) {
                Dom.remove(this.containerEl);
                this.containerEl = null;
            }
        }
    }, {
        key: 'playAd',
        value: function playAd(vastResponse) {
            var self = this;
            this.setState({
                vastResponse: vastResponse
            });

            return Promise.resolve().then(function () {
                return self._loadAdUnit();
            }).then(function () {
                return self._setupEvents();
            }).then(function () {
                return self._playAdUnit();
            }).then(function () {
                return self._finishPlaying();
            }).catch(function (e) {
                throw e;
            });
        }
    }, {
        key: 'pauseAd',
        value: function pauseAd() {
            var player = this.props.player;
            var adUnit = this.state.adUnit;

            player.pause(true);

            if (!adUnit) {
                return;
            }
            adUnit.pauseAd();
        }
    }, {
        key: 'resumeAd',
        value: function resumeAd() {
            var adUnit = this.state.adUnit;

            if (!adUnit) {
                return;
            }
            adUnit.resumeAd();
        }
    }, {
        key: '_loadAdUnit',
        value: function _loadAdUnit() {
            var _this2 = this;

            var player = this.props.player;
            var vastResponse = this.state.vastResponse;

            var vjsTechEl = player.el().querySelector('.vjs-tech');
            return new Promise(function (resolve, reject) {
                var adUnit = new ImaAdUnit(_extends({ player: player }, vastResponse));
                adUnit.loadAdUnit(_this2.containerEl, vjsTechEl, function (err) {
                    if (err) {
                        return reject(err);
                    }

                    _this2.setState({ adUnit: adUnit });
                    resolve();
                });
            });
        }
    }, {
        key: '_setupEvents',
        value: function _setupEvents() {
            playercore.log.debug('<ImaIntegrator._setupEvents>');
            var adUnit = this.state.adUnit;
            var player = this.props.player;


            adUnit.on(google.ima.AdEvent.Type.STARTED, function () {
                player.trigger(DEFAULT$5.EVENT.IMA_AD_STARTED);
            });
        }
    }, {
        key: '_playAdUnit',
        value: function _playAdUnit() {
            var adUnit = this.state.adUnit;
            var player = this.props.player;

            adUnit.startAd();
            player.trigger(DEFAULT$5.EVENT.IMA_AD_START);
        }
    }, {
        key: '_finishPlaying',
        value: function _finishPlaying() {
            playercore.log.debug('<ImaIntegrator._finishPlaying>');
            var adUnit = this.state.adUnit;


            return new Promise(function (resolve, reject) {

                function adStopped(error) {
                    //adUnit.off(google.ima.AdEvent.Type.ALL_ADS_COMPLETED);

                    if (error) {
                        return reject(error);
                    }
                    resolve();
                }

                adUnit.on(google.ima.AdEvent.Type.ALL_ADS_COMPLETED, function () {
                    adStopped();
                });

                adUnit.on(google.ima.AdErrorEvent.Type.AD_ERROR, function (err) {
                    adStopped(err);
                });

                adUnit.onAdError(function (err) {
                    adStopped(err);
                });
            });
        }
    }]);
    return ImaIntegrator;
}(VCPlayerObject$1), (_applyDecoratedDescriptor$3(_class$10.prototype, '_handleAdEnd', [playercore.autobind], Object.getOwnPropertyDescriptor(_class$10.prototype, '_handleAdEnd'), _class$10.prototype)), _class$10);

var promiseXhr = function promiseXhr(options) {
    var limit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 3;
    var count = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

    return new Promise(function (resolve, reject) {
        playercore__default.xhr(_extends({
            timeout: 10000
        }, options), function (err, resp, body) {
            if (resp.statusCode === 200) {
                resolve(body);
            } else if (limit && count < limit) {
                ++count;
                promiseXhr(options, limit, count).then(function (value) {
                    resolve(value);
                }).catch(function (err) {
                    reject(err);
                });
            } else {
                reject(err);
            }
        });
    });
};

/*var serialize = function(obj, prefix) {
    var str = [], p;
    for(p in obj) {
        if (obj.hasOwnProperty(p)) {
            var k = prefix ? prefix + '[' + p + ']' : p, v = obj[p];
            str.push((v !== null && typeof v === 'object') ?
                serialize(v, k) :
                encodeURIComponent(k) + '=' + encodeURIComponent(v));
        }
    }
    return str.join('&');
};

function track(url, queries) {
    var _qr = serialize(queries);

    var img = new Image();
    img.src = url + _qr;
}*/

/*function trackgammaplatform(params) {
    track('//lg1.logging.admicro.vn/video_track_err?', params);
}*/

var commonjsGlobal = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};





function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var runtime_1 = createCommonjsModule(function (module) {
/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var runtime = (function (exports) {
  "use strict";

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  exports.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  IteratorPrototype[iteratorSymbol] = function () {
    return this;
  };

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype &&
      NativeIteratorPrototype !== Op &&
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype =
    Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
  GeneratorFunctionPrototype.constructor = GeneratorFunction;
  GeneratorFunctionPrototype[toStringTagSymbol] =
    GeneratorFunction.displayName = "GeneratorFunction";

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      prototype[method] = function(arg) {
        return this._invoke(method, arg);
      };
    });
  }

  exports.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  exports.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      if (!(toStringTagSymbol in genFun)) {
        genFun[toStringTagSymbol] = "GeneratorFunction";
      }
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  exports.awrap = function(arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value &&
            typeof value === "object" &&
            hasOwn.call(value, "__await")) {
          return Promise.resolve(value.__await).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return Promise.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration.
          result.value = unwrapped;
          resolve(result);
        }, function(error) {
          // If a rejected Promise was yielded, throw the rejection back
          // into the async generator function so it can be handled there.
          return invoke("throw", error, resolve, reject);
        });
      }
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new Promise(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  AsyncIterator.prototype[asyncIteratorSymbol] = function () {
    return this;
  };
  exports.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  exports.async = function(innerFn, outerFn, self, tryLocsList) {
    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList)
    );

    return exports.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;

        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);

        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.
          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  }

  // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.
  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (method === undefined) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        // Note: ["return"] must be used for ES3 parsing compatibility.
        if (delegate.iterator["return"]) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError(
          "The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (! info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value;

      // Resume execution at the desired location (see delegateYield).
      context.next = delegate.nextLoc;

      // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.
      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined;
      }

    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    }

    // The delegate iterator is finished, so forget it and continue with
    // the outer generator.
    context.delegate = null;
    return ContinueSentinel;
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  Gp[toStringTagSymbol] = "Generator";

  // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.
  Gp[iteratorSymbol] = function() {
    return this;
  };

  Gp.toString = function() {
    return "[object Generator]";
  };

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  exports.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  exports.values = values;

  function doneResult() {
    return { value: undefined, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined;
      this.done = false;
      this.delegate = null;

      this.method = "next";
      this.arg = undefined;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined;
        }

        return !! caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined;
      }

      return ContinueSentinel;
    }
  };

  // Regardless of whether this script is executing as a CommonJS module
  // or not, return the runtime object so that we can declare the variable
  // regeneratorRuntime in the outer scope, which allows this module to be
  // injected easily by `bin/regenerator --include-runtime script.js`.
  return exports;

}(
  // If this script is executing as a CommonJS module, use module.exports
  // as the regeneratorRuntime namespace. Otherwise create a new empty
  // object. Either way, the resulting object will be used to initialize
  // the regeneratorRuntime variable at the top of this file.
  module.exports
));

try {
  regeneratorRuntime = runtime;
} catch (accidentalStrictMode) {
  // This module should not be running in strict mode, so the above
  // assignment should always work unless something is misconfigured. Just
  // in case runtime.js accidentally runs in strict mode, we can escape
  // strict mode using a global Function call. This could conceivably fail
  // if a Content Security Policy forbids using Function, but in that case
  // the proper solution is to fix the accidental strict mode problem. If
  // you've misconfigured your bundler to force strict mode and applied a
  // CSP to forbid Function, and you're not willing to fix either of those
  // problems, please detail your unique predicament in a GitHub issue.
  Function("r", "regeneratorRuntime = r")(runtime);
}
});

var _class$13;
var _temp$12;

//import { haveQuery } from '../../../util/url';


var VASTClient = (_temp$12 = _class$13 = function (_VCPlayerObject) {
    inherits(VASTClient, _VCPlayerObject);

    function VASTClient(props) {
        classCallCheck(this, VASTClient);

        var _this = possibleConstructorReturn(this, (VASTClient.__proto__ || Object.getPrototypeOf(VASTClient)).call(this, props));

        _this.isPassBack = false;
        _this.errorURLMacros = [];
        return _this;
    }

    createClass(VASTClient, [{
        key: '_filterAdChain',
        value: function () {
            var _ref = asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(adChains, isPackageAds) {
                var results, err, adWrapper, adChain_, vastResponse, _vastResponse;

                return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                results = [];
                                err = void 0;
                                adWrapper = void 0;

                                if (!isPackageAds) {
                                    _context.next = 9;
                                    break;
                                }

                                adWrapper = adChains[0].shift();
                                while (adChains[0].length) {
                                    try {
                                        adChain_ = [adChains[0].shift()];

                                        adChain_.push(adWrapper);
                                        vastResponse = this._buildVASTResponse(adChain_);

                                        results.push(vastResponse);
                                    } catch (e) {
                                        err = e;
                                    }
                                }

                                if (!results.length) {
                                    _context.next = 8;
                                    break;
                                }

                                return _context.abrupt('return', results);

                            case 8:
                                throw err;

                            case 9:

                                while (adChains.length) {
                                    try {
                                        _vastResponse = this._buildVASTResponse(adChains.shift());

                                        results.push(_vastResponse);
                                    } catch (e) {
                                        err = e;
                                    }
                                }

                                if (!results.length) {
                                    _context.next = 12;
                                    break;
                                }

                                return _context.abrupt('return', results);

                            case 12:
                                throw err;

                            case 13:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _callee, this);
            }));

            function _filterAdChain(_x, _x2) {
                return _ref.apply(this, arguments);
            }

            return _filterAdChain;
        }()
    }, {
        key: 'adgetVASTResponse',
        value: function () {
            var _ref2 = asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(_ref3) {
                var _this2 = this;

                var adTagUrl = _ref3.adTagUrl,
                    adTagXML = _ref3.adTagXML,
                    isPackageAds = _ref3.isPackageAds;
                var self;
                return regeneratorRuntime.wrap(function _callee2$(_context2) {
                    while (1) {
                        switch (_context2.prev = _context2.next) {
                            case 0:
                                self = this;
                                return _context2.abrupt('return', Promise.resolve().then(function () {
                                    return _this2._getVASTAd({ adTagUrl: adTagUrl, adTagXML: adTagXML });
                                }).then(function (adChains) {
                                    return self._filterAdChain(adChains, isPackageAds);
                                }).catch(function (e) {
                                    if (e.ima) {
                                        return [e];
                                    }

                                    throw e;
                                }));

                            case 2:
                            case 'end':
                                return _context2.stop();
                        }
                    }
                }, _callee2, this);
            }));

            function adgetVASTResponse(_x3) {
                return _ref2.apply(this, arguments);
            }

            return adgetVASTResponse;
        }()
    }, {
        key: 'getVASTResponse',
        value: function () {
            var _ref4 = asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(_ref5) {
                var adTagUrl = _ref5.adTagUrl,
                    adTagXML = _ref5.adTagXML,
                    isPackageAds = _ref5.isPackageAds;
                var p_works;
                return regeneratorRuntime.wrap(function _callee3$(_context3) {
                    while (1) {
                        switch (_context3.prev = _context3.next) {
                            case 0:
                                if (!(!adTagUrl && !adTagXML)) {
                                    _context3.next = 2;
                                    break;
                                }

                                throw error.VASTClIENT_MISS_AD_TAG_URL;

                            case 2:
                                //let prefix = haveQuery(adTagUrl) ? '&' : '?';

                                p_works = [];
                                //let adUrl = [adTagUrl, adTagUrl + prefix + 'is_backfill=1'];
                                // let adUrl = [adTagUrl];
                                // for (let i in adUrl) {

                                p_works.push(this.adgetVASTResponse({ adTagUrl: adTagUrl, adTagXML: adTagXML, isPackageAds: isPackageAds }));
                                // }

                                return _context3.abrupt('return', Promise.all(p_works.map(function (p) {
                                    return p.catch(function () {
                                        return [];
                                    });
                                })).then(function (items) {
                                    var adChains = [];
                                    //let results = [...items[0], ...items[1]];
                                    var results = [].concat(toConsumableArray(items[0]));
                                    for (var i in results) {
                                        if (results[i].ads) {
                                            adChains.push(results[i]);
                                        } else if (results[i].ima) {
                                            return results[i];
                                        }
                                    }

                                    if (adChains.length) {
                                        return adChains;
                                    }

                                    throw results[0];
                                }));

                            case 5:
                            case 'end':
                                return _context3.stop();
                        }
                    }
                }, _callee3, this);
            }));

            function getVASTResponse(_x4) {
                return _ref4.apply(this, arguments);
            }

            return getVASTResponse;
        }()

        /**
         * Error: 102, 303 ,301
         */

    }, {
        key: 'validateVASTTree',
        value: function validateVASTTree(vastTree) {
            var vastVersion = xml.attr(vastTree, 'version');
            // let vastTreeStr = JSON.stringify(vastTree);

            if (!vastTree.ad) {
                // Lỗi không có ad trong vast tree
                throw error.ERROR_303;
            }

            if (vastVersion && vastVersion != 3 && vastVersion != 2) {
                // Lỗi không support vast version
                throw error.ERROR_102;
            }

            // if (vastTreeStr.indexOf('vASTAdTagURI') !== -1) {
            //     if (vastTree.ad.wrapper.vASTAdTagURI.keyValue.indexOf('http') === -1) {
            //         throw ERROR.ERROR_301;
            //     }
            // }
        }
    }, {
        key: '_buildVASTResponse',
        value: function _buildVASTResponse(adsChain) {
            var response = new VASTResponse();
            addAdsToResponse(response, adsChain);
            validateResponse(response);

            return response;

            //*** Local function ****
            function addAdsToResponse(response, ads) {
                // if (utilities.isArray(ads)) {
                ads.forEach(function (ad) {
                    response.addAd(ad);
                });
                // }else{
                //     response.addAd(ads);
                // }
            }

            function validateResponse(response) {

                if (!response.hasLinear()) {
                    throw error.VASTClIENT_AD_TYPE_NOT_SUPPORT;
                }

                if (response.duration === undefined) {
                    throw error.VASTClIENT_MISSING_DURATIOn;
                }

                // Không valid offset của progressEvents nữa do có thể null (ở jw null vẫn chấp nhận)
                /*var progressEvents = response.trackingEvents.progress;
                if (progressEvents) {
                    progressEvents.forEach(function (progressEvent) {
                        if (!utilities.isNumber(progressEvent.offset)) {
                            throw ERROR.VASTClIENT_MISSING_OFFSET_TRACKING;
                        }
                    });
                }*/
            }
        }

        /**
         * Error: 100, 102, 301, 303
         */

    }, {
        key: '_getVastTree',
        value: function () {
            var _ref6 = asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(_ref7) {
                var adTagUrl = _ref7.adTagUrl,
                    adTagXML = _ref7.adTagXML;
                var xmlStr, vastTree;
                return regeneratorRuntime.wrap(function _callee4$(_context4) {
                    while (1) {
                        switch (_context4.prev = _context4.next) {
                            case 0:

                                // error 301
                                xmlStr = void 0;

                                if (!adTagUrl) {
                                    _context4.next = 9;
                                    break;
                                }

                                if (!(adTagUrl.indexOf('googleads.g.doubleclick.net') !== -1)) {
                                    _context4.next = 4;
                                    break;
                                }

                                throw { adTagUrl: adTagUrl, adsResponse: null, ima: true };

                            case 4:
                                _context4.next = 6;
                                return this._requestVASTXml(adTagUrl);

                            case 6:
                                xmlStr = _context4.sent;
                                _context4.next = 10;
                                break;

                            case 9:
                                xmlStr = adTagXML;

                            case 10:
                                vastTree = void 0;

                                /* if (xmlStr.indexOf('googleads.g.doubleclick.net') !== -1) {
                                    throw { adTagUrl: null, adsResponse: xmlStr, ima: true };
                                }*/

                                _context4.prev = 11;

                                vastTree = xml.toJXONTree(xmlStr);
                                playercore.log.debug('built JXONTree from VAST response:', vastTree);

                                if (isArray(vastTree.ad)) {
                                    vastTree.ads = vastTree.ad;
                                } else if (vastTree.ad) {
                                    vastTree.ads = [vastTree.ad];
                                } else {
                                    vastTree.ads = [];
                                }
                                _context4.next = 20;
                                break;

                            case 17:
                                _context4.prev = 17;
                                _context4.t0 = _context4['catch'](11);
                                throw error.ERROR_100;

                            case 20:

                                // error 102, 303
                                this.validateVASTTree(vastTree);
                                return _context4.abrupt('return', vastTree);

                            case 22:
                            case 'end':
                                return _context4.stop();
                        }
                    }
                }, _callee4, this, [[11, 17]]);
            }));

            function _getVastTree(_x5) {
                return _ref6.apply(this, arguments);
            }

            return _getVastTree;
        }()

        /**
         * Error: 100, 102, 301, 303
         * @param  {[type]} adTagUrl [description]
         * @param {[type]} adTagXML [description]
         */

    }, {
        key: '_getVASTAd',
        value: function () {
            var _ref8 = asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(_ref9) {
                var adTagUrl = _ref9.adTagUrl,
                    adTagXML = _ref9.adTagXML;
                var vastTree, waterfallAds;
                return regeneratorRuntime.wrap(function _callee5$(_context5) {
                    while (1) {
                        switch (_context5.prev = _context5.next) {
                            case 0:
                                // get nội dung của master xml

                                

                                // error: 100, 102, 301, 303
                                vastTree = void 0;
                                _context5.prev = 2;
                                _context5.next = 5;
                                return this._getVastTree({ adTagUrl: adTagUrl, adTagXML: adTagXML });

                            case 5:
                                vastTree = _context5.sent;
                                _context5.next = 12;
                                break;

                            case 8:
                                _context5.prev = 8;
                                _context5.t0 = _context5['catch'](2);

                                

                                throw _context5.t0;

                            case 12:
                                waterfallAds = vastTree && isArray(vastTree.ads) ? vastTree.ads : null;
                                return _context5.abrupt('return', this._waterfallHandler(waterfallAds).catch(function (e) {
                                    if (e.ima) {
                                        // Bị lỗi nếu lấy adsResponse => chèn lại adTagUrl gốc để chạy ima
                                        throw {
                                            adTagUrl: adTagUrl,
                                            ima: true
                                        };
                                    }
                                }));

                            case 14:
                            case 'end':
                                return _context5.stop();
                        }
                    }
                }, _callee5, this, [[2, 8]]);
            }));

            function _getVASTAd(_x6) {
                return _ref8.apply(this, arguments);
            }

            return _getVASTAd;
        }()
    }, {
        key: '_getAd',
        value: function () {
            var _ref10 = asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(adTagUrl, adChain) {
                var self, adJxonTree, vastTree, ad;
                return regeneratorRuntime.wrap(function _callee6$(_context6) {
                    while (1) {
                        switch (_context6.prev = _context6.next) {
                            case 0:
                                self = this;

                                if (!(adChain.length >= this.props.WRAPPER_LIMIT)) {
                                    _context6.next = 3;
                                    break;
                                }

                                throw error.VASTClIENT_WRAPPER_LIMIT_REACHED;

                            case 3:
                                adJxonTree = void 0, vastTree = void 0;

                                if (!isString(adTagUrl)) {
                                    _context6.next = 11;
                                    break;
                                }

                                _context6.next = 7;
                                return this._getVastTree({ adTagUrl: adTagUrl });

                            case 7:
                                vastTree = _context6.sent;

                                adJxonTree = vastTree.ad;
                                _context6.next = 12;
                                break;

                            case 11:
                                adJxonTree = adTagUrl;

                            case 12:
                                if (!(adJxonTree instanceof Array)) {
                                    _context6.next = 15;
                                    break;
                                }

                                adJxonTree.forEach(function (_adJxonTree) {
                                    var ad = self._buildAd(_adJxonTree);
                                    adChain.push(ad);

                                    if (ad.wrapper) {
                                        if (ad.wrapper.VASTAdTagURI.indexOf('//') === -1) {
                                            throw error.ERROR_301;
                                        }
                                    }

                                    if (ad.wrapper) {
                                        if (ad.wrapper.VASTAdTagURI.indexOf('googleads.g.doubleclick.net') !== -1) {
                                            throw { adTagUrl: null, adsResponse: adChain, ima: true };
                                        }
                                        return self._getAd(ad.wrapper.VASTAdTagURI, adChain);
                                    }
                                });
                                return _context6.abrupt('return', adChain);

                            case 15:
                                ad = this._buildAd(adJxonTree);

                                adChain.push(ad);

                                if (!ad.wrapper) {
                                    _context6.next = 20;
                                    break;
                                }

                                if (!(ad.wrapper.VASTAdTagURI.indexOf('//') === -1)) {
                                    _context6.next = 20;
                                    break;
                                }

                                throw error.ERROR_301;

                            case 20:
                                if (!ad.wrapper) {
                                    _context6.next = 24;
                                    break;
                                }

                                if (!(ad.wrapper.VASTAdTagURI.indexOf('googleads.g.doubleclick.net') !== -1)) {
                                    _context6.next = 23;
                                    break;
                                }

                                throw { adTagUrl: null, adsResponse: adChain, ima: true };

                            case 23:
                                return _context6.abrupt('return', this._getAd(ad.wrapper.VASTAdTagURI, adChain));

                            case 24:
                                return _context6.abrupt('return', adChain);

                            case 25:
                            case 'end':
                                return _context6.stop();
                        }
                    }
                }, _callee6, this);
            }));

            function _getAd(_x7, _x8) {
                return _ref10.apply(this, arguments);
            }

            return _getAd;
        }()
    }, {
        key: '_buildAd',
        value: function _buildAd(adJxonTree) {
            var ad = new Ad(adJxonTree);
            this._validateAd(ad);
            return ad;
        }
    }, {
        key: '_validateAd',
        value: function _validateAd(ad) {
            var wrapper = ad.wrapper;
            var inLine = ad.inLine;

            if (inLine && wrapper) {
                throw error.VALID_AD_ERROR_1;
            }

            if (!inLine && !wrapper) {
                throw error.VALID_AD_ERROR_2;
            }

            if (inLine && !inLine.isSupported()) {
                throw error.VALID_AD_ERROR_3;
            }

            if (wrapper && !wrapper.VASTAdTagURI) {
                throw error.VALID_AD_ERROR_4;
            }
        }
    }, {
        key: '_waterfallHandler',
        value: function () {
            var _ref11 = asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(waterfallAds) {
                var p_works, promise, result, realAd;
                return regeneratorRuntime.wrap(function _callee7$(_context7) {
                    while (1) {
                        switch (_context7.prev = _context7.next) {
                            case 0:
                                /*this.adChain_ = [];
                                try {
                                    let adChain = await this._getAd(waterfallAds.shift(), this.adChain_);
                                    return adChain;
                                } catch (e) {
                                    if (waterfallAds.length > 0) {
                                        return this._waterfallHandler(waterfallAds);
                                    } else {
                                        throw e;
                                    }
                                }*/

                                p_works = [];

                                while (waterfallAds.length) {
                                    promise = this._getAd(waterfallAds.shift(), []).catch(function (e) {
                                        return { error: e };
                                    });

                                    p_works.push(promise);
                                }

                                _context7.next = 4;
                                return Promise.all(p_works);

                            case 4:
                                result = _context7.sent;

                                // let result_ = [];
                                // result.map(ads => {
                                //     if (ads.length > 1) {
                                //         ads.map(ad => {
                                //             result_.push(ad);
                                //         });
                                //     } else {
                                //         result_.push(ads);
                                //     }
                                // });

                                realAd = result.filter(function (ad) {
                                    return !ad.error;
                                });

                                if (!realAd.length) {
                                    _context7.next = 8;
                                    break;
                                }

                                return _context7.abrupt('return', realAd);

                            case 8:
                                throw result[0].error;

                            case 9:
                            case 'end':
                                return _context7.stop();
                        }
                    }
                }, _callee7, this);
            }));

            function _waterfallHandler(_x9) {
                return _ref11.apply(this, arguments);
            }

            return _waterfallHandler;
        }()

        /**
         * Error: 301
         */

    }, {
        key: '_requestVASTXml',
        value: function _requestVASTXml(adTagUrl) {
            var withCredentials = false;

            return new Promise(function (resolve, reject) {
                promiseXhr({
                    uri: adTagUrl,
                    withCredentials: withCredentials,
                    method: 'GET'
                }, 0).then(function (res) {
                    if (!res) {
                        reject(error.ERROR_301);
                        return;
                    }
                    resolve(res);
                }).catch(function () {
                    reject(error.ERROR_301);
                });
            });
        }
    }]);
    return VASTClient;
}(VCPlayerObject$1), _class$13.defaultProps = {
    WRAPPER_LIMIT: 5
}, _temp$12);

var _class$14;
var _class2$3;
var _temp$13;

function _applyDecoratedDescriptor$4(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
        desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
        desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
        return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
        desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
        desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
        Object['define' + 'Property'](target, property, desc);
        desc = null;
    }

    return desc;
}

var DEFAULT$6 = playercore.playerconfig.DEFAULT;
var RestorePlayer = (_class$14 = (_temp$13 = _class2$3 = function (_VCPlayerObject) {
    inherits(RestorePlayer, _VCPlayerObject);

    function RestorePlayer(props) {
        classCallCheck(this, RestorePlayer);

        var _this = possibleConstructorReturn(this, (RestorePlayer.__proto__ || Object.getPrototypeOf(RestorePlayer)).call(this, props));

        var player = _this.props.player;

        _this._volumeChangeVpaid = _this._volumeChangeVpaid.bind(_this);
        _this.player = {};
        _this._savePlayerSnapshot();
        playerUtils.once(player, [DEFAULT$6.EVENT.AD_END], _this._handleRestorePlayer);
        return _this;
    }

    /**
     * Định nghĩa kiểu của props
     * @type {Object}
     */


    createClass(RestorePlayer, [{
        key: '_savePlayerSnapshot',
        value: function _savePlayerSnapshot() {
            var player = this.props.player;

            var _player$options = player.options(),
                params = _player$options.params;

            var self = this;
            var muted = false;
            this.player.currentTime = player.currentTime.bind(player);
            this.player.muted = player.muted.bind(player);
            this.player.volume = player.volume.bind(player);
            // Trên mobile nếu gọi play ngay khi init xong 
            // => ở vị trí preroll player.paused() === true
            // => check thêm ad position để set gia trị playing
            var snapshot = void 0;

            if (!player.vastAd) {
                return;
            }

            player.on(DEFAULT$6.EVENT.VPAID_AD_VOLUME_CHANGE, this._volumeChangeVpaid);
            player.one('snapshotPlayer', function () {

                if (player.vastAd.adPosition() === "preroll") {
                    muted = params.muted || params.mute;
                } else {
                    muted = player.muted();
                }

                var playing = !player.paused() || player.vastAd.adPosition() !== 'postroll';
                var currenTime = void 0;
                player.vastAd.adPosition() !== 'postroll' ? currenTime = player.currentTime() - 2 : currenTime = player.currentTime();
                snapshot = {
                    playing: playing,
                    ended: player.ended(),
                    duration: player.duration(),
                    src: player.currentSrc(),
                    currentTime: currenTime,
                    type: player.currentType(),
                    volume: player.volume(),
                    muted: muted
                };

                self.setState({
                    snapshot: snapshot
                });
                if (playing) {
                    player.pause();
                }
            });
        }
    }, {
        key: '_volumeChangeVpaid',
        value: function _volumeChangeVpaid() {
            var snapshot = this.state.snapshot;
            var player = this.props.player;

            var vastAd = player.vastAd;

            vastAd.getAdVolume().then(function (volume) {
                if (volume === 0) {
                    snapshot.muted = true;
                } else {
                    snapshot.muted = false;
                }
            });
        }
    }, {
        key: 'snapshot',
        value: function snapshot() {
            return this.state.snapshot;
        }
    }, {
        key: '_handleRestorePlayer',
        value: function _handleRestorePlayer() {
            var snapshot = this.state.snapshot;
            var player = this.props.player;


            player.off(DEFAULT$6.EVENT.VPAID_AD_VOLUME_CHANGE, this._volumeChangeVpaid);

            if (!snapshot) {
                this._resumePlayback(playing);
                return;
            }

            var needRestore = this._needRestoreSrc(snapshot);
            var playing = snapshot.playing;

            player.vastAd = null;

            if (!needRestore) {
                // Không cần restore source thì gọi play và set lại current time
                this.player.currentTime(snapshot.currentTime);
                this._resumePlayback(playing);
                return;
            }

            // Đối với trường hợp cần restore lại source thì xử lý
            player.one('canplay', this._tryToResume.bind(this, snapshot));
            this._ensureCanplayEvtGetsFired();

            // Trên PC khi đổi luồng thì cần reset lại player
            if (!playercore.agent.isMobile) {
                player.reset();
            }

            // restore lại src và currentTime
            player.src({ src: snapshot.src, type: snapshot.type });
            this.player.currentTime(snapshot.currentTime);
            player.trigger('waiting');

            // Trên safari cần call load để báo source change
            if (!playercore.agent.isMobile) {
                player.load();
            }

            this._resumePlayback(playing);
        }
    }, {
        key: '_tryToResume',
        value: function _tryToResume(snapshot) {
            var player = this.props.player;

            var self = this;
            try {
                if (player.currentTime() !== snapshot.currentTime) {
                    player.one('seeked', function () {
                        self._resumePlayback(snapshot.playing);
                    });
                    player.currentTime(snapshot.currentTime);
                } else {
                    // if needed and no seek has been performed, restore playing status immediately
                    this._resumePlayback(snapshot.playing);
                }
            } catch (e) {
                playercore.log.warn('Failed to resume the content after an advertisement', e);
            }
        }
    }, {
        key: '_ensureCanplayEvtGetsFired',
        value: function _ensureCanplayEvtGetsFired() {
            var player = this.props.player;

            var timeoutId = setTimeout(function () {
                player.trigger('canplay');
            }, 1000);

            player.one('canplay', function () {
                clearTimeout(timeoutId);
            });
        }

        /**
         * Resume play video chính
         */

    }, {
        key: '_resumePlayback',
        value: function _resumePlayback(playing) {
            var player = this.props.player;
            var snapshot = this.state.snapshot;
            var currentTime = snapshot.currentTime,
                muted = snapshot.muted,
                volume = snapshot.volume;

            if (!this.triggerRestorePlayback_) {
                player.trigger(DEFAULT$6.EVENT.AD_RESTORED_PLAYBACK);
                this.triggerRestorePlayback_ = true;
            }

            if (!playing) {
                return;
            }

            this.player.currentTime(currentTime);
            this.player.muted(muted);
            this.player.volume(volume);

            if (player.options().params.adThumbnail && !document.getElementById('' + player.id_).hasAttribute("loop")) {
                return;
            }

            setTimeout(function () {
                player.play(true);
            }, 0);
        }

        /**
         * Kiểm tra có cần set lại source sau khi chạy quảng cáo hay không
         * @return {Boolean} [description]
         */

    }, {
        key: '_needRestoreSrc',
        value: function _needRestoreSrc(snapshot) {
            var player = this.props.player;


            var src = player.src();

            if (!player.vastAd.adUnit()) {
                return false;
            }

            // Nếu hiện tại không có src thì return true
            var type = player.vastAd.adUnit().type;
            if (!src) {
                return true;
            }

            if (src !== snapshot.src) {
                return true;
            }

            if (playercore.agent.isIOS) {
                return true;
            }

            // Nếu quảng cáo trước đó là Vast thì return false
            if (type === 'VAST' || type === 'VPAID') {
                return false;
            }

            // Nếu src hiện tại dạng mediasource/blob thì không cần restore
            if (/mediasource|blob/.test(src)) {
                return false;
            }

            // Nếu src là link có chứa m3u8 tức chơi native hls thì cần restore lại
            if (/m3u8/gi.test(src)) {
                return true;
            }

            // So sánh src được snapshot và src hiện tại, nếu khác nhau thì cần restore
            return src !== snapshot.src;
        }
    }]);
    return RestorePlayer;
}(VCPlayerObject$1), _class2$3.propTypes = {
    player: playercore.PropTypes.object.isRequired,
    vastAd: playercore.PropTypes.object.isRequired,
    preLoaded: playercore.PropTypes.bool
}, _temp$13), (_applyDecoratedDescriptor$4(_class$14.prototype, '_handleRestorePlayer', [playercore.autobind], Object.getOwnPropertyDescriptor(_class$14.prototype, '_handleRestorePlayer'), _class$14.prototype), _applyDecoratedDescriptor$4(_class$14.prototype, '_tryToResume', [playercore.autobind], Object.getOwnPropertyDescriptor(_class$14.prototype, '_tryToResume'), _class$14.prototype)), _class$14);

var lodash = createCommonjsModule(function (module, exports) {
/**
 * @license
 * Lodash <https://lodash.com/>
 * Copyright JS Foundation and other contributors <https://js.foundation/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */
(function() {

  /** Used as a safe reference for `undefined` in pre-ES5 environments. */
  var undefined;

  /** Used as the semantic version number. */
  var VERSION = '4.17.4';

  /** Used as the size to enable large array optimizations. */
  var LARGE_ARRAY_SIZE = 200;

  /** Error message constants. */
  var CORE_ERROR_TEXT = 'Unsupported core-js use. Try https://npms.io/search?q=ponyfill.',
      FUNC_ERROR_TEXT = 'Expected a function';

  /** Used to stand-in for `undefined` hash values. */
  var HASH_UNDEFINED = '__lodash_hash_undefined__';

  /** Used as the maximum memoize cache size. */
  var MAX_MEMOIZE_SIZE = 500;

  /** Used as the internal argument placeholder. */
  var PLACEHOLDER = '__lodash_placeholder__';

  /** Used to compose bitmasks for cloning. */
  var CLONE_DEEP_FLAG = 1,
      CLONE_FLAT_FLAG = 2,
      CLONE_SYMBOLS_FLAG = 4;

  /** Used to compose bitmasks for value comparisons. */
  var COMPARE_PARTIAL_FLAG = 1,
      COMPARE_UNORDERED_FLAG = 2;

  /** Used to compose bitmasks for function metadata. */
  var WRAP_BIND_FLAG = 1,
      WRAP_BIND_KEY_FLAG = 2,
      WRAP_CURRY_BOUND_FLAG = 4,
      WRAP_CURRY_FLAG = 8,
      WRAP_CURRY_RIGHT_FLAG = 16,
      WRAP_PARTIAL_FLAG = 32,
      WRAP_PARTIAL_RIGHT_FLAG = 64,
      WRAP_ARY_FLAG = 128,
      WRAP_REARG_FLAG = 256,
      WRAP_FLIP_FLAG = 512;

  /** Used as default options for `_.truncate`. */
  var DEFAULT_TRUNC_LENGTH = 30,
      DEFAULT_TRUNC_OMISSION = '...';

  /** Used to detect hot functions by number of calls within a span of milliseconds. */
  var HOT_COUNT = 800,
      HOT_SPAN = 16;

  /** Used to indicate the type of lazy iteratees. */
  var LAZY_FILTER_FLAG = 1,
      LAZY_MAP_FLAG = 2,
      LAZY_WHILE_FLAG = 3;

  /** Used as references for various `Number` constants. */
  var INFINITY = 1 / 0,
      MAX_SAFE_INTEGER = 9007199254740991,
      MAX_INTEGER = 1.7976931348623157e+308,
      NAN = 0 / 0;

  /** Used as references for the maximum length and index of an array. */
  var MAX_ARRAY_LENGTH = 4294967295,
      MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
      HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;

  /** Used to associate wrap methods with their bit flags. */
  var wrapFlags = [
    ['ary', WRAP_ARY_FLAG],
    ['bind', WRAP_BIND_FLAG],
    ['bindKey', WRAP_BIND_KEY_FLAG],
    ['curry', WRAP_CURRY_FLAG],
    ['curryRight', WRAP_CURRY_RIGHT_FLAG],
    ['flip', WRAP_FLIP_FLAG],
    ['partial', WRAP_PARTIAL_FLAG],
    ['partialRight', WRAP_PARTIAL_RIGHT_FLAG],
    ['rearg', WRAP_REARG_FLAG]
  ];

  /** `Object#toString` result references. */
  var argsTag = '[object Arguments]',
      arrayTag = '[object Array]',
      asyncTag = '[object AsyncFunction]',
      boolTag = '[object Boolean]',
      dateTag = '[object Date]',
      domExcTag = '[object DOMException]',
      errorTag = '[object Error]',
      funcTag = '[object Function]',
      genTag = '[object GeneratorFunction]',
      mapTag = '[object Map]',
      numberTag = '[object Number]',
      nullTag = '[object Null]',
      objectTag = '[object Object]',
      promiseTag = '[object Promise]',
      proxyTag = '[object Proxy]',
      regexpTag = '[object RegExp]',
      setTag = '[object Set]',
      stringTag = '[object String]',
      symbolTag = '[object Symbol]',
      undefinedTag = '[object Undefined]',
      weakMapTag = '[object WeakMap]',
      weakSetTag = '[object WeakSet]';

  var arrayBufferTag = '[object ArrayBuffer]',
      dataViewTag = '[object DataView]',
      float32Tag = '[object Float32Array]',
      float64Tag = '[object Float64Array]',
      int8Tag = '[object Int8Array]',
      int16Tag = '[object Int16Array]',
      int32Tag = '[object Int32Array]',
      uint8Tag = '[object Uint8Array]',
      uint8ClampedTag = '[object Uint8ClampedArray]',
      uint16Tag = '[object Uint16Array]',
      uint32Tag = '[object Uint32Array]';

  /** Used to match empty string literals in compiled template source. */
  var reEmptyStringLeading = /\b__p \+= '';/g,
      reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
      reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

  /** Used to match HTML entities and HTML characters. */
  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,
      reUnescapedHtml = /[&<>"']/g,
      reHasEscapedHtml = RegExp(reEscapedHtml.source),
      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

  /** Used to match template delimiters. */
  var reEscape = /<%-([\s\S]+?)%>/g,
      reEvaluate = /<%([\s\S]+?)%>/g,
      reInterpolate = /<%=([\s\S]+?)%>/g;

  /** Used to match property names within property paths. */
  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
      reIsPlainProp = /^\w*$/,
      reLeadingDot = /^\./,
      rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

  /**
   * Used to match `RegExp`
   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
   */
  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
      reHasRegExpChar = RegExp(reRegExpChar.source);

  /** Used to match leading and trailing whitespace. */
  var reTrim = /^\s+|\s+$/g,
      reTrimStart = /^\s+/,
      reTrimEnd = /\s+$/;

  /** Used to match wrap detail comments. */
  var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,
      reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/,
      reSplitDetails = /,? & /;

  /** Used to match words composed of alphanumeric characters. */
  var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;

  /** Used to match backslashes in property paths. */
  var reEscapeChar = /\\(\\)?/g;

  /**
   * Used to match
   * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).
   */
  var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

  /** Used to match `RegExp` flags from their coerced string values. */
  var reFlags = /\w*$/;

  /** Used to detect bad signed hexadecimal string values. */
  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

  /** Used to detect binary string values. */
  var reIsBinary = /^0b[01]+$/i;

  /** Used to detect host constructors (Safari). */
  var reIsHostCtor = /^\[object .+?Constructor\]$/;

  /** Used to detect octal string values. */
  var reIsOctal = /^0o[0-7]+$/i;

  /** Used to detect unsigned integer values. */
  var reIsUint = /^(?:0|[1-9]\d*)$/;

  /** Used to match Latin Unicode letters (excluding mathematical operators). */
  var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;

  /** Used to ensure capturing order of template delimiters. */
  var reNoMatch = /($^)/;

  /** Used to match unescaped characters in compiled string literals. */
  var reUnescapedString = /['\n\r\u2028\u2029\\]/g;

  /** Used to compose unicode character classes. */
  var rsAstralRange = '\\ud800-\\udfff',
      rsComboMarksRange = '\\u0300-\\u036f',
      reComboHalfMarksRange = '\\ufe20-\\ufe2f',
      rsComboSymbolsRange = '\\u20d0-\\u20ff',
      rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
      rsDingbatRange = '\\u2700-\\u27bf',
      rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
      rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
      rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
      rsPunctuationRange = '\\u2000-\\u206f',
      rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
      rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
      rsVarRange = '\\ufe0e\\ufe0f',
      rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;

  /** Used to compose unicode capture groups. */
  var rsApos = "['\u2019]",
      rsAstral = '[' + rsAstralRange + ']',
      rsBreak = '[' + rsBreakRange + ']',
      rsCombo = '[' + rsComboRange + ']',
      rsDigits = '\\d+',
      rsDingbat = '[' + rsDingbatRange + ']',
      rsLower = '[' + rsLowerRange + ']',
      rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
      rsFitz = '\\ud83c[\\udffb-\\udfff]',
      rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
      rsNonAstral = '[^' + rsAstralRange + ']',
      rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
      rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
      rsUpper = '[' + rsUpperRange + ']',
      rsZWJ = '\\u200d';

  /** Used to compose unicode regexes. */
  var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',
      rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',
      rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
      rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
      reOptMod = rsModifier + '?',
      rsOptVar = '[' + rsVarRange + ']?',
      rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
      rsOrdLower = '\\d*(?:(?:1st|2nd|3rd|(?![123])\\dth)\\b)',
      rsOrdUpper = '\\d*(?:(?:1ST|2ND|3RD|(?![123])\\dTH)\\b)',
      rsSeq = rsOptVar + reOptMod + rsOptJoin,
      rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,
      rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

  /** Used to match apostrophes. */
  var reApos = RegExp(rsApos, 'g');

  /**
   * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
   * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
   */
  var reComboMark = RegExp(rsCombo, 'g');

  /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
  var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

  /** Used to match complex or compound words. */
  var reUnicodeWord = RegExp([
    rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',
    rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')',
    rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,
    rsUpper + '+' + rsOptContrUpper,
    rsOrdUpper,
    rsOrdLower,
    rsDigits,
    rsEmoji
  ].join('|'), 'g');

  /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
  var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');

  /** Used to detect strings that need a more robust regexp to match words. */
  var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

  /** Used to assign default `context` object properties. */
  var contextProps = [
    'Array', 'Buffer', 'DataView', 'Date', 'Error', 'Float32Array', 'Float64Array',
    'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object',
    'Promise', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError', 'Uint8Array',
    'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap',
    '_', 'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'
  ];

  /** Used to make template sourceURLs easier to identify. */
  var templateCounter = -1;

  /** Used to identify `toStringTag` values of typed arrays. */
  var typedArrayTags = {};
  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
  typedArrayTags[uint32Tag] = true;
  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
  typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
  typedArrayTags[errorTag] = typedArrayTags[funcTag] =
  typedArrayTags[mapTag] = typedArrayTags[numberTag] =
  typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
  typedArrayTags[setTag] = typedArrayTags[stringTag] =
  typedArrayTags[weakMapTag] = false;

  /** Used to identify `toStringTag` values supported by `_.clone`. */
  var cloneableTags = {};
  cloneableTags[argsTag] = cloneableTags[arrayTag] =
  cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
  cloneableTags[boolTag] = cloneableTags[dateTag] =
  cloneableTags[float32Tag] = cloneableTags[float64Tag] =
  cloneableTags[int8Tag] = cloneableTags[int16Tag] =
  cloneableTags[int32Tag] = cloneableTags[mapTag] =
  cloneableTags[numberTag] = cloneableTags[objectTag] =
  cloneableTags[regexpTag] = cloneableTags[setTag] =
  cloneableTags[stringTag] = cloneableTags[symbolTag] =
  cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
  cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
  cloneableTags[errorTag] = cloneableTags[funcTag] =
  cloneableTags[weakMapTag] = false;

  /** Used to map Latin Unicode letters to basic Latin letters. */
  var deburredLetters = {
    // Latin-1 Supplement block.
    '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
    '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
    '\xc7': 'C',  '\xe7': 'c',
    '\xd0': 'D',  '\xf0': 'd',
    '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
    '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
    '\xcc': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
    '\xec': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
    '\xd1': 'N',  '\xf1': 'n',
    '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
    '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
    '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
    '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
    '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
    '\xc6': 'Ae', '\xe6': 'ae',
    '\xde': 'Th', '\xfe': 'th',
    '\xdf': 'ss',
    // Latin Extended-A block.
    '\u0100': 'A',  '\u0102': 'A', '\u0104': 'A',
    '\u0101': 'a',  '\u0103': 'a', '\u0105': 'a',
    '\u0106': 'C',  '\u0108': 'C', '\u010a': 'C', '\u010c': 'C',
    '\u0107': 'c',  '\u0109': 'c', '\u010b': 'c', '\u010d': 'c',
    '\u010e': 'D',  '\u0110': 'D', '\u010f': 'd', '\u0111': 'd',
    '\u0112': 'E',  '\u0114': 'E', '\u0116': 'E', '\u0118': 'E', '\u011a': 'E',
    '\u0113': 'e',  '\u0115': 'e', '\u0117': 'e', '\u0119': 'e', '\u011b': 'e',
    '\u011c': 'G',  '\u011e': 'G', '\u0120': 'G', '\u0122': 'G',
    '\u011d': 'g',  '\u011f': 'g', '\u0121': 'g', '\u0123': 'g',
    '\u0124': 'H',  '\u0126': 'H', '\u0125': 'h', '\u0127': 'h',
    '\u0128': 'I',  '\u012a': 'I', '\u012c': 'I', '\u012e': 'I', '\u0130': 'I',
    '\u0129': 'i',  '\u012b': 'i', '\u012d': 'i', '\u012f': 'i', '\u0131': 'i',
    '\u0134': 'J',  '\u0135': 'j',
    '\u0136': 'K',  '\u0137': 'k', '\u0138': 'k',
    '\u0139': 'L',  '\u013b': 'L', '\u013d': 'L', '\u013f': 'L', '\u0141': 'L',
    '\u013a': 'l',  '\u013c': 'l', '\u013e': 'l', '\u0140': 'l', '\u0142': 'l',
    '\u0143': 'N',  '\u0145': 'N', '\u0147': 'N', '\u014a': 'N',
    '\u0144': 'n',  '\u0146': 'n', '\u0148': 'n', '\u014b': 'n',
    '\u014c': 'O',  '\u014e': 'O', '\u0150': 'O',
    '\u014d': 'o',  '\u014f': 'o', '\u0151': 'o',
    '\u0154': 'R',  '\u0156': 'R', '\u0158': 'R',
    '\u0155': 'r',  '\u0157': 'r', '\u0159': 'r',
    '\u015a': 'S',  '\u015c': 'S', '\u015e': 'S', '\u0160': 'S',
    '\u015b': 's',  '\u015d': 's', '\u015f': 's', '\u0161': 's',
    '\u0162': 'T',  '\u0164': 'T', '\u0166': 'T',
    '\u0163': 't',  '\u0165': 't', '\u0167': 't',
    '\u0168': 'U',  '\u016a': 'U', '\u016c': 'U', '\u016e': 'U', '\u0170': 'U', '\u0172': 'U',
    '\u0169': 'u',  '\u016b': 'u', '\u016d': 'u', '\u016f': 'u', '\u0171': 'u', '\u0173': 'u',
    '\u0174': 'W',  '\u0175': 'w',
    '\u0176': 'Y',  '\u0177': 'y', '\u0178': 'Y',
    '\u0179': 'Z',  '\u017b': 'Z', '\u017d': 'Z',
    '\u017a': 'z',  '\u017c': 'z', '\u017e': 'z',
    '\u0132': 'IJ', '\u0133': 'ij',
    '\u0152': 'Oe', '\u0153': 'oe',
    '\u0149': "'n", '\u017f': 's'
  };

  /** Used to map characters to HTML entities. */
  var htmlEscapes = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#39;'
  };

  /** Used to map HTML entities to characters. */
  var htmlUnescapes = {
    '&amp;': '&',
    '&lt;': '<',
    '&gt;': '>',
    '&quot;': '"',
    '&#39;': "'"
  };

  /** Used to escape characters for inclusion in compiled string literals. */
  var stringEscapes = {
    '\\': '\\',
    "'": "'",
    '\n': 'n',
    '\r': 'r',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  /** Built-in method references without a dependency on `root`. */
  var freeParseFloat = parseFloat,
      freeParseInt = parseInt;

  /** Detect free variable `global` from Node.js. */
  var freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;

  /** Detect free variable `self`. */
  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

  /** Used as a reference to the global object. */
  var root = freeGlobal || freeSelf || Function('return this')();

  /** Detect free variable `exports`. */
  var freeExports = 'object' == 'object' && exports && !exports.nodeType && exports;

  /** Detect free variable `module`. */
  var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

  /** Detect the popular CommonJS extension `module.exports`. */
  var moduleExports = freeModule && freeModule.exports === freeExports;

  /** Detect free variable `process` from Node.js. */
  var freeProcess = moduleExports && freeGlobal.process;

  /** Used to access faster Node.js helpers. */
  var nodeUtil = (function() {
    try {
      return freeProcess && freeProcess.binding && freeProcess.binding('util');
    } catch (e) {}
  }());

  /* Node.js helper references. */
  var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer,
      nodeIsDate = nodeUtil && nodeUtil.isDate,
      nodeIsMap = nodeUtil && nodeUtil.isMap,
      nodeIsRegExp = nodeUtil && nodeUtil.isRegExp,
      nodeIsSet = nodeUtil && nodeUtil.isSet,
      nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

  /*--------------------------------------------------------------------------*/

  /**
   * Adds the key-value `pair` to `map`.
   *
   * @private
   * @param {Object} map The map to modify.
   * @param {Array} pair The key-value pair to add.
   * @returns {Object} Returns `map`.
   */
  function addMapEntry(map, pair) {
    // Don't return `map.set` because it's not chainable in IE 11.
    map.set(pair[0], pair[1]);
    return map;
  }

  /**
   * Adds `value` to `set`.
   *
   * @private
   * @param {Object} set The set to modify.
   * @param {*} value The value to add.
   * @returns {Object} Returns `set`.
   */
  function addSetEntry(set, value) {
    // Don't return `set.add` because it's not chainable in IE 11.
    set.add(value);
    return set;
  }

  /**
   * A faster alternative to `Function#apply`, this function invokes `func`
   * with the `this` binding of `thisArg` and the arguments of `args`.
   *
   * @private
   * @param {Function} func The function to invoke.
   * @param {*} thisArg The `this` binding of `func`.
   * @param {Array} args The arguments to invoke `func` with.
   * @returns {*} Returns the result of `func`.
   */
  function apply(func, thisArg, args) {
    switch (args.length) {
      case 0: return func.call(thisArg);
      case 1: return func.call(thisArg, args[0]);
      case 2: return func.call(thisArg, args[0], args[1]);
      case 3: return func.call(thisArg, args[0], args[1], args[2]);
    }
    return func.apply(thisArg, args);
  }

  /**
   * A specialized version of `baseAggregator` for arrays.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} setter The function to set `accumulator` values.
   * @param {Function} iteratee The iteratee to transform keys.
   * @param {Object} accumulator The initial aggregated object.
   * @returns {Function} Returns `accumulator`.
   */
  function arrayAggregator(array, setter, iteratee, accumulator) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      var value = array[index];
      setter(accumulator, value, iteratee(value), array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.forEach` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  function arrayEach(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (iteratee(array[index], index, array) === false) {
        break;
      }
    }
    return array;
  }

  /**
   * A specialized version of `_.forEachRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  function arrayEachRight(array, iteratee) {
    var length = array == null ? 0 : array.length;

    while (length--) {
      if (iteratee(array[length], length, array) === false) {
        break;
      }
    }
    return array;
  }

  /**
   * A specialized version of `_.every` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if all elements pass the predicate check,
   *  else `false`.
   */
  function arrayEvery(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (!predicate(array[index], index, array)) {
        return false;
      }
    }
    return true;
  }

  /**
   * A specialized version of `_.filter` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {Array} Returns the new filtered array.
   */
  function arrayFilter(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (predicate(value, index, array)) {
        result[resIndex++] = value;
      }
    }
    return result;
  }

  /**
   * A specialized version of `_.includes` for arrays without support for
   * specifying an index to search from.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */
  function arrayIncludes(array, value) {
    var length = array == null ? 0 : array.length;
    return !!length && baseIndexOf(array, value, 0) > -1;
  }

  /**
   * This function is like `arrayIncludes` except that it accepts a comparator.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */
  function arrayIncludesWith(array, value, comparator) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (comparator(value, array[index])) {
        return true;
      }
    }
    return false;
  }

  /**
   * A specialized version of `_.map` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the new mapped array.
   */
  function arrayMap(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length,
        result = Array(length);

    while (++index < length) {
      result[index] = iteratee(array[index], index, array);
    }
    return result;
  }

  /**
   * Appends the elements of `values` to `array`.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {Array} values The values to append.
   * @returns {Array} Returns `array`.
   */
  function arrayPush(array, values) {
    var index = -1,
        length = values.length,
        offset = array.length;

    while (++index < length) {
      array[offset + index] = values[index];
    }
    return array;
  }

  /**
   * A specialized version of `_.reduce` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the first element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */
  function arrayReduce(array, iteratee, accumulator, initAccum) {
    var index = -1,
        length = array == null ? 0 : array.length;

    if (initAccum && length) {
      accumulator = array[++index];
    }
    while (++index < length) {
      accumulator = iteratee(accumulator, array[index], index, array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.reduceRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the last element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */
  function arrayReduceRight(array, iteratee, accumulator, initAccum) {
    var length = array == null ? 0 : array.length;
    if (initAccum && length) {
      accumulator = array[--length];
    }
    while (length--) {
      accumulator = iteratee(accumulator, array[length], length, array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.some` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if any element passes the predicate check,
   *  else `false`.
   */
  function arraySome(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (predicate(array[index], index, array)) {
        return true;
      }
    }
    return false;
  }

  /**
   * Gets the size of an ASCII `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */
  var asciiSize = baseProperty('length');

  /**
   * Converts an ASCII `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function asciiToArray(string) {
    return string.split('');
  }

  /**
   * Splits an ASCII `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */
  function asciiWords(string) {
    return string.match(reAsciiWord) || [];
  }

  /**
   * The base implementation of methods like `_.findKey` and `_.findLastKey`,
   * without support for iteratee shorthands, which iterates over `collection`
   * using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the found element or its key, else `undefined`.
   */
  function baseFindKey(collection, predicate, eachFunc) {
    var result;
    eachFunc(collection, function(value, key, collection) {
      if (predicate(value, key, collection)) {
        result = key;
        return false;
      }
    });
    return result;
  }

  /**
   * The base implementation of `_.findIndex` and `_.findLastIndex` without
   * support for iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {number} fromIndex The index to search from.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseFindIndex(array, predicate, fromIndex, fromRight) {
    var length = array.length,
        index = fromIndex + (fromRight ? 1 : -1);

    while ((fromRight ? index-- : ++index < length)) {
      if (predicate(array[index], index, array)) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOf(array, value, fromIndex) {
    return value === value
      ? strictIndexOf(array, value, fromIndex)
      : baseFindIndex(array, baseIsNaN, fromIndex);
  }

  /**
   * This function is like `baseIndexOf` except that it accepts a comparator.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOfWith(array, value, fromIndex, comparator) {
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (comparator(array[index], value)) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.isNaN` without support for number objects.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
   */
  function baseIsNaN(value) {
    return value !== value;
  }

  /**
   * The base implementation of `_.mean` and `_.meanBy` without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the mean.
   */
  function baseMean(array, iteratee) {
    var length = array == null ? 0 : array.length;
    return length ? (baseSum(array, iteratee) / length) : NAN;
  }

  /**
   * The base implementation of `_.property` without support for deep paths.
   *
   * @private
   * @param {string} key The key of the property to get.
   * @returns {Function} Returns the new accessor function.
   */
  function baseProperty(key) {
    return function(object) {
      return object == null ? undefined : object[key];
    };
  }

  /**
   * The base implementation of `_.propertyOf` without support for deep paths.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Function} Returns the new accessor function.
   */
  function basePropertyOf(object) {
    return function(key) {
      return object == null ? undefined : object[key];
    };
  }

  /**
   * The base implementation of `_.reduce` and `_.reduceRight`, without support
   * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} accumulator The initial value.
   * @param {boolean} initAccum Specify using the first or last element of
   *  `collection` as the initial value.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the accumulated value.
   */
  function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
    eachFunc(collection, function(value, index, collection) {
      accumulator = initAccum
        ? (initAccum = false, value)
        : iteratee(accumulator, value, index, collection);
    });
    return accumulator;
  }

  /**
   * The base implementation of `_.sortBy` which uses `comparer` to define the
   * sort order of `array` and replaces criteria objects with their corresponding
   * values.
   *
   * @private
   * @param {Array} array The array to sort.
   * @param {Function} comparer The function to define sort order.
   * @returns {Array} Returns `array`.
   */
  function baseSortBy(array, comparer) {
    var length = array.length;

    array.sort(comparer);
    while (length--) {
      array[length] = array[length].value;
    }
    return array;
  }

  /**
   * The base implementation of `_.sum` and `_.sumBy` without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the sum.
   */
  function baseSum(array, iteratee) {
    var result,
        index = -1,
        length = array.length;

    while (++index < length) {
      var current = iteratee(array[index]);
      if (current !== undefined) {
        result = result === undefined ? current : (result + current);
      }
    }
    return result;
  }

  /**
   * The base implementation of `_.times` without support for iteratee shorthands
   * or max array length checks.
   *
   * @private
   * @param {number} n The number of times to invoke `iteratee`.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the array of results.
   */
  function baseTimes(n, iteratee) {
    var index = -1,
        result = Array(n);

    while (++index < n) {
      result[index] = iteratee(index);
    }
    return result;
  }

  /**
   * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
   * of key-value pairs for `object` corresponding to the property names of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the key-value pairs.
   */
  function baseToPairs(object, props) {
    return arrayMap(props, function(key) {
      return [key, object[key]];
    });
  }

  /**
   * The base implementation of `_.unary` without support for storing metadata.
   *
   * @private
   * @param {Function} func The function to cap arguments for.
   * @returns {Function} Returns the new capped function.
   */
  function baseUnary(func) {
    return function(value) {
      return func(value);
    };
  }

  /**
   * The base implementation of `_.values` and `_.valuesIn` which creates an
   * array of `object` property values corresponding to the property names
   * of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the array of property values.
   */
  function baseValues(object, props) {
    return arrayMap(props, function(key) {
      return object[key];
    });
  }

  /**
   * Checks if a `cache` value for `key` exists.
   *
   * @private
   * @param {Object} cache The cache to query.
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function cacheHas(cache, key) {
    return cache.has(key);
  }

  /**
   * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the first unmatched string symbol.
   */
  function charsStartIndex(strSymbols, chrSymbols) {
    var index = -1,
        length = strSymbols.length;

    while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    return index;
  }

  /**
   * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the last unmatched string symbol.
   */
  function charsEndIndex(strSymbols, chrSymbols) {
    var index = strSymbols.length;

    while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    return index;
  }

  /**
   * Gets the number of `placeholder` occurrences in `array`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} placeholder The placeholder to search for.
   * @returns {number} Returns the placeholder count.
   */
  function countHolders(array, placeholder) {
    var length = array.length,
        result = 0;

    while (length--) {
      if (array[length] === placeholder) {
        ++result;
      }
    }
    return result;
  }

  /**
   * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
   * letters to basic Latin letters.
   *
   * @private
   * @param {string} letter The matched letter to deburr.
   * @returns {string} Returns the deburred letter.
   */
  var deburrLetter = basePropertyOf(deburredLetters);

  /**
   * Used by `_.escape` to convert characters to HTML entities.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  var escapeHtmlChar = basePropertyOf(htmlEscapes);

  /**
   * Used by `_.template` to escape characters for inclusion in compiled string literals.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  function escapeStringChar(chr) {
    return '\\' + stringEscapes[chr];
  }

  /**
   * Gets the value at `key` of `object`.
   *
   * @private
   * @param {Object} [object] The object to query.
   * @param {string} key The key of the property to get.
   * @returns {*} Returns the property value.
   */
  function getValue(object, key) {
    return object == null ? undefined : object[key];
  }

  /**
   * Checks if `string` contains Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a symbol is found, else `false`.
   */
  function hasUnicode(string) {
    return reHasUnicode.test(string);
  }

  /**
   * Checks if `string` contains a word composed of Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a word is found, else `false`.
   */
  function hasUnicodeWord(string) {
    return reHasUnicodeWord.test(string);
  }

  /**
   * Converts `iterator` to an array.
   *
   * @private
   * @param {Object} iterator The iterator to convert.
   * @returns {Array} Returns the converted array.
   */
  function iteratorToArray(iterator) {
    var data,
        result = [];

    while (!(data = iterator.next()).done) {
      result.push(data.value);
    }
    return result;
  }

  /**
   * Converts `map` to its key-value pairs.
   *
   * @private
   * @param {Object} map The map to convert.
   * @returns {Array} Returns the key-value pairs.
   */
  function mapToArray(map) {
    var index = -1,
        result = Array(map.size);

    map.forEach(function(value, key) {
      result[++index] = [key, value];
    });
    return result;
  }

  /**
   * Creates a unary function that invokes `func` with its argument transformed.
   *
   * @private
   * @param {Function} func The function to wrap.
   * @param {Function} transform The argument transform.
   * @returns {Function} Returns the new function.
   */
  function overArg(func, transform) {
    return function(arg) {
      return func(transform(arg));
    };
  }

  /**
   * Replaces all `placeholder` elements in `array` with an internal placeholder
   * and returns an array of their indexes.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {*} placeholder The placeholder to replace.
   * @returns {Array} Returns the new array of placeholder indexes.
   */
  function replaceHolders(array, placeholder) {
    var index = -1,
        length = array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (value === placeholder || value === PLACEHOLDER) {
        array[index] = PLACEHOLDER;
        result[resIndex++] = index;
      }
    }
    return result;
  }

  /**
   * Converts `set` to an array of its values.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the values.
   */
  function setToArray(set) {
    var index = -1,
        result = Array(set.size);

    set.forEach(function(value) {
      result[++index] = value;
    });
    return result;
  }

  /**
   * Converts `set` to its value-value pairs.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the value-value pairs.
   */
  function setToPairs(set) {
    var index = -1,
        result = Array(set.size);

    set.forEach(function(value) {
      result[++index] = [value, value];
    });
    return result;
  }

  /**
   * A specialized version of `_.indexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function strictIndexOf(array, value, fromIndex) {
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (array[index] === value) {
        return index;
      }
    }
    return -1;
  }

  /**
   * A specialized version of `_.lastIndexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function strictLastIndexOf(array, value, fromIndex) {
    var index = fromIndex + 1;
    while (index--) {
      if (array[index] === value) {
        return index;
      }
    }
    return index;
  }

  /**
   * Gets the number of symbols in `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the string size.
   */
  function stringSize(string) {
    return hasUnicode(string)
      ? unicodeSize(string)
      : asciiSize(string);
  }

  /**
   * Converts `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function stringToArray(string) {
    return hasUnicode(string)
      ? unicodeToArray(string)
      : asciiToArray(string);
  }

  /**
   * Used by `_.unescape` to convert HTML entities to characters.
   *
   * @private
   * @param {string} chr The matched character to unescape.
   * @returns {string} Returns the unescaped character.
   */
  var unescapeHtmlChar = basePropertyOf(htmlUnescapes);

  /**
   * Gets the size of a Unicode `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */
  function unicodeSize(string) {
    var result = reUnicode.lastIndex = 0;
    while (reUnicode.test(string)) {
      ++result;
    }
    return result;
  }

  /**
   * Converts a Unicode `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function unicodeToArray(string) {
    return string.match(reUnicode) || [];
  }

  /**
   * Splits a Unicode `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */
  function unicodeWords(string) {
    return string.match(reUnicodeWord) || [];
  }

  /*--------------------------------------------------------------------------*/

  /**
   * Create a new pristine `lodash` function using the `context` object.
   *
   * @static
   * @memberOf _
   * @since 1.1.0
   * @category Util
   * @param {Object} [context=root] The context object.
   * @returns {Function} Returns a new `lodash` function.
   * @example
   *
   * _.mixin({ 'foo': _.constant('foo') });
   *
   * var lodash = _.runInContext();
   * lodash.mixin({ 'bar': lodash.constant('bar') });
   *
   * _.isFunction(_.foo);
   * // => true
   * _.isFunction(_.bar);
   * // => false
   *
   * lodash.isFunction(lodash.foo);
   * // => false
   * lodash.isFunction(lodash.bar);
   * // => true
   *
   * // Create a suped-up `defer` in Node.js.
   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
   */
  var runInContext = (function runInContext(context) {
    context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));

    /** Built-in constructor references. */
    var Array = context.Array,
        Date = context.Date,
        Error = context.Error,
        Function = context.Function,
        Math = context.Math,
        Object = context.Object,
        RegExp = context.RegExp,
        String = context.String,
        TypeError = context.TypeError;

    /** Used for built-in method references. */
    var arrayProto = Array.prototype,
        funcProto = Function.prototype,
        objectProto = Object.prototype;

    /** Used to detect overreaching core-js shims. */
    var coreJsData = context['__core-js_shared__'];

    /** Used to resolve the decompiled source of functions. */
    var funcToString = funcProto.toString;

    /** Used to check objects for own properties. */
    var hasOwnProperty = objectProto.hasOwnProperty;

    /** Used to generate unique IDs. */
    var idCounter = 0;

    /** Used to detect methods masquerading as native. */
    var maskSrcKey = (function() {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
      return uid ? ('Symbol(src)_1.' + uid) : '';
    }());

    /**
     * Used to resolve the
     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
     * of values.
     */
    var nativeObjectToString = objectProto.toString;

    /** Used to infer the `Object` constructor. */
    var objectCtorString = funcToString.call(Object);

    /** Used to restore the original `_` reference in `_.noConflict`. */
    var oldDash = root._;

    /** Used to detect if a method is native. */
    var reIsNative = RegExp('^' +
      funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
      .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
    );

    /** Built-in value references. */
    var Buffer = moduleExports ? context.Buffer : undefined,
        Symbol = context.Symbol,
        Uint8Array = context.Uint8Array,
        allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined,
        getPrototype = overArg(Object.getPrototypeOf, Object),
        objectCreate = Object.create,
        propertyIsEnumerable = objectProto.propertyIsEnumerable,
        splice = arrayProto.splice,
        spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined,
        symIterator = Symbol ? Symbol.iterator : undefined,
        symToStringTag = Symbol ? Symbol.toStringTag : undefined;

    var defineProperty = (function() {
      try {
        var func = getNative(Object, 'defineProperty');
        func({}, '', {});
        return func;
      } catch (e) {}
    }());

    /** Mocked built-ins. */
    var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout,
        ctxNow = Date && Date.now !== root.Date.now && Date.now,
        ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeCeil = Math.ceil,
        nativeFloor = Math.floor,
        nativeGetSymbols = Object.getOwnPropertySymbols,
        nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
        nativeIsFinite = context.isFinite,
        nativeJoin = arrayProto.join,
        nativeKeys = overArg(Object.keys, Object),
        nativeMax = Math.max,
        nativeMin = Math.min,
        nativeNow = Date.now,
        nativeParseInt = context.parseInt,
        nativeRandom = Math.random,
        nativeReverse = arrayProto.reverse;

    /* Built-in method references that are verified to be native. */
    var DataView = getNative(context, 'DataView'),
        Map = getNative(context, 'Map'),
        Promise = getNative(context, 'Promise'),
        Set = getNative(context, 'Set'),
        WeakMap = getNative(context, 'WeakMap'),
        nativeCreate = getNative(Object, 'create');

    /** Used to store function metadata. */
    var metaMap = WeakMap && new WeakMap;

    /** Used to lookup unminified function names. */
    var realNames = {};

    /** Used to detect maps, sets, and weakmaps. */
    var dataViewCtorString = toSource(DataView),
        mapCtorString = toSource(Map),
        promiseCtorString = toSource(Promise),
        setCtorString = toSource(Set),
        weakMapCtorString = toSource(WeakMap);

    /** Used to convert symbols to primitives and strings. */
    var symbolProto = Symbol ? Symbol.prototype : undefined,
        symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,
        symbolToString = symbolProto ? symbolProto.toString : undefined;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` object which wraps `value` to enable implicit method
     * chain sequences. Methods that operate on and return arrays, collections,
     * and functions can be chained together. Methods that retrieve a single value
     * or may return a primitive value will automatically end the chain sequence
     * and return the unwrapped value. Otherwise, the value must be unwrapped
     * with `_#value`.
     *
     * Explicit chain sequences, which must be unwrapped with `_#value`, may be
     * enabled using `_.chain`.
     *
     * The execution of chained methods is lazy, that is, it's deferred until
     * `_#value` is implicitly or explicitly called.
     *
     * Lazy evaluation allows several methods to support shortcut fusion.
     * Shortcut fusion is an optimization to merge iteratee calls; this avoids
     * the creation of intermediate arrays and can greatly reduce the number of
     * iteratee executions. Sections of a chain sequence qualify for shortcut
     * fusion if the section is applied to an array and iteratees accept only
     * one argument. The heuristic for whether a section qualifies for shortcut
     * fusion is subject to change.
     *
     * Chaining is supported in custom builds as long as the `_#value` method is
     * directly or indirectly included in the build.
     *
     * In addition to lodash methods, wrappers have `Array` and `String` methods.
     *
     * The wrapper `Array` methods are:
     * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
     *
     * The wrapper `String` methods are:
     * `replace` and `split`
     *
     * The wrapper methods that support shortcut fusion are:
     * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
     * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
     * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
     *
     * The chainable wrapper methods are:
     * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
     * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
     * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
     * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
     * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
     * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
     * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
     * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
     * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
     * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
     * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
     * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
     * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
     * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
     * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
     * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
     * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
     * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
     * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
     * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
     * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
     * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
     * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
     * `zipObject`, `zipObjectDeep`, and `zipWith`
     *
     * The wrapper methods that are **not** chainable by default are:
     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
     * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
     * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
     * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
     * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
     * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
     * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
     * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
     * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
     * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
     * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
     * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
     * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
     * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
     * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
     * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
     * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
     * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
     * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
     * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
     * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
     * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
     * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
     * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
     * `upperFirst`, `value`, and `words`
     *
     * @name _
     * @constructor
     * @category Seq
     * @param {*} value The value to wrap in a `lodash` instance.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2, 3]);
     *
     * // Returns an unwrapped value.
     * wrapped.reduce(_.add);
     * // => 6
     *
     * // Returns a wrapped value.
     * var squares = wrapped.map(square);
     *
     * _.isArray(squares);
     * // => false
     *
     * _.isArray(squares.value());
     * // => true
     */
    function lodash(value) {
      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
        if (value instanceof LodashWrapper) {
          return value;
        }
        if (hasOwnProperty.call(value, '__wrapped__')) {
          return wrapperClone(value);
        }
      }
      return new LodashWrapper(value);
    }

    /**
     * The base implementation of `_.create` without support for assigning
     * properties to the created object.
     *
     * @private
     * @param {Object} proto The object to inherit from.
     * @returns {Object} Returns the new object.
     */
    var baseCreate = (function() {
      function object() {}
      return function(proto) {
        if (!isObject(proto)) {
          return {};
        }
        if (objectCreate) {
          return objectCreate(proto);
        }
        object.prototype = proto;
        var result = new object;
        object.prototype = undefined;
        return result;
      };
    }());

    /**
     * The function whose prototype chain sequence wrappers inherit from.
     *
     * @private
     */
    function baseLodash() {
      // No operation performed.
    }

    /**
     * The base constructor for creating `lodash` wrapper objects.
     *
     * @private
     * @param {*} value The value to wrap.
     * @param {boolean} [chainAll] Enable explicit method chain sequences.
     */
    function LodashWrapper(value, chainAll) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__chain__ = !!chainAll;
      this.__index__ = 0;
      this.__values__ = undefined;
    }

    /**
     * By default, the template delimiters used by lodash are like those in
     * embedded Ruby (ERB) as well as ES2015 template strings. Change the
     * following template settings to use alternative delimiters.
     *
     * @static
     * @memberOf _
     * @type {Object}
     */
    lodash.templateSettings = {

      /**
       * Used to detect `data` property values to be HTML-escaped.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'escape': reEscape,

      /**
       * Used to detect code to be evaluated.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'evaluate': reEvaluate,

      /**
       * Used to detect `data` property values to inject.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'interpolate': reInterpolate,

      /**
       * Used to reference the data object in the template text.
       *
       * @memberOf _.templateSettings
       * @type {string}
       */
      'variable': '',

      /**
       * Used to import variables into the compiled template.
       *
       * @memberOf _.templateSettings
       * @type {Object}
       */
      'imports': {

        /**
         * A reference to the `lodash` function.
         *
         * @memberOf _.templateSettings.imports
         * @type {Function}
         */
        '_': lodash
      }
    };

    // Ensure wrappers are instances of `baseLodash`.
    lodash.prototype = baseLodash.prototype;
    lodash.prototype.constructor = lodash;

    LodashWrapper.prototype = baseCreate(baseLodash.prototype);
    LodashWrapper.prototype.constructor = LodashWrapper;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
     *
     * @private
     * @constructor
     * @param {*} value The value to wrap.
     */
    function LazyWrapper(value) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__dir__ = 1;
      this.__filtered__ = false;
      this.__iteratees__ = [];
      this.__takeCount__ = MAX_ARRAY_LENGTH;
      this.__views__ = [];
    }

    /**
     * Creates a clone of the lazy wrapper object.
     *
     * @private
     * @name clone
     * @memberOf LazyWrapper
     * @returns {Object} Returns the cloned `LazyWrapper` object.
     */
    function lazyClone() {
      var result = new LazyWrapper(this.__wrapped__);
      result.__actions__ = copyArray(this.__actions__);
      result.__dir__ = this.__dir__;
      result.__filtered__ = this.__filtered__;
      result.__iteratees__ = copyArray(this.__iteratees__);
      result.__takeCount__ = this.__takeCount__;
      result.__views__ = copyArray(this.__views__);
      return result;
    }

    /**
     * Reverses the direction of lazy iteration.
     *
     * @private
     * @name reverse
     * @memberOf LazyWrapper
     * @returns {Object} Returns the new reversed `LazyWrapper` object.
     */
    function lazyReverse() {
      if (this.__filtered__) {
        var result = new LazyWrapper(this);
        result.__dir__ = -1;
        result.__filtered__ = true;
      } else {
        result = this.clone();
        result.__dir__ *= -1;
      }
      return result;
    }

    /**
     * Extracts the unwrapped value from its lazy wrapper.
     *
     * @private
     * @name value
     * @memberOf LazyWrapper
     * @returns {*} Returns the unwrapped value.
     */
    function lazyValue() {
      var array = this.__wrapped__.value(),
          dir = this.__dir__,
          isArr = isArray(array),
          isRight = dir < 0,
          arrLength = isArr ? array.length : 0,
          view = getView(0, arrLength, this.__views__),
          start = view.start,
          end = view.end,
          length = end - start,
          index = isRight ? end : (start - 1),
          iteratees = this.__iteratees__,
          iterLength = iteratees.length,
          resIndex = 0,
          takeCount = nativeMin(length, this.__takeCount__);

      if (!isArr || (!isRight && arrLength == length && takeCount == length)) {
        return baseWrapperValue(array, this.__actions__);
      }
      var result = [];

      outer:
      while (length-- && resIndex < takeCount) {
        index += dir;

        var iterIndex = -1,
            value = array[index];

        while (++iterIndex < iterLength) {
          var data = iteratees[iterIndex],
              iteratee = data.iteratee,
              type = data.type,
              computed = iteratee(value);

          if (type == LAZY_MAP_FLAG) {
            value = computed;
          } else if (!computed) {
            if (type == LAZY_FILTER_FLAG) {
              continue outer;
            } else {
              break outer;
            }
          }
        }
        result[resIndex++] = value;
      }
      return result;
    }

    // Ensure `LazyWrapper` is an instance of `baseLodash`.
    LazyWrapper.prototype = baseCreate(baseLodash.prototype);
    LazyWrapper.prototype.constructor = LazyWrapper;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a hash object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Hash(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the hash.
     *
     * @private
     * @name clear
     * @memberOf Hash
     */
    function hashClear() {
      this.__data__ = nativeCreate ? nativeCreate(null) : {};
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the hash.
     *
     * @private
     * @name delete
     * @memberOf Hash
     * @param {Object} hash The hash to modify.
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function hashDelete(key) {
      var result = this.has(key) && delete this.__data__[key];
      this.size -= result ? 1 : 0;
      return result;
    }

    /**
     * Gets the hash value for `key`.
     *
     * @private
     * @name get
     * @memberOf Hash
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function hashGet(key) {
      var data = this.__data__;
      if (nativeCreate) {
        var result = data[key];
        return result === HASH_UNDEFINED ? undefined : result;
      }
      return hasOwnProperty.call(data, key) ? data[key] : undefined;
    }

    /**
     * Checks if a hash value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Hash
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function hashHas(key) {
      var data = this.__data__;
      return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);
    }

    /**
     * Sets the hash `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Hash
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the hash instance.
     */
    function hashSet(key, value) {
      var data = this.__data__;
      this.size += this.has(key) ? 0 : 1;
      data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
      return this;
    }

    // Add methods to `Hash`.
    Hash.prototype.clear = hashClear;
    Hash.prototype['delete'] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates an list cache object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function ListCache(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the list cache.
     *
     * @private
     * @name clear
     * @memberOf ListCache
     */
    function listCacheClear() {
      this.__data__ = [];
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the list cache.
     *
     * @private
     * @name delete
     * @memberOf ListCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function listCacheDelete(key) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      if (index < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index == lastIndex) {
        data.pop();
      } else {
        splice.call(data, index, 1);
      }
      --this.size;
      return true;
    }

    /**
     * Gets the list cache value for `key`.
     *
     * @private
     * @name get
     * @memberOf ListCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function listCacheGet(key) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      return index < 0 ? undefined : data[index][1];
    }

    /**
     * Checks if a list cache value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf ListCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function listCacheHas(key) {
      return assocIndexOf(this.__data__, key) > -1;
    }

    /**
     * Sets the list cache `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf ListCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the list cache instance.
     */
    function listCacheSet(key, value) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      if (index < 0) {
        ++this.size;
        data.push([key, value]);
      } else {
        data[index][1] = value;
      }
      return this;
    }

    // Add methods to `ListCache`.
    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype['delete'] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a map cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function MapCache(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the map.
     *
     * @private
     * @name clear
     * @memberOf MapCache
     */
    function mapCacheClear() {
      this.size = 0;
      this.__data__ = {
        'hash': new Hash,
        'map': new (Map || ListCache),
        'string': new Hash
      };
    }

    /**
     * Removes `key` and its value from the map.
     *
     * @private
     * @name delete
     * @memberOf MapCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function mapCacheDelete(key) {
      var result = getMapData(this, key)['delete'](key);
      this.size -= result ? 1 : 0;
      return result;
    }

    /**
     * Gets the map value for `key`.
     *
     * @private
     * @name get
     * @memberOf MapCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function mapCacheGet(key) {
      return getMapData(this, key).get(key);
    }

    /**
     * Checks if a map value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf MapCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function mapCacheHas(key) {
      return getMapData(this, key).has(key);
    }

    /**
     * Sets the map `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf MapCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the map cache instance.
     */
    function mapCacheSet(key, value) {
      var data = getMapData(this, key),
          size = data.size;

      data.set(key, value);
      this.size += data.size == size ? 0 : 1;
      return this;
    }

    // Add methods to `MapCache`.
    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype['delete'] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;

    /*------------------------------------------------------------------------*/

    /**
     *
     * Creates an array cache object to store unique values.
     *
     * @private
     * @constructor
     * @param {Array} [values] The values to cache.
     */
    function SetCache(values) {
      var index = -1,
          length = values == null ? 0 : values.length;

      this.__data__ = new MapCache;
      while (++index < length) {
        this.add(values[index]);
      }
    }

    /**
     * Adds `value` to the array cache.
     *
     * @private
     * @name add
     * @memberOf SetCache
     * @alias push
     * @param {*} value The value to cache.
     * @returns {Object} Returns the cache instance.
     */
    function setCacheAdd(value) {
      this.__data__.set(value, HASH_UNDEFINED);
      return this;
    }

    /**
     * Checks if `value` is in the array cache.
     *
     * @private
     * @name has
     * @memberOf SetCache
     * @param {*} value The value to search for.
     * @returns {number} Returns `true` if `value` is found, else `false`.
     */
    function setCacheHas(value) {
      return this.__data__.has(value);
    }

    // Add methods to `SetCache`.
    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
    SetCache.prototype.has = setCacheHas;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a stack cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Stack(entries) {
      var data = this.__data__ = new ListCache(entries);
      this.size = data.size;
    }

    /**
     * Removes all key-value entries from the stack.
     *
     * @private
     * @name clear
     * @memberOf Stack
     */
    function stackClear() {
      this.__data__ = new ListCache;
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the stack.
     *
     * @private
     * @name delete
     * @memberOf Stack
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function stackDelete(key) {
      var data = this.__data__,
          result = data['delete'](key);

      this.size = data.size;
      return result;
    }

    /**
     * Gets the stack value for `key`.
     *
     * @private
     * @name get
     * @memberOf Stack
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function stackGet(key) {
      return this.__data__.get(key);
    }

    /**
     * Checks if a stack value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Stack
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function stackHas(key) {
      return this.__data__.has(key);
    }

    /**
     * Sets the stack `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Stack
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the stack cache instance.
     */
    function stackSet(key, value) {
      var data = this.__data__;
      if (data instanceof ListCache) {
        var pairs = data.__data__;
        if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
          pairs.push([key, value]);
          this.size = ++data.size;
          return this;
        }
        data = this.__data__ = new MapCache(pairs);
      }
      data.set(key, value);
      this.size = data.size;
      return this;
    }

    // Add methods to `Stack`.
    Stack.prototype.clear = stackClear;
    Stack.prototype['delete'] = stackDelete;
    Stack.prototype.get = stackGet;
    Stack.prototype.has = stackHas;
    Stack.prototype.set = stackSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates an array of the enumerable property names of the array-like `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @param {boolean} inherited Specify returning inherited property names.
     * @returns {Array} Returns the array of property names.
     */
    function arrayLikeKeys(value, inherited) {
      var isArr = isArray(value),
          isArg = !isArr && isArguments(value),
          isBuff = !isArr && !isArg && isBuffer(value),
          isType = !isArr && !isArg && !isBuff && isTypedArray(value),
          skipIndexes = isArr || isArg || isBuff || isType,
          result = skipIndexes ? baseTimes(value.length, String) : [],
          length = result.length;

      for (var key in value) {
        if ((inherited || hasOwnProperty.call(value, key)) &&
            !(skipIndexes && (
               // Safari 9 has enumerable `arguments.length` in strict mode.
               key == 'length' ||
               // Node.js 0.10 has enumerable non-index properties on buffers.
               (isBuff && (key == 'offset' || key == 'parent')) ||
               // PhantomJS 2 has enumerable non-index properties on typed arrays.
               (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
               // Skip index properties.
               isIndex(key, length)
            ))) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * A specialized version of `_.sample` for arrays.
     *
     * @private
     * @param {Array} array The array to sample.
     * @returns {*} Returns the random element.
     */
    function arraySample(array) {
      var length = array.length;
      return length ? array[baseRandom(0, length - 1)] : undefined;
    }

    /**
     * A specialized version of `_.sampleSize` for arrays.
     *
     * @private
     * @param {Array} array The array to sample.
     * @param {number} n The number of elements to sample.
     * @returns {Array} Returns the random elements.
     */
    function arraySampleSize(array, n) {
      return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
    }

    /**
     * A specialized version of `_.shuffle` for arrays.
     *
     * @private
     * @param {Array} array The array to shuffle.
     * @returns {Array} Returns the new shuffled array.
     */
    function arrayShuffle(array) {
      return shuffleSelf(copyArray(array));
    }

    /**
     * This function is like `assignValue` except that it doesn't assign
     * `undefined` values.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function assignMergeValue(object, key, value) {
      if ((value !== undefined && !eq(object[key], value)) ||
          (value === undefined && !(key in object))) {
        baseAssignValue(object, key, value);
      }
    }

    /**
     * Assigns `value` to `key` of `object` if the existing value is not equivalent
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function assignValue(object, key, value) {
      var objValue = object[key];
      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
          (value === undefined && !(key in object))) {
        baseAssignValue(object, key, value);
      }
    }

    /**
     * Gets the index at which the `key` is found in `array` of key-value pairs.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} key The key to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */
    function assocIndexOf(array, key) {
      var length = array.length;
      while (length--) {
        if (eq(array[length][0], key)) {
          return length;
        }
      }
      return -1;
    }

    /**
     * Aggregates elements of `collection` on `accumulator` with keys transformed
     * by `iteratee` and values set by `setter`.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform keys.
     * @param {Object} accumulator The initial aggregated object.
     * @returns {Function} Returns `accumulator`.
     */
    function baseAggregator(collection, setter, iteratee, accumulator) {
      baseEach(collection, function(value, key, collection) {
        setter(accumulator, value, iteratee(value), collection);
      });
      return accumulator;
    }

    /**
     * The base implementation of `_.assign` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssign(object, source) {
      return object && copyObject(source, keys(source), object);
    }

    /**
     * The base implementation of `_.assignIn` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssignIn(object, source) {
      return object && copyObject(source, keysIn(source), object);
    }

    /**
     * The base implementation of `assignValue` and `assignMergeValue` without
     * value checks.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function baseAssignValue(object, key, value) {
      if (key == '__proto__' && defineProperty) {
        defineProperty(object, key, {
          'configurable': true,
          'enumerable': true,
          'value': value,
          'writable': true
        });
      } else {
        object[key] = value;
      }
    }

    /**
     * The base implementation of `_.at` without support for individual paths.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {string[]} paths The property paths to pick.
     * @returns {Array} Returns the picked elements.
     */
    function baseAt(object, paths) {
      var index = -1,
          length = paths.length,
          result = Array(length),
          skip = object == null;

      while (++index < length) {
        result[index] = skip ? undefined : get(object, paths[index]);
      }
      return result;
    }

    /**
     * The base implementation of `_.clamp` which doesn't coerce arguments.
     *
     * @private
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     */
    function baseClamp(number, lower, upper) {
      if (number === number) {
        if (upper !== undefined) {
          number = number <= upper ? number : upper;
        }
        if (lower !== undefined) {
          number = number >= lower ? number : lower;
        }
      }
      return number;
    }

    /**
     * The base implementation of `_.clone` and `_.cloneDeep` which tracks
     * traversed objects.
     *
     * @private
     * @param {*} value The value to clone.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Deep clone
     *  2 - Flatten inherited properties
     *  4 - Clone symbols
     * @param {Function} [customizer] The function to customize cloning.
     * @param {string} [key] The key of `value`.
     * @param {Object} [object] The parent object of `value`.
     * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
     * @returns {*} Returns the cloned value.
     */
    function baseClone(value, bitmask, customizer, key, object, stack) {
      var result,
          isDeep = bitmask & CLONE_DEEP_FLAG,
          isFlat = bitmask & CLONE_FLAT_FLAG,
          isFull = bitmask & CLONE_SYMBOLS_FLAG;

      if (customizer) {
        result = object ? customizer(value, key, object, stack) : customizer(value);
      }
      if (result !== undefined) {
        return result;
      }
      if (!isObject(value)) {
        return value;
      }
      var isArr = isArray(value);
      if (isArr) {
        result = initCloneArray(value);
        if (!isDeep) {
          return copyArray(value, result);
        }
      } else {
        var tag = getTag(value),
            isFunc = tag == funcTag || tag == genTag;

        if (isBuffer(value)) {
          return cloneBuffer(value, isDeep);
        }
        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
          result = (isFlat || isFunc) ? {} : initCloneObject(value);
          if (!isDeep) {
            return isFlat
              ? copySymbolsIn(value, baseAssignIn(result, value))
              : copySymbols(value, baseAssign(result, value));
          }
        } else {
          if (!cloneableTags[tag]) {
            return object ? value : {};
          }
          result = initCloneByTag(value, tag, baseClone, isDeep);
        }
      }
      // Check for circular references and return its corresponding clone.
      stack || (stack = new Stack);
      var stacked = stack.get(value);
      if (stacked) {
        return stacked;
      }
      stack.set(value, result);

      var keysFunc = isFull
        ? (isFlat ? getAllKeysIn : getAllKeys)
        : (isFlat ? keysIn : keys);

      var props = isArr ? undefined : keysFunc(value);
      arrayEach(props || value, function(subValue, key) {
        if (props) {
          key = subValue;
          subValue = value[key];
        }
        // Recursively populate clone (susceptible to call stack limits).
        assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
      });
      return result;
    }

    /**
     * The base implementation of `_.conforms` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new spec function.
     */
    function baseConforms(source) {
      var props = keys(source);
      return function(object) {
        return baseConformsTo(object, source, props);
      };
    }

    /**
     * The base implementation of `_.conformsTo` which accepts `props` to check.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property predicates to conform to.
     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
     */
    function baseConformsTo(object, source, props) {
      var length = props.length;
      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (length--) {
        var key = props[length],
            predicate = source[key],
            value = object[key];

        if ((value === undefined && !(key in object)) || !predicate(value)) {
          return false;
        }
      }
      return true;
    }

    /**
     * The base implementation of `_.delay` and `_.defer` which accepts `args`
     * to provide to `func`.
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {Array} args The arguments to provide to `func`.
     * @returns {number|Object} Returns the timer id or timeout object.
     */
    function baseDelay(func, wait, args) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return setTimeout(function() { func.apply(undefined, args); }, wait);
    }

    /**
     * The base implementation of methods like `_.difference` without support
     * for excluding multiple arrays or iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Array} values The values to exclude.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     */
    function baseDifference(array, values, iteratee, comparator) {
      var index = -1,
          includes = arrayIncludes,
          isCommon = true,
          length = array.length,
          result = [],
          valuesLength = values.length;

      if (!length) {
        return result;
      }
      if (iteratee) {
        values = arrayMap(values, baseUnary(iteratee));
      }
      if (comparator) {
        includes = arrayIncludesWith;
        isCommon = false;
      }
      else if (values.length >= LARGE_ARRAY_SIZE) {
        includes = cacheHas;
        isCommon = false;
        values = new SetCache(values);
      }
      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee == null ? value : iteratee(value);

        value = (comparator || value !== 0) ? value : 0;
        if (isCommon && computed === computed) {
          var valuesIndex = valuesLength;
          while (valuesIndex--) {
            if (values[valuesIndex] === computed) {
              continue outer;
            }
          }
          result.push(value);
        }
        else if (!includes(values, computed, comparator)) {
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.forEach` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */
    var baseEach = createBaseEach(baseForOwn);

    /**
     * The base implementation of `_.forEachRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */
    var baseEachRight = createBaseEach(baseForOwnRight, true);

    /**
     * The base implementation of `_.every` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`
     */
    function baseEvery(collection, predicate) {
      var result = true;
      baseEach(collection, function(value, index, collection) {
        result = !!predicate(value, index, collection);
        return result;
      });
      return result;
    }

    /**
     * The base implementation of methods like `_.max` and `_.min` which accepts a
     * `comparator` to determine the extremum value.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The iteratee invoked per iteration.
     * @param {Function} comparator The comparator used to compare values.
     * @returns {*} Returns the extremum value.
     */
    function baseExtremum(array, iteratee, comparator) {
      var index = -1,
          length = array.length;

      while (++index < length) {
        var value = array[index],
            current = iteratee(value);

        if (current != null && (computed === undefined
              ? (current === current && !isSymbol(current))
              : comparator(current, computed)
            )) {
          var computed = current,
              result = value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.fill` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     */
    function baseFill(array, value, start, end) {
      var length = array.length;

      start = toInteger(start);
      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = (end === undefined || end > length) ? length : toInteger(end);
      if (end < 0) {
        end += length;
      }
      end = start > end ? 0 : toLength(end);
      while (start < end) {
        array[start++] = value;
      }
      return array;
    }

    /**
     * The base implementation of `_.filter` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     */
    function baseFilter(collection, predicate) {
      var result = [];
      baseEach(collection, function(value, index, collection) {
        if (predicate(value, index, collection)) {
          result.push(value);
        }
      });
      return result;
    }

    /**
     * The base implementation of `_.flatten` with support for restricting flattening.
     *
     * @private
     * @param {Array} array The array to flatten.
     * @param {number} depth The maximum recursion depth.
     * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
     * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
     * @param {Array} [result=[]] The initial result value.
     * @returns {Array} Returns the new flattened array.
     */
    function baseFlatten(array, depth, predicate, isStrict, result) {
      var index = -1,
          length = array.length;

      predicate || (predicate = isFlattenable);
      result || (result = []);

      while (++index < length) {
        var value = array[index];
        if (depth > 0 && predicate(value)) {
          if (depth > 1) {
            // Recursively flatten arrays (susceptible to call stack limits).
            baseFlatten(value, depth - 1, predicate, isStrict, result);
          } else {
            arrayPush(result, value);
          }
        } else if (!isStrict) {
          result[result.length] = value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `baseForOwn` which iterates over `object`
     * properties returned by `keysFunc` and invokes `iteratee` for each property.
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseFor = createBaseFor();

    /**
     * This function is like `baseFor` except that it iterates over properties
     * in the opposite order.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseForRight = createBaseFor(true);

    /**
     * The base implementation of `_.forOwn` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwn(object, iteratee) {
      return object && baseFor(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwnRight(object, iteratee) {
      return object && baseForRight(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.functions` which creates an array of
     * `object` function property names filtered from `props`.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Array} props The property names to filter.
     * @returns {Array} Returns the function names.
     */
    function baseFunctions(object, props) {
      return arrayFilter(props, function(key) {
        return isFunction(object[key]);
      });
    }

    /**
     * The base implementation of `_.get` without support for default values.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @returns {*} Returns the resolved value.
     */
    function baseGet(object, path) {
      path = castPath(path, object);

      var index = 0,
          length = path.length;

      while (object != null && index < length) {
        object = object[toKey(path[index++])];
      }
      return (index && index == length) ? object : undefined;
    }

    /**
     * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
     * `keysFunc` and `symbolsFunc` to get the enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @param {Function} symbolsFunc The function to get the symbols of `object`.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function baseGetAllKeys(object, keysFunc, symbolsFunc) {
      var result = keysFunc(object);
      return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
    }

    /**
     * The base implementation of `getTag` without fallbacks for buggy environments.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    function baseGetTag(value) {
      if (value == null) {
        return value === undefined ? undefinedTag : nullTag;
      }
      return (symToStringTag && symToStringTag in Object(value))
        ? getRawTag(value)
        : objectToString(value);
    }

    /**
     * The base implementation of `_.gt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     */
    function baseGt(value, other) {
      return value > other;
    }

    /**
     * The base implementation of `_.has` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */
    function baseHas(object, key) {
      return object != null && hasOwnProperty.call(object, key);
    }

    /**
     * The base implementation of `_.hasIn` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */
    function baseHasIn(object, key) {
      return object != null && key in Object(object);
    }

    /**
     * The base implementation of `_.inRange` which doesn't coerce arguments.
     *
     * @private
     * @param {number} number The number to check.
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     */
    function baseInRange(number, start, end) {
      return number >= nativeMin(start, end) && number < nativeMax(start, end);
    }

    /**
     * The base implementation of methods like `_.intersection`, without support
     * for iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of shared values.
     */
    function baseIntersection(arrays, iteratee, comparator) {
      var includes = comparator ? arrayIncludesWith : arrayIncludes,
          length = arrays[0].length,
          othLength = arrays.length,
          othIndex = othLength,
          caches = Array(othLength),
          maxLength = Infinity,
          result = [];

      while (othIndex--) {
        var array = arrays[othIndex];
        if (othIndex && iteratee) {
          array = arrayMap(array, baseUnary(iteratee));
        }
        maxLength = nativeMin(array.length, maxLength);
        caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120))
          ? new SetCache(othIndex && array)
          : undefined;
      }
      array = arrays[0];

      var index = -1,
          seen = caches[0];

      outer:
      while (++index < length && result.length < maxLength) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        value = (comparator || value !== 0) ? value : 0;
        if (!(seen
              ? cacheHas(seen, computed)
              : includes(result, computed, comparator)
            )) {
          othIndex = othLength;
          while (--othIndex) {
            var cache = caches[othIndex];
            if (!(cache
                  ? cacheHas(cache, computed)
                  : includes(arrays[othIndex], computed, comparator))
                ) {
              continue outer;
            }
          }
          if (seen) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.invert` and `_.invertBy` which inverts
     * `object` with values transformed by `iteratee` and set by `setter`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform values.
     * @param {Object} accumulator The initial inverted object.
     * @returns {Function} Returns `accumulator`.
     */
    function baseInverter(object, setter, iteratee, accumulator) {
      baseForOwn(object, function(value, key, object) {
        setter(accumulator, iteratee(value), key, object);
      });
      return accumulator;
    }

    /**
     * The base implementation of `_.invoke` without support for individual
     * method arguments.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {Array} args The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     */
    function baseInvoke(object, path, args) {
      path = castPath(path, object);
      object = parent(object, path);
      var func = object == null ? object : object[toKey(last(path))];
      return func == null ? undefined : apply(func, object, args);
    }

    /**
     * The base implementation of `_.isArguments`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     */
    function baseIsArguments(value) {
      return isObjectLike(value) && baseGetTag(value) == argsTag;
    }

    /**
     * The base implementation of `_.isArrayBuffer` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
     */
    function baseIsArrayBuffer(value) {
      return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
    }

    /**
     * The base implementation of `_.isDate` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
     */
    function baseIsDate(value) {
      return isObjectLike(value) && baseGetTag(value) == dateTag;
    }

    /**
     * The base implementation of `_.isEqual` which supports partial comparisons
     * and tracks traversed objects.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Unordered comparison
     *  2 - Partial comparison
     * @param {Function} [customizer] The function to customize comparisons.
     * @param {Object} [stack] Tracks traversed `value` and `other` objects.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     */
    function baseIsEqual(value, other, bitmask, customizer, stack) {
      if (value === other) {
        return true;
      }
      if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
        return value !== value && other !== other;
      }
      return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
    }

    /**
     * A specialized version of `baseIsEqual` for arrays and objects which performs
     * deep comparisons and tracks traversed objects enabling objects with circular
     * references to be compared.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} [stack] Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
      var objIsArr = isArray(object),
          othIsArr = isArray(other),
          objTag = objIsArr ? arrayTag : getTag(object),
          othTag = othIsArr ? arrayTag : getTag(other);

      objTag = objTag == argsTag ? objectTag : objTag;
      othTag = othTag == argsTag ? objectTag : othTag;

      var objIsObj = objTag == objectTag,
          othIsObj = othTag == objectTag,
          isSameTag = objTag == othTag;

      if (isSameTag && isBuffer(object)) {
        if (!isBuffer(other)) {
          return false;
        }
        objIsArr = true;
        objIsObj = false;
      }
      if (isSameTag && !objIsObj) {
        stack || (stack = new Stack);
        return (objIsArr || isTypedArray(object))
          ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
          : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
      }
      if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

        if (objIsWrapped || othIsWrapped) {
          var objUnwrapped = objIsWrapped ? object.value() : object,
              othUnwrapped = othIsWrapped ? other.value() : other;

          stack || (stack = new Stack);
          return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
        }
      }
      if (!isSameTag) {
        return false;
      }
      stack || (stack = new Stack);
      return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
    }

    /**
     * The base implementation of `_.isMap` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     */
    function baseIsMap(value) {
      return isObjectLike(value) && getTag(value) == mapTag;
    }

    /**
     * The base implementation of `_.isMatch` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Array} matchData The property names, values, and compare flags to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     */
    function baseIsMatch(object, source, matchData, customizer) {
      var index = matchData.length,
          length = index,
          noCustomizer = !customizer;

      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (index--) {
        var data = matchData[index];
        if ((noCustomizer && data[2])
              ? data[1] !== object[data[0]]
              : !(data[0] in object)
            ) {
          return false;
        }
      }
      while (++index < length) {
        data = matchData[index];
        var key = data[0],
            objValue = object[key],
            srcValue = data[1];

        if (noCustomizer && data[2]) {
          if (objValue === undefined && !(key in object)) {
            return false;
          }
        } else {
          var stack = new Stack;
          if (customizer) {
            var result = customizer(objValue, srcValue, key, object, source, stack);
          }
          if (!(result === undefined
                ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)
                : result
              )) {
            return false;
          }
        }
      }
      return true;
    }

    /**
     * The base implementation of `_.isNative` without bad shim checks.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     */
    function baseIsNative(value) {
      if (!isObject(value) || isMasked(value)) {
        return false;
      }
      var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource(value));
    }

    /**
     * The base implementation of `_.isRegExp` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
     */
    function baseIsRegExp(value) {
      return isObjectLike(value) && baseGetTag(value) == regexpTag;
    }

    /**
     * The base implementation of `_.isSet` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     */
    function baseIsSet(value) {
      return isObjectLike(value) && getTag(value) == setTag;
    }

    /**
     * The base implementation of `_.isTypedArray` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     */
    function baseIsTypedArray(value) {
      return isObjectLike(value) &&
        isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
    }

    /**
     * The base implementation of `_.iteratee`.
     *
     * @private
     * @param {*} [value=_.identity] The value to convert to an iteratee.
     * @returns {Function} Returns the iteratee.
     */
    function baseIteratee(value) {
      // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
      // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
      if (typeof value == 'function') {
        return value;
      }
      if (value == null) {
        return identity;
      }
      if (typeof value == 'object') {
        return isArray(value)
          ? baseMatchesProperty(value[0], value[1])
          : baseMatches(value);
      }
      return property(value);
    }

    /**
     * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeys(object) {
      if (!isPrototype(object)) {
        return nativeKeys(object);
      }
      var result = [];
      for (var key in Object(object)) {
        if (hasOwnProperty.call(object, key) && key != 'constructor') {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeysIn(object) {
      if (!isObject(object)) {
        return nativeKeysIn(object);
      }
      var isProto = isPrototype(object),
          result = [];

      for (var key in object) {
        if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.lt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     */
    function baseLt(value, other) {
      return value < other;
    }

    /**
     * The base implementation of `_.map` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     */
    function baseMap(collection, iteratee) {
      var index = -1,
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value, key, collection) {
        result[++index] = iteratee(value, key, collection);
      });
      return result;
    }

    /**
     * The base implementation of `_.matches` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     */
    function baseMatches(source) {
      var matchData = getMatchData(source);
      if (matchData.length == 1 && matchData[0][2]) {
        return matchesStrictComparable(matchData[0][0], matchData[0][1]);
      }
      return function(object) {
        return object === source || baseIsMatch(object, source, matchData);
      };
    }

    /**
     * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
     *
     * @private
     * @param {string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */
    function baseMatchesProperty(path, srcValue) {
      if (isKey(path) && isStrictComparable(srcValue)) {
        return matchesStrictComparable(toKey(path), srcValue);
      }
      return function(object) {
        var objValue = get(object, path);
        return (objValue === undefined && objValue === srcValue)
          ? hasIn(object, path)
          : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
      };
    }

    /**
     * The base implementation of `_.merge` without support for multiple sources.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} [customizer] The function to customize merged values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */
    function baseMerge(object, source, srcIndex, customizer, stack) {
      if (object === source) {
        return;
      }
      baseFor(source, function(srcValue, key) {
        if (isObject(srcValue)) {
          stack || (stack = new Stack);
          baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
        }
        else {
          var newValue = customizer
            ? customizer(object[key], srcValue, (key + ''), object, source, stack)
            : undefined;

          if (newValue === undefined) {
            newValue = srcValue;
          }
          assignMergeValue(object, key, newValue);
        }
      }, keysIn);
    }

    /**
     * A specialized version of `baseMerge` for arrays and objects which performs
     * deep merges and tracks traversed objects enabling objects with circular
     * references to be merged.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {string} key The key of the value to merge.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} mergeFunc The function to merge values.
     * @param {Function} [customizer] The function to customize assigned values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */
    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
      var objValue = object[key],
          srcValue = source[key],
          stacked = stack.get(srcValue);

      if (stacked) {
        assignMergeValue(object, key, stacked);
        return;
      }
      var newValue = customizer
        ? customizer(objValue, srcValue, (key + ''), object, source, stack)
        : undefined;

      var isCommon = newValue === undefined;

      if (isCommon) {
        var isArr = isArray(srcValue),
            isBuff = !isArr && isBuffer(srcValue),
            isTyped = !isArr && !isBuff && isTypedArray(srcValue);

        newValue = srcValue;
        if (isArr || isBuff || isTyped) {
          if (isArray(objValue)) {
            newValue = objValue;
          }
          else if (isArrayLikeObject(objValue)) {
            newValue = copyArray(objValue);
          }
          else if (isBuff) {
            isCommon = false;
            newValue = cloneBuffer(srcValue, true);
          }
          else if (isTyped) {
            isCommon = false;
            newValue = cloneTypedArray(srcValue, true);
          }
          else {
            newValue = [];
          }
        }
        else if (isPlainObject(srcValue) || isArguments(srcValue)) {
          newValue = objValue;
          if (isArguments(objValue)) {
            newValue = toPlainObject(objValue);
          }
          else if (!isObject(objValue) || (srcIndex && isFunction(objValue))) {
            newValue = initCloneObject(srcValue);
          }
        }
        else {
          isCommon = false;
        }
      }
      if (isCommon) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        stack.set(srcValue, newValue);
        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
        stack['delete'](srcValue);
      }
      assignMergeValue(object, key, newValue);
    }

    /**
     * The base implementation of `_.nth` which doesn't coerce arguments.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {number} n The index of the element to return.
     * @returns {*} Returns the nth element of `array`.
     */
    function baseNth(array, n) {
      var length = array.length;
      if (!length) {
        return;
      }
      n += n < 0 ? length : 0;
      return isIndex(n, length) ? array[n] : undefined;
    }

    /**
     * The base implementation of `_.orderBy` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
     * @param {string[]} orders The sort orders of `iteratees`.
     * @returns {Array} Returns the new sorted array.
     */
    function baseOrderBy(collection, iteratees, orders) {
      var index = -1;
      iteratees = arrayMap(iteratees.length ? iteratees : [identity], baseUnary(getIteratee()));

      var result = baseMap(collection, function(value, key, collection) {
        var criteria = arrayMap(iteratees, function(iteratee) {
          return iteratee(value);
        });
        return { 'criteria': criteria, 'index': ++index, 'value': value };
      });

      return baseSortBy(result, function(object, other) {
        return compareMultiple(object, other, orders);
      });
    }

    /**
     * The base implementation of `_.pick` without support for individual
     * property identifiers.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} paths The property paths to pick.
     * @returns {Object} Returns the new object.
     */
    function basePick(object, paths) {
      return basePickBy(object, paths, function(value, path) {
        return hasIn(object, path);
      });
    }

    /**
     * The base implementation of  `_.pickBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} paths The property paths to pick.
     * @param {Function} predicate The function invoked per property.
     * @returns {Object} Returns the new object.
     */
    function basePickBy(object, paths, predicate) {
      var index = -1,
          length = paths.length,
          result = {};

      while (++index < length) {
        var path = paths[index],
            value = baseGet(object, path);

        if (predicate(value, path)) {
          baseSet(result, castPath(path, object), value);
        }
      }
      return result;
    }

    /**
     * A specialized version of `baseProperty` which supports deep paths.
     *
     * @private
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     */
    function basePropertyDeep(path) {
      return function(object) {
        return baseGet(object, path);
      };
    }

    /**
     * The base implementation of `_.pullAllBy` without support for iteratee
     * shorthands.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     */
    function basePullAll(array, values, iteratee, comparator) {
      var indexOf = comparator ? baseIndexOfWith : baseIndexOf,
          index = -1,
          length = values.length,
          seen = array;

      if (array === values) {
        values = copyArray(values);
      }
      if (iteratee) {
        seen = arrayMap(array, baseUnary(iteratee));
      }
      while (++index < length) {
        var fromIndex = 0,
            value = values[index],
            computed = iteratee ? iteratee(value) : value;

        while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {
          if (seen !== array) {
            splice.call(seen, fromIndex, 1);
          }
          splice.call(array, fromIndex, 1);
        }
      }
      return array;
    }

    /**
     * The base implementation of `_.pullAt` without support for individual
     * indexes or capturing the removed elements.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {number[]} indexes The indexes of elements to remove.
     * @returns {Array} Returns `array`.
     */
    function basePullAt(array, indexes) {
      var length = array ? indexes.length : 0,
          lastIndex = length - 1;

      while (length--) {
        var index = indexes[length];
        if (length == lastIndex || index !== previous) {
          var previous = index;
          if (isIndex(index)) {
            splice.call(array, index, 1);
          } else {
            baseUnset(array, index);
          }
        }
      }
      return array;
    }

    /**
     * The base implementation of `_.random` without support for returning
     * floating-point numbers.
     *
     * @private
     * @param {number} lower The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the random number.
     */
    function baseRandom(lower, upper) {
      return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
    }

    /**
     * The base implementation of `_.range` and `_.rangeRight` which doesn't
     * coerce arguments.
     *
     * @private
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @param {number} step The value to increment or decrement by.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the range of numbers.
     */
    function baseRange(start, end, step, fromRight) {
      var index = -1,
          length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
          result = Array(length);

      while (length--) {
        result[fromRight ? length : ++index] = start;
        start += step;
      }
      return result;
    }

    /**
     * The base implementation of `_.repeat` which doesn't coerce arguments.
     *
     * @private
     * @param {string} string The string to repeat.
     * @param {number} n The number of times to repeat the string.
     * @returns {string} Returns the repeated string.
     */
    function baseRepeat(string, n) {
      var result = '';
      if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
        return result;
      }
      // Leverage the exponentiation by squaring algorithm for a faster repeat.
      // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
      do {
        if (n % 2) {
          result += string;
        }
        n = nativeFloor(n / 2);
        if (n) {
          string += string;
        }
      } while (n);

      return result;
    }

    /**
     * The base implementation of `_.rest` which doesn't validate or coerce arguments.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     */
    function baseRest(func, start) {
      return setToString(overRest(func, start, identity), func + '');
    }

    /**
     * The base implementation of `_.sample`.
     *
     * @private
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     */
    function baseSample(collection) {
      return arraySample(values(collection));
    }

    /**
     * The base implementation of `_.sampleSize` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to sample.
     * @param {number} n The number of elements to sample.
     * @returns {Array} Returns the random elements.
     */
    function baseSampleSize(collection, n) {
      var array = values(collection);
      return shuffleSelf(array, baseClamp(n, 0, array.length));
    }

    /**
     * The base implementation of `_.set`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */
    function baseSet(object, path, value, customizer) {
      if (!isObject(object)) {
        return object;
      }
      path = castPath(path, object);

      var index = -1,
          length = path.length,
          lastIndex = length - 1,
          nested = object;

      while (nested != null && ++index < length) {
        var key = toKey(path[index]),
            newValue = value;

        if (index != lastIndex) {
          var objValue = nested[key];
          newValue = customizer ? customizer(objValue, key, nested) : undefined;
          if (newValue === undefined) {
            newValue = isObject(objValue)
              ? objValue
              : (isIndex(path[index + 1]) ? [] : {});
          }
        }
        assignValue(nested, key, newValue);
        nested = nested[key];
      }
      return object;
    }

    /**
     * The base implementation of `setData` without support for hot loop shorting.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var baseSetData = !metaMap ? identity : function(func, data) {
      metaMap.set(func, data);
      return func;
    };

    /**
     * The base implementation of `setToString` without support for hot loop shorting.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */
    var baseSetToString = !defineProperty ? identity : function(func, string) {
      return defineProperty(func, 'toString', {
        'configurable': true,
        'enumerable': false,
        'value': constant(string),
        'writable': true
      });
    };

    /**
     * The base implementation of `_.shuffle`.
     *
     * @private
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     */
    function baseShuffle(collection) {
      return shuffleSelf(values(collection));
    }

    /**
     * The base implementation of `_.slice` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseSlice(array, start, end) {
      var index = -1,
          length = array.length;

      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = end > length ? length : end;
      if (end < 0) {
        end += length;
      }
      length = start > end ? 0 : ((end - start) >>> 0);
      start >>>= 0;

      var result = Array(length);
      while (++index < length) {
        result[index] = array[index + start];
      }
      return result;
    }

    /**
     * The base implementation of `_.some` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     */
    function baseSome(collection, predicate) {
      var result;

      baseEach(collection, function(value, index, collection) {
        result = predicate(value, index, collection);
        return !result;
      });
      return !!result;
    }

    /**
     * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
     * performs a binary search of `array` to determine the index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function baseSortedIndex(array, value, retHighest) {
      var low = 0,
          high = array == null ? low : array.length;

      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
        while (low < high) {
          var mid = (low + high) >>> 1,
              computed = array[mid];

          if (computed !== null && !isSymbol(computed) &&
              (retHighest ? (computed <= value) : (computed < value))) {
            low = mid + 1;
          } else {
            high = mid;
          }
        }
        return high;
      }
      return baseSortedIndexBy(array, value, identity, retHighest);
    }

    /**
     * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
     * which invokes `iteratee` for `value` and each element of `array` to compute
     * their sort ranking. The iteratee is invoked with one argument; (value).
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} iteratee The iteratee invoked per element.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function baseSortedIndexBy(array, value, iteratee, retHighest) {
      value = iteratee(value);

      var low = 0,
          high = array == null ? 0 : array.length,
          valIsNaN = value !== value,
          valIsNull = value === null,
          valIsSymbol = isSymbol(value),
          valIsUndefined = value === undefined;

      while (low < high) {
        var mid = nativeFloor((low + high) / 2),
            computed = iteratee(array[mid]),
            othIsDefined = computed !== undefined,
            othIsNull = computed === null,
            othIsReflexive = computed === computed,
            othIsSymbol = isSymbol(computed);

        if (valIsNaN) {
          var setLow = retHighest || othIsReflexive;
        } else if (valIsUndefined) {
          setLow = othIsReflexive && (retHighest || othIsDefined);
        } else if (valIsNull) {
          setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
        } else if (valIsSymbol) {
          setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
        } else if (othIsNull || othIsSymbol) {
          setLow = false;
        } else {
          setLow = retHighest ? (computed <= value) : (computed < value);
        }
        if (setLow) {
          low = mid + 1;
        } else {
          high = mid;
        }
      }
      return nativeMin(high, MAX_ARRAY_INDEX);
    }

    /**
     * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without
     * support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */
    function baseSortedUniq(array, iteratee) {
      var index = -1,
          length = array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        if (!index || !eq(computed, seen)) {
          var seen = computed;
          result[resIndex++] = value === 0 ? 0 : value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.toNumber` which doesn't ensure correct
     * conversions of binary, hexadecimal, or octal string values.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     */
    function baseToNumber(value) {
      if (typeof value == 'number') {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      return +value;
    }

    /**
     * The base implementation of `_.toString` which doesn't convert nullish
     * values to empty strings.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {string} Returns the string.
     */
    function baseToString(value) {
      // Exit early for strings to avoid a performance hit in some environments.
      if (typeof value == 'string') {
        return value;
      }
      if (isArray(value)) {
        // Recursively convert values (susceptible to call stack limits).
        return arrayMap(value, baseToString) + '';
      }
      if (isSymbol(value)) {
        return symbolToString ? symbolToString.call(value) : '';
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
    }

    /**
     * The base implementation of `_.uniqBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */
    function baseUniq(array, iteratee, comparator) {
      var index = -1,
          includes = arrayIncludes,
          length = array.length,
          isCommon = true,
          result = [],
          seen = result;

      if (comparator) {
        isCommon = false;
        includes = arrayIncludesWith;
      }
      else if (length >= LARGE_ARRAY_SIZE) {
        var set = iteratee ? null : createSet(array);
        if (set) {
          return setToArray(set);
        }
        isCommon = false;
        includes = cacheHas;
        seen = new SetCache;
      }
      else {
        seen = iteratee ? [] : result;
      }
      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        value = (comparator || value !== 0) ? value : 0;
        if (isCommon && computed === computed) {
          var seenIndex = seen.length;
          while (seenIndex--) {
            if (seen[seenIndex] === computed) {
              continue outer;
            }
          }
          if (iteratee) {
            seen.push(computed);
          }
          result.push(value);
        }
        else if (!includes(seen, computed, comparator)) {
          if (seen !== result) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.unset`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The property path to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     */
    function baseUnset(object, path) {
      path = castPath(path, object);
      object = parent(object, path);
      return object == null || delete object[toKey(last(path))];
    }

    /**
     * The base implementation of `_.update`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to update.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */
    function baseUpdate(object, path, updater, customizer) {
      return baseSet(object, path, updater(baseGet(object, path)), customizer);
    }

    /**
     * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
     * without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {Function} predicate The function invoked per iteration.
     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseWhile(array, predicate, isDrop, fromRight) {
      var length = array.length,
          index = fromRight ? length : -1;

      while ((fromRight ? index-- : ++index < length) &&
        predicate(array[index], index, array)) {}

      return isDrop
        ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))
        : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));
    }

    /**
     * The base implementation of `wrapperValue` which returns the result of
     * performing a sequence of actions on the unwrapped `value`, where each
     * successive action is supplied the return value of the previous.
     *
     * @private
     * @param {*} value The unwrapped value.
     * @param {Array} actions Actions to perform to resolve the unwrapped value.
     * @returns {*} Returns the resolved value.
     */
    function baseWrapperValue(value, actions) {
      var result = value;
      if (result instanceof LazyWrapper) {
        result = result.value();
      }
      return arrayReduce(actions, function(result, action) {
        return action.func.apply(action.thisArg, arrayPush([result], action.args));
      }, result);
    }

    /**
     * The base implementation of methods like `_.xor`, without support for
     * iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of values.
     */
    function baseXor(arrays, iteratee, comparator) {
      var length = arrays.length;
      if (length < 2) {
        return length ? baseUniq(arrays[0]) : [];
      }
      var index = -1,
          result = Array(length);

      while (++index < length) {
        var array = arrays[index],
            othIndex = -1;

        while (++othIndex < length) {
          if (othIndex != index) {
            result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);
          }
        }
      }
      return baseUniq(baseFlatten(result, 1), iteratee, comparator);
    }

    /**
     * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
     *
     * @private
     * @param {Array} props The property identifiers.
     * @param {Array} values The property values.
     * @param {Function} assignFunc The function to assign values.
     * @returns {Object} Returns the new object.
     */
    function baseZipObject(props, values, assignFunc) {
      var index = -1,
          length = props.length,
          valsLength = values.length,
          result = {};

      while (++index < length) {
        var value = index < valsLength ? values[index] : undefined;
        assignFunc(result, props[index], value);
      }
      return result;
    }

    /**
     * Casts `value` to an empty array if it's not an array like object.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Array|Object} Returns the cast array-like object.
     */
    function castArrayLikeObject(value) {
      return isArrayLikeObject(value) ? value : [];
    }

    /**
     * Casts `value` to `identity` if it's not a function.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Function} Returns cast function.
     */
    function castFunction(value) {
      return typeof value == 'function' ? value : identity;
    }

    /**
     * Casts `value` to a path array if it's not one.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {Object} [object] The object to query keys on.
     * @returns {Array} Returns the cast property path array.
     */
    function castPath(value, object) {
      if (isArray(value)) {
        return value;
      }
      return isKey(value, object) ? [value] : stringToPath(toString(value));
    }

    /**
     * A `baseRest` alias which can be replaced with `identity` by module
     * replacement plugins.
     *
     * @private
     * @type {Function}
     * @param {Function} func The function to apply a rest parameter to.
     * @returns {Function} Returns the new function.
     */
    var castRest = baseRest;

    /**
     * Casts `array` to a slice if it's needed.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {number} start The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the cast slice.
     */
    function castSlice(array, start, end) {
      var length = array.length;
      end = end === undefined ? length : end;
      return (!start && end >= length) ? array : baseSlice(array, start, end);
    }

    /**
     * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).
     *
     * @private
     * @param {number|Object} id The timer id or timeout object of the timer to clear.
     */
    var clearTimeout = ctxClearTimeout || function(id) {
      return root.clearTimeout(id);
    };

    /**
     * Creates a clone of  `buffer`.
     *
     * @private
     * @param {Buffer} buffer The buffer to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Buffer} Returns the cloned buffer.
     */
    function cloneBuffer(buffer, isDeep) {
      if (isDeep) {
        return buffer.slice();
      }
      var length = buffer.length,
          result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

      buffer.copy(result);
      return result;
    }

    /**
     * Creates a clone of `arrayBuffer`.
     *
     * @private
     * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
     * @returns {ArrayBuffer} Returns the cloned array buffer.
     */
    function cloneArrayBuffer(arrayBuffer) {
      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
      new Uint8Array(result).set(new Uint8Array(arrayBuffer));
      return result;
    }

    /**
     * Creates a clone of `dataView`.
     *
     * @private
     * @param {Object} dataView The data view to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned data view.
     */
    function cloneDataView(dataView, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
      return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
    }

    /**
     * Creates a clone of `map`.
     *
     * @private
     * @param {Object} map The map to clone.
     * @param {Function} cloneFunc The function to clone values.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned map.
     */
    function cloneMap(map, isDeep, cloneFunc) {
      var array = isDeep ? cloneFunc(mapToArray(map), CLONE_DEEP_FLAG) : mapToArray(map);
      return arrayReduce(array, addMapEntry, new map.constructor);
    }

    /**
     * Creates a clone of `regexp`.
     *
     * @private
     * @param {Object} regexp The regexp to clone.
     * @returns {Object} Returns the cloned regexp.
     */
    function cloneRegExp(regexp) {
      var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
      result.lastIndex = regexp.lastIndex;
      return result;
    }

    /**
     * Creates a clone of `set`.
     *
     * @private
     * @param {Object} set The set to clone.
     * @param {Function} cloneFunc The function to clone values.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned set.
     */
    function cloneSet(set, isDeep, cloneFunc) {
      var array = isDeep ? cloneFunc(setToArray(set), CLONE_DEEP_FLAG) : setToArray(set);
      return arrayReduce(array, addSetEntry, new set.constructor);
    }

    /**
     * Creates a clone of the `symbol` object.
     *
     * @private
     * @param {Object} symbol The symbol object to clone.
     * @returns {Object} Returns the cloned symbol object.
     */
    function cloneSymbol(symbol) {
      return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
    }

    /**
     * Creates a clone of `typedArray`.
     *
     * @private
     * @param {Object} typedArray The typed array to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned typed array.
     */
    function cloneTypedArray(typedArray, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
    }

    /**
     * Compares values to sort them in ascending order.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {number} Returns the sort order indicator for `value`.
     */
    function compareAscending(value, other) {
      if (value !== other) {
        var valIsDefined = value !== undefined,
            valIsNull = value === null,
            valIsReflexive = value === value,
            valIsSymbol = isSymbol(value);

        var othIsDefined = other !== undefined,
            othIsNull = other === null,
            othIsReflexive = other === other,
            othIsSymbol = isSymbol(other);

        if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||
            (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||
            (valIsNull && othIsDefined && othIsReflexive) ||
            (!valIsDefined && othIsReflexive) ||
            !valIsReflexive) {
          return 1;
        }
        if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||
            (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||
            (othIsNull && valIsDefined && valIsReflexive) ||
            (!othIsDefined && valIsReflexive) ||
            !othIsReflexive) {
          return -1;
        }
      }
      return 0;
    }

    /**
     * Used by `_.orderBy` to compare multiple properties of a value to another
     * and stable sort them.
     *
     * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
     * specify an order of "desc" for descending or "asc" for ascending sort order
     * of corresponding values.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {boolean[]|string[]} orders The order to sort by for each property.
     * @returns {number} Returns the sort order indicator for `object`.
     */
    function compareMultiple(object, other, orders) {
      var index = -1,
          objCriteria = object.criteria,
          othCriteria = other.criteria,
          length = objCriteria.length,
          ordersLength = orders.length;

      while (++index < length) {
        var result = compareAscending(objCriteria[index], othCriteria[index]);
        if (result) {
          if (index >= ordersLength) {
            return result;
          }
          var order = orders[index];
          return result * (order == 'desc' ? -1 : 1);
        }
      }
      // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
      // that causes it, under certain circumstances, to provide the same value for
      // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
      // for more details.
      //
      // This also ensures a stable sort in V8 and other engines.
      // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
      return object.index - other.index;
    }

    /**
     * Creates an array that is the composition of partially applied arguments,
     * placeholders, and provided arguments into a single array of arguments.
     *
     * @private
     * @param {Array} args The provided arguments.
     * @param {Array} partials The arguments to prepend to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgs(args, partials, holders, isCurried) {
      var argsIndex = -1,
          argsLength = args.length,
          holdersLength = holders.length,
          leftIndex = -1,
          leftLength = partials.length,
          rangeLength = nativeMax(argsLength - holdersLength, 0),
          result = Array(leftLength + rangeLength),
          isUncurried = !isCurried;

      while (++leftIndex < leftLength) {
        result[leftIndex] = partials[leftIndex];
      }
      while (++argsIndex < holdersLength) {
        if (isUncurried || argsIndex < argsLength) {
          result[holders[argsIndex]] = args[argsIndex];
        }
      }
      while (rangeLength--) {
        result[leftIndex++] = args[argsIndex++];
      }
      return result;
    }

    /**
     * This function is like `composeArgs` except that the arguments composition
     * is tailored for `_.partialRight`.
     *
     * @private
     * @param {Array} args The provided arguments.
     * @param {Array} partials The arguments to append to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgsRight(args, partials, holders, isCurried) {
      var argsIndex = -1,
          argsLength = args.length,
          holdersIndex = -1,
          holdersLength = holders.length,
          rightIndex = -1,
          rightLength = partials.length,
          rangeLength = nativeMax(argsLength - holdersLength, 0),
          result = Array(rangeLength + rightLength),
          isUncurried = !isCurried;

      while (++argsIndex < rangeLength) {
        result[argsIndex] = args[argsIndex];
      }
      var offset = argsIndex;
      while (++rightIndex < rightLength) {
        result[offset + rightIndex] = partials[rightIndex];
      }
      while (++holdersIndex < holdersLength) {
        if (isUncurried || argsIndex < argsLength) {
          result[offset + holders[holdersIndex]] = args[argsIndex++];
        }
      }
      return result;
    }

    /**
     * Copies the values of `source` to `array`.
     *
     * @private
     * @param {Array} source The array to copy values from.
     * @param {Array} [array=[]] The array to copy values to.
     * @returns {Array} Returns `array`.
     */
    function copyArray(source, array) {
      var index = -1,
          length = source.length;

      array || (array = Array(length));
      while (++index < length) {
        array[index] = source[index];
      }
      return array;
    }

    /**
     * Copies properties of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy properties from.
     * @param {Array} props The property identifiers to copy.
     * @param {Object} [object={}] The object to copy properties to.
     * @param {Function} [customizer] The function to customize copied values.
     * @returns {Object} Returns `object`.
     */
    function copyObject(source, props, object, customizer) {
      var isNew = !object;
      object || (object = {});

      var index = -1,
          length = props.length;

      while (++index < length) {
        var key = props[index];

        var newValue = customizer
          ? customizer(object[key], source[key], key, object, source)
          : undefined;

        if (newValue === undefined) {
          newValue = source[key];
        }
        if (isNew) {
          baseAssignValue(object, key, newValue);
        } else {
          assignValue(object, key, newValue);
        }
      }
      return object;
    }

    /**
     * Copies own symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */
    function copySymbols(source, object) {
      return copyObject(source, getSymbols(source), object);
    }

    /**
     * Copies own and inherited symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */
    function copySymbolsIn(source, object) {
      return copyObject(source, getSymbolsIn(source), object);
    }

    /**
     * Creates a function like `_.groupBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} [initializer] The accumulator object initializer.
     * @returns {Function} Returns the new aggregator function.
     */
    function createAggregator(setter, initializer) {
      return function(collection, iteratee) {
        var func = isArray(collection) ? arrayAggregator : baseAggregator,
            accumulator = initializer ? initializer() : {};

        return func(collection, setter, getIteratee(iteratee, 2), accumulator);
      };
    }

    /**
     * Creates a function like `_.assign`.
     *
     * @private
     * @param {Function} assigner The function to assign values.
     * @returns {Function} Returns the new assigner function.
     */
    function createAssigner(assigner) {
      return baseRest(function(object, sources) {
        var index = -1,
            length = sources.length,
            customizer = length > 1 ? sources[length - 1] : undefined,
            guard = length > 2 ? sources[2] : undefined;

        customizer = (assigner.length > 3 && typeof customizer == 'function')
          ? (length--, customizer)
          : undefined;

        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
          customizer = length < 3 ? undefined : customizer;
          length = 1;
        }
        object = Object(object);
        while (++index < length) {
          var source = sources[index];
          if (source) {
            assigner(object, source, index, customizer);
          }
        }
        return object;
      });
    }

    /**
     * Creates a `baseEach` or `baseEachRight` function.
     *
     * @private
     * @param {Function} eachFunc The function to iterate over a collection.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseEach(eachFunc, fromRight) {
      return function(collection, iteratee) {
        if (collection == null) {
          return collection;
        }
        if (!isArrayLike(collection)) {
          return eachFunc(collection, iteratee);
        }
        var length = collection.length,
            index = fromRight ? length : -1,
            iterable = Object(collection);

        while ((fromRight ? index-- : ++index < length)) {
          if (iteratee(iterable[index], index, iterable) === false) {
            break;
          }
        }
        return collection;
      };
    }

    /**
     * Creates a base function for methods like `_.forIn` and `_.forOwn`.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseFor(fromRight) {
      return function(object, iteratee, keysFunc) {
        var index = -1,
            iterable = Object(object),
            props = keysFunc(object),
            length = props.length;

        while (length--) {
          var key = props[fromRight ? length : ++index];
          if (iteratee(iterable[key], key, iterable) === false) {
            break;
          }
        }
        return object;
      };
    }

    /**
     * Creates a function that wraps `func` to invoke it with the optional `this`
     * binding of `thisArg`.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createBind(func, bitmask, thisArg) {
      var isBind = bitmask & WRAP_BIND_FLAG,
          Ctor = createCtor(func);

      function wrapper() {
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return fn.apply(isBind ? thisArg : this, arguments);
      }
      return wrapper;
    }

    /**
     * Creates a function like `_.lowerFirst`.
     *
     * @private
     * @param {string} methodName The name of the `String` case method to use.
     * @returns {Function} Returns the new case function.
     */
    function createCaseFirst(methodName) {
      return function(string) {
        string = toString(string);

        var strSymbols = hasUnicode(string)
          ? stringToArray(string)
          : undefined;

        var chr = strSymbols
          ? strSymbols[0]
          : string.charAt(0);

        var trailing = strSymbols
          ? castSlice(strSymbols, 1).join('')
          : string.slice(1);

        return chr[methodName]() + trailing;
      };
    }

    /**
     * Creates a function like `_.camelCase`.
     *
     * @private
     * @param {Function} callback The function to combine each word.
     * @returns {Function} Returns the new compounder function.
     */
    function createCompounder(callback) {
      return function(string) {
        return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
      };
    }

    /**
     * Creates a function that produces an instance of `Ctor` regardless of
     * whether it was invoked as part of a `new` expression or by `call` or `apply`.
     *
     * @private
     * @param {Function} Ctor The constructor to wrap.
     * @returns {Function} Returns the new wrapped function.
     */
    function createCtor(Ctor) {
      return function() {
        // Use a `switch` statement to work with class constructors. See
        // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
        // for more details.
        var args = arguments;
        switch (args.length) {
          case 0: return new Ctor;
          case 1: return new Ctor(args[0]);
          case 2: return new Ctor(args[0], args[1]);
          case 3: return new Ctor(args[0], args[1], args[2]);
          case 4: return new Ctor(args[0], args[1], args[2], args[3]);
          case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);
          case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
          case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
        }
        var thisBinding = baseCreate(Ctor.prototype),
            result = Ctor.apply(thisBinding, args);

        // Mimic the constructor's `return` behavior.
        // See https://es5.github.io/#x13.2.2 for more details.
        return isObject(result) ? result : thisBinding;
      };
    }

    /**
     * Creates a function that wraps `func` to enable currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {number} arity The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createCurry(func, bitmask, arity) {
      var Ctor = createCtor(func);

      function wrapper() {
        var length = arguments.length,
            args = Array(length),
            index = length,
            placeholder = getHolder(wrapper);

        while (index--) {
          args[index] = arguments[index];
        }
        var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)
          ? []
          : replaceHolders(args, placeholder);

        length -= holders.length;
        if (length < arity) {
          return createRecurry(
            func, bitmask, createHybrid, wrapper.placeholder, undefined,
            args, holders, undefined, undefined, arity - length);
        }
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return apply(fn, this, args);
      }
      return wrapper;
    }

    /**
     * Creates a `_.find` or `_.findLast` function.
     *
     * @private
     * @param {Function} findIndexFunc The function to find the collection index.
     * @returns {Function} Returns the new find function.
     */
    function createFind(findIndexFunc) {
      return function(collection, predicate, fromIndex) {
        var iterable = Object(collection);
        if (!isArrayLike(collection)) {
          var iteratee = getIteratee(predicate, 3);
          collection = keys(collection);
          predicate = function(key) { return iteratee(iterable[key], key, iterable); };
        }
        var index = findIndexFunc(collection, predicate, fromIndex);
        return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;
      };
    }

    /**
     * Creates a `_.flow` or `_.flowRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new flow function.
     */
    function createFlow(fromRight) {
      return flatRest(function(funcs) {
        var length = funcs.length,
            index = length,
            prereq = LodashWrapper.prototype.thru;

        if (fromRight) {
          funcs.reverse();
        }
        while (index--) {
          var func = funcs[index];
          if (typeof func != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          if (prereq && !wrapper && getFuncName(func) == 'wrapper') {
            var wrapper = new LodashWrapper([], true);
          }
        }
        index = wrapper ? index : length;
        while (++index < length) {
          func = funcs[index];

          var funcName = getFuncName(func),
              data = funcName == 'wrapper' ? getData(func) : undefined;

          if (data && isLaziable(data[0]) &&
                data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) &&
                !data[4].length && data[9] == 1
              ) {
            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
          } else {
            wrapper = (func.length == 1 && isLaziable(func))
              ? wrapper[funcName]()
              : wrapper.thru(func);
          }
        }
        return function() {
          var args = arguments,
              value = args[0];

          if (wrapper && args.length == 1 && isArray(value)) {
            return wrapper.plant(value).value();
          }
          var index = 0,
              result = length ? funcs[index].apply(this, args) : value;

          while (++index < length) {
            result = funcs[index].call(this, result);
          }
          return result;
        };
      });
    }

    /**
     * Creates a function that wraps `func` to invoke it with optional `this`
     * binding of `thisArg`, partial application, and currying.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to
     *  the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [partialsRight] The arguments to append to those provided
     *  to the new function.
     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
      var isAry = bitmask & WRAP_ARY_FLAG,
          isBind = bitmask & WRAP_BIND_FLAG,
          isBindKey = bitmask & WRAP_BIND_KEY_FLAG,
          isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG),
          isFlip = bitmask & WRAP_FLIP_FLAG,
          Ctor = isBindKey ? undefined : createCtor(func);

      function wrapper() {
        var length = arguments.length,
            args = Array(length),
            index = length;

        while (index--) {
          args[index] = arguments[index];
        }
        if (isCurried) {
          var placeholder = getHolder(wrapper),
              holdersCount = countHolders(args, placeholder);
        }
        if (partials) {
          args = composeArgs(args, partials, holders, isCurried);
        }
        if (partialsRight) {
          args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
        }
        length -= holdersCount;
        if (isCurried && length < arity) {
          var newHolders = replaceHolders(args, placeholder);
          return createRecurry(
            func, bitmask, createHybrid, wrapper.placeholder, thisArg,
            args, newHolders, argPos, ary, arity - length
          );
        }
        var thisBinding = isBind ? thisArg : this,
            fn = isBindKey ? thisBinding[func] : func;

        length = args.length;
        if (argPos) {
          args = reorder(args, argPos);
        } else if (isFlip && length > 1) {
          args.reverse();
        }
        if (isAry && ary < length) {
          args.length = ary;
        }
        if (this && this !== root && this instanceof wrapper) {
          fn = Ctor || createCtor(fn);
        }
        return fn.apply(thisBinding, args);
      }
      return wrapper;
    }

    /**
     * Creates a function like `_.invertBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} toIteratee The function to resolve iteratees.
     * @returns {Function} Returns the new inverter function.
     */
    function createInverter(setter, toIteratee) {
      return function(object, iteratee) {
        return baseInverter(object, setter, toIteratee(iteratee), {});
      };
    }

    /**
     * Creates a function that performs a mathematical operation on two values.
     *
     * @private
     * @param {Function} operator The function to perform the operation.
     * @param {number} [defaultValue] The value used for `undefined` arguments.
     * @returns {Function} Returns the new mathematical operation function.
     */
    function createMathOperation(operator, defaultValue) {
      return function(value, other) {
        var result;
        if (value === undefined && other === undefined) {
          return defaultValue;
        }
        if (value !== undefined) {
          result = value;
        }
        if (other !== undefined) {
          if (result === undefined) {
            return other;
          }
          if (typeof value == 'string' || typeof other == 'string') {
            value = baseToString(value);
            other = baseToString(other);
          } else {
            value = baseToNumber(value);
            other = baseToNumber(other);
          }
          result = operator(value, other);
        }
        return result;
      };
    }

    /**
     * Creates a function like `_.over`.
     *
     * @private
     * @param {Function} arrayFunc The function to iterate over iteratees.
     * @returns {Function} Returns the new over function.
     */
    function createOver(arrayFunc) {
      return flatRest(function(iteratees) {
        iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
        return baseRest(function(args) {
          var thisArg = this;
          return arrayFunc(iteratees, function(iteratee) {
            return apply(iteratee, thisArg, args);
          });
        });
      });
    }

    /**
     * Creates the padding for `string` based on `length`. The `chars` string
     * is truncated if the number of characters exceeds `length`.
     *
     * @private
     * @param {number} length The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padding for `string`.
     */
    function createPadding(length, chars) {
      chars = chars === undefined ? ' ' : baseToString(chars);

      var charsLength = chars.length;
      if (charsLength < 2) {
        return charsLength ? baseRepeat(chars, length) : chars;
      }
      var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
      return hasUnicode(chars)
        ? castSlice(stringToArray(result), 0, length).join('')
        : result.slice(0, length);
    }

    /**
     * Creates a function that wraps `func` to invoke it with the `this` binding
     * of `thisArg` and `partials` prepended to the arguments it receives.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {Array} partials The arguments to prepend to those provided to
     *  the new function.
     * @returns {Function} Returns the new wrapped function.
     */
    function createPartial(func, bitmask, thisArg, partials) {
      var isBind = bitmask & WRAP_BIND_FLAG,
          Ctor = createCtor(func);

      function wrapper() {
        var argsIndex = -1,
            argsLength = arguments.length,
            leftIndex = -1,
            leftLength = partials.length,
            args = Array(leftLength + argsLength),
            fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;

        while (++leftIndex < leftLength) {
          args[leftIndex] = partials[leftIndex];
        }
        while (argsLength--) {
          args[leftIndex++] = arguments[++argsIndex];
        }
        return apply(fn, isBind ? thisArg : this, args);
      }
      return wrapper;
    }

    /**
     * Creates a `_.range` or `_.rangeRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new range function.
     */
    function createRange(fromRight) {
      return function(start, end, step) {
        if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
          end = step = undefined;
        }
        // Ensure the sign of `-0` is preserved.
        start = toFinite(start);
        if (end === undefined) {
          end = start;
          start = 0;
        } else {
          end = toFinite(end);
        }
        step = step === undefined ? (start < end ? 1 : -1) : toFinite(step);
        return baseRange(start, end, step, fromRight);
      };
    }

    /**
     * Creates a function that performs a relational operation on two values.
     *
     * @private
     * @param {Function} operator The function to perform the operation.
     * @returns {Function} Returns the new relational operation function.
     */
    function createRelationalOperation(operator) {
      return function(value, other) {
        if (!(typeof value == 'string' && typeof other == 'string')) {
          value = toNumber(value);
          other = toNumber(other);
        }
        return operator(value, other);
      };
    }

    /**
     * Creates a function that wraps `func` to continue currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {Function} wrapFunc The function to create the `func` wrapper.
     * @param {*} placeholder The placeholder value.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to
     *  the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
      var isCurry = bitmask & WRAP_CURRY_FLAG,
          newHolders = isCurry ? holders : undefined,
          newHoldersRight = isCurry ? undefined : holders,
          newPartials = isCurry ? partials : undefined,
          newPartialsRight = isCurry ? undefined : partials;

      bitmask |= (isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG);
      bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);

      if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
        bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
      }
      var newData = [
        func, bitmask, thisArg, newPartials, newHolders, newPartialsRight,
        newHoldersRight, argPos, ary, arity
      ];

      var result = wrapFunc.apply(undefined, newData);
      if (isLaziable(func)) {
        setData(result, newData);
      }
      result.placeholder = placeholder;
      return setWrapToString(result, func, bitmask);
    }

    /**
     * Creates a function like `_.round`.
     *
     * @private
     * @param {string} methodName The name of the `Math` method to use when rounding.
     * @returns {Function} Returns the new round function.
     */
    function createRound(methodName) {
      var func = Math[methodName];
      return function(number, precision) {
        number = toNumber(number);
        precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);
        if (precision) {
          // Shift with exponential notation to avoid floating-point issues.
          // See [MDN](https://mdn.io/round#Examples) for more details.
          var pair = (toString(number) + 'e').split('e'),
              value = func(pair[0] + 'e' + (+pair[1] + precision));

          pair = (toString(value) + 'e').split('e');
          return +(pair[0] + 'e' + (+pair[1] - precision));
        }
        return func(number);
      };
    }

    /**
     * Creates a set object of `values`.
     *
     * @private
     * @param {Array} values The values to add to the set.
     * @returns {Object} Returns the new set.
     */
    var createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {
      return new Set(values);
    };

    /**
     * Creates a `_.toPairs` or `_.toPairsIn` function.
     *
     * @private
     * @param {Function} keysFunc The function to get the keys of a given object.
     * @returns {Function} Returns the new pairs function.
     */
    function createToPairs(keysFunc) {
      return function(object) {
        var tag = getTag(object);
        if (tag == mapTag) {
          return mapToArray(object);
        }
        if (tag == setTag) {
          return setToPairs(object);
        }
        return baseToPairs(object, keysFunc(object));
      };
    }

    /**
     * Creates a function that either curries or invokes `func` with optional
     * `this` binding and partially applied arguments.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask flags.
     *    1 - `_.bind`
     *    2 - `_.bindKey`
     *    4 - `_.curry` or `_.curryRight` of a bound function
     *    8 - `_.curry`
     *   16 - `_.curryRight`
     *   32 - `_.partial`
     *   64 - `_.partialRight`
     *  128 - `_.rearg`
     *  256 - `_.ary`
     *  512 - `_.flip`
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to be partially applied.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
      var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
      if (!isBindKey && typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var length = partials ? partials.length : 0;
      if (!length) {
        bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
        partials = holders = undefined;
      }
      ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);
      arity = arity === undefined ? arity : toInteger(arity);
      length -= holders ? holders.length : 0;

      if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
        var partialsRight = partials,
            holdersRight = holders;

        partials = holders = undefined;
      }
      var data = isBindKey ? undefined : getData(func);

      var newData = [
        func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,
        argPos, ary, arity
      ];

      if (data) {
        mergeData(newData, data);
      }
      func = newData[0];
      bitmask = newData[1];
      thisArg = newData[2];
      partials = newData[3];
      holders = newData[4];
      arity = newData[9] = newData[9] === undefined
        ? (isBindKey ? 0 : func.length)
        : nativeMax(newData[9] - length, 0);

      if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
        bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
      }
      if (!bitmask || bitmask == WRAP_BIND_FLAG) {
        var result = createBind(func, bitmask, thisArg);
      } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
        result = createCurry(func, bitmask, arity);
      } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
        result = createPartial(func, bitmask, thisArg, partials);
      } else {
        result = createHybrid.apply(undefined, newData);
      }
      var setter = data ? baseSetData : setData;
      return setWrapToString(setter(result, newData), func, bitmask);
    }

    /**
     * Used by `_.defaults` to customize its `_.assignIn` use to assign properties
     * of source objects to the destination object for all destination properties
     * that resolve to `undefined`.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to assign.
     * @param {Object} object The parent object of `objValue`.
     * @returns {*} Returns the value to assign.
     */
    function customDefaultsAssignIn(objValue, srcValue, key, object) {
      if (objValue === undefined ||
          (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) {
        return srcValue;
      }
      return objValue;
    }

    /**
     * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source
     * objects into destination objects that are passed thru.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to merge.
     * @param {Object} object The parent object of `objValue`.
     * @param {Object} source The parent object of `srcValue`.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     * @returns {*} Returns the value to assign.
     */
    function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
      if (isObject(objValue) && isObject(srcValue)) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        stack.set(srcValue, objValue);
        baseMerge(objValue, srcValue, undefined, customDefaultsMerge, stack);
        stack['delete'](srcValue);
      }
      return objValue;
    }

    /**
     * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
     * objects.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {string} key The key of the property to inspect.
     * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
     */
    function customOmitClone(value) {
      return isPlainObject(value) ? undefined : value;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for arrays with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Array} array The array to compare.
     * @param {Array} other The other array to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `array` and `other` objects.
     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
     */
    function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
          arrLength = array.length,
          othLength = other.length;

      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
        return false;
      }
      // Assume cyclic values are equal.
      var stacked = stack.get(array);
      if (stacked && stack.get(other)) {
        return stacked == other;
      }
      var index = -1,
          result = true,
          seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;

      stack.set(array, other);
      stack.set(other, array);

      // Ignore non-index properties.
      while (++index < arrLength) {
        var arrValue = array[index],
            othValue = other[index];

        if (customizer) {
          var compared = isPartial
            ? customizer(othValue, arrValue, index, other, array, stack)
            : customizer(arrValue, othValue, index, array, other, stack);
        }
        if (compared !== undefined) {
          if (compared) {
            continue;
          }
          result = false;
          break;
        }
        // Recursively compare arrays (susceptible to call stack limits).
        if (seen) {
          if (!arraySome(other, function(othValue, othIndex) {
                if (!cacheHas(seen, othIndex) &&
                    (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                  return seen.push(othIndex);
                }
              })) {
            result = false;
            break;
          }
        } else if (!(
              arrValue === othValue ||
                equalFunc(arrValue, othValue, bitmask, customizer, stack)
            )) {
          result = false;
          break;
        }
      }
      stack['delete'](array);
      stack['delete'](other);
      return result;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for comparing objects of
     * the same `toStringTag`.
     *
     * **Note:** This function only supports comparing values with tags of
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {string} tag The `toStringTag` of the objects to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
      switch (tag) {
        case dataViewTag:
          if ((object.byteLength != other.byteLength) ||
              (object.byteOffset != other.byteOffset)) {
            return false;
          }
          object = object.buffer;
          other = other.buffer;

        case arrayBufferTag:
          if ((object.byteLength != other.byteLength) ||
              !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
            return false;
          }
          return true;

        case boolTag:
        case dateTag:
        case numberTag:
          // Coerce booleans to `1` or `0` and dates to milliseconds.
          // Invalid dates are coerced to `NaN`.
          return eq(+object, +other);

        case errorTag:
          return object.name == other.name && object.message == other.message;

        case regexpTag:
        case stringTag:
          // Coerce regexes to strings and treat strings, primitives and objects,
          // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
          // for more details.
          return object == (other + '');

        case mapTag:
          var convert = mapToArray;

        case setTag:
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
          convert || (convert = setToArray);

          if (object.size != other.size && !isPartial) {
            return false;
          }
          // Assume cyclic values are equal.
          var stacked = stack.get(object);
          if (stacked) {
            return stacked == other;
          }
          bitmask |= COMPARE_UNORDERED_FLAG;

          // Recursively compare objects (susceptible to call stack limits).
          stack.set(object, other);
          var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
          stack['delete'](object);
          return result;

        case symbolTag:
          if (symbolValueOf) {
            return symbolValueOf.call(object) == symbolValueOf.call(other);
          }
      }
      return false;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for objects with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
          objProps = getAllKeys(object),
          objLength = objProps.length,
          othProps = getAllKeys(other),
          othLength = othProps.length;

      if (objLength != othLength && !isPartial) {
        return false;
      }
      var index = objLength;
      while (index--) {
        var key = objProps[index];
        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
          return false;
        }
      }
      // Assume cyclic values are equal.
      var stacked = stack.get(object);
      if (stacked && stack.get(other)) {
        return stacked == other;
      }
      var result = true;
      stack.set(object, other);
      stack.set(other, object);

      var skipCtor = isPartial;
      while (++index < objLength) {
        key = objProps[index];
        var objValue = object[key],
            othValue = other[key];

        if (customizer) {
          var compared = isPartial
            ? customizer(othValue, objValue, key, other, object, stack)
            : customizer(objValue, othValue, key, object, other, stack);
        }
        // Recursively compare objects (susceptible to call stack limits).
        if (!(compared === undefined
              ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
              : compared
            )) {
          result = false;
          break;
        }
        skipCtor || (skipCtor = key == 'constructor');
      }
      if (result && !skipCtor) {
        var objCtor = object.constructor,
            othCtor = other.constructor;

        // Non `Object` object instances with different constructors are not equal.
        if (objCtor != othCtor &&
            ('constructor' in object && 'constructor' in other) &&
            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
              typeof othCtor == 'function' && othCtor instanceof othCtor)) {
          result = false;
        }
      }
      stack['delete'](object);
      stack['delete'](other);
      return result;
    }

    /**
     * A specialized version of `baseRest` which flattens the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @returns {Function} Returns the new function.
     */
    function flatRest(func) {
      return setToString(overRest(func, undefined, flatten), func + '');
    }

    /**
     * Creates an array of own enumerable property names and symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function getAllKeys(object) {
      return baseGetAllKeys(object, keys, getSymbols);
    }

    /**
     * Creates an array of own and inherited enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function getAllKeysIn(object) {
      return baseGetAllKeys(object, keysIn, getSymbolsIn);
    }

    /**
     * Gets metadata for `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {*} Returns the metadata for `func`.
     */
    var getData = !metaMap ? noop : function(func) {
      return metaMap.get(func);
    };

    /**
     * Gets the name of `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {string} Returns the function name.
     */
    function getFuncName(func) {
      var result = (func.name + ''),
          array = realNames[result],
          length = hasOwnProperty.call(realNames, result) ? array.length : 0;

      while (length--) {
        var data = array[length],
            otherFunc = data.func;
        if (otherFunc == null || otherFunc == func) {
          return data.name;
        }
      }
      return result;
    }

    /**
     * Gets the argument placeholder value for `func`.
     *
     * @private
     * @param {Function} func The function to inspect.
     * @returns {*} Returns the placeholder value.
     */
    function getHolder(func) {
      var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;
      return object.placeholder;
    }

    /**
     * Gets the appropriate "iteratee" function. If `_.iteratee` is customized,
     * this function returns the custom method, otherwise it returns `baseIteratee`.
     * If arguments are provided, the chosen function is invoked with them and
     * its result is returned.
     *
     * @private
     * @param {*} [value] The value to convert to an iteratee.
     * @param {number} [arity] The arity of the created iteratee.
     * @returns {Function} Returns the chosen function or its result.
     */
    function getIteratee() {
      var result = lodash.iteratee || iteratee;
      result = result === iteratee ? baseIteratee : result;
      return arguments.length ? result(arguments[0], arguments[1]) : result;
    }

    /**
     * Gets the data for `map`.
     *
     * @private
     * @param {Object} map The map to query.
     * @param {string} key The reference key.
     * @returns {*} Returns the map data.
     */
    function getMapData(map, key) {
      var data = map.__data__;
      return isKeyable(key)
        ? data[typeof key == 'string' ? 'string' : 'hash']
        : data.map;
    }

    /**
     * Gets the property names, values, and compare flags of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the match data of `object`.
     */
    function getMatchData(object) {
      var result = keys(object),
          length = result.length;

      while (length--) {
        var key = result[length],
            value = object[key];

        result[length] = [key, value, isStrictComparable(value)];
      }
      return result;
    }

    /**
     * Gets the native function at `key` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the method to get.
     * @returns {*} Returns the function if it's native, else `undefined`.
     */
    function getNative(object, key) {
      var value = getValue(object, key);
      return baseIsNative(value) ? value : undefined;
    }

    /**
     * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the raw `toStringTag`.
     */
    function getRawTag(value) {
      var isOwn = hasOwnProperty.call(value, symToStringTag),
          tag = value[symToStringTag];

      try {
        value[symToStringTag] = undefined;
        var unmasked = true;
      } catch (e) {}

      var result = nativeObjectToString.call(value);
      if (unmasked) {
        if (isOwn) {
          value[symToStringTag] = tag;
        } else {
          delete value[symToStringTag];
        }
      }
      return result;
    }

    /**
     * Creates an array of the own enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */
    var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
      if (object == null) {
        return [];
      }
      object = Object(object);
      return arrayFilter(nativeGetSymbols(object), function(symbol) {
        return propertyIsEnumerable.call(object, symbol);
      });
    };

    /**
     * Creates an array of the own and inherited enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */
    var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
      var result = [];
      while (object) {
        arrayPush(result, getSymbols(object));
        object = getPrototype(object);
      }
      return result;
    };

    /**
     * Gets the `toStringTag` of `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    var getTag = baseGetTag;

    // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
    if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
        (Map && getTag(new Map) != mapTag) ||
        (Promise && getTag(Promise.resolve()) != promiseTag) ||
        (Set && getTag(new Set) != setTag) ||
        (WeakMap && getTag(new WeakMap) != weakMapTag)) {
      getTag = function(value) {
        var result = baseGetTag(value),
            Ctor = result == objectTag ? value.constructor : undefined,
            ctorString = Ctor ? toSource(Ctor) : '';

        if (ctorString) {
          switch (ctorString) {
            case dataViewCtorString: return dataViewTag;
            case mapCtorString: return mapTag;
            case promiseCtorString: return promiseTag;
            case setCtorString: return setTag;
            case weakMapCtorString: return weakMapTag;
          }
        }
        return result;
      };
    }

    /**
     * Gets the view, applying any `transforms` to the `start` and `end` positions.
     *
     * @private
     * @param {number} start The start of the view.
     * @param {number} end The end of the view.
     * @param {Array} transforms The transformations to apply to the view.
     * @returns {Object} Returns an object containing the `start` and `end`
     *  positions of the view.
     */
    function getView(start, end, transforms) {
      var index = -1,
          length = transforms.length;

      while (++index < length) {
        var data = transforms[index],
            size = data.size;

        switch (data.type) {
          case 'drop':      start += size; break;
          case 'dropRight': end -= size; break;
          case 'take':      end = nativeMin(end, start + size); break;
          case 'takeRight': start = nativeMax(start, end - size); break;
        }
      }
      return { 'start': start, 'end': end };
    }

    /**
     * Extracts wrapper details from the `source` body comment.
     *
     * @private
     * @param {string} source The source to inspect.
     * @returns {Array} Returns the wrapper details.
     */
    function getWrapDetails(source) {
      var match = source.match(reWrapDetails);
      return match ? match[1].split(reSplitDetails) : [];
    }

    /**
     * Checks if `path` exists on `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @param {Function} hasFunc The function to check properties.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     */
    function hasPath(object, path, hasFunc) {
      path = castPath(path, object);

      var index = -1,
          length = path.length,
          result = false;

      while (++index < length) {
        var key = toKey(path[index]);
        if (!(result = object != null && hasFunc(object, key))) {
          break;
        }
        object = object[key];
      }
      if (result || ++index != length) {
        return result;
      }
      length = object == null ? 0 : object.length;
      return !!length && isLength(length) && isIndex(key, length) &&
        (isArray(object) || isArguments(object));
    }

    /**
     * Initializes an array clone.
     *
     * @private
     * @param {Array} array The array to clone.
     * @returns {Array} Returns the initialized clone.
     */
    function initCloneArray(array) {
      var length = array.length,
          result = array.constructor(length);

      // Add properties assigned by `RegExp#exec`.
      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
        result.index = array.index;
        result.input = array.input;
      }
      return result;
    }

    /**
     * Initializes an object clone.
     *
     * @private
     * @param {Object} object The object to clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneObject(object) {
      return (typeof object.constructor == 'function' && !isPrototype(object))
        ? baseCreate(getPrototype(object))
        : {};
    }

    /**
     * Initializes an object clone based on its `toStringTag`.
     *
     * **Note:** This function only supports cloning values with tags of
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
     *
     * @private
     * @param {Object} object The object to clone.
     * @param {string} tag The `toStringTag` of the object to clone.
     * @param {Function} cloneFunc The function to clone values.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneByTag(object, tag, cloneFunc, isDeep) {
      var Ctor = object.constructor;
      switch (tag) {
        case arrayBufferTag:
          return cloneArrayBuffer(object);

        case boolTag:
        case dateTag:
          return new Ctor(+object);

        case dataViewTag:
          return cloneDataView(object, isDeep);

        case float32Tag: case float64Tag:
        case int8Tag: case int16Tag: case int32Tag:
        case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
          return cloneTypedArray(object, isDeep);

        case mapTag:
          return cloneMap(object, isDeep, cloneFunc);

        case numberTag:
        case stringTag:
          return new Ctor(object);

        case regexpTag:
          return cloneRegExp(object);

        case setTag:
          return cloneSet(object, isDeep, cloneFunc);

        case symbolTag:
          return cloneSymbol(object);
      }
    }

    /**
     * Inserts wrapper `details` in a comment at the top of the `source` body.
     *
     * @private
     * @param {string} source The source to modify.
     * @returns {Array} details The details to insert.
     * @returns {string} Returns the modified source.
     */
    function insertWrapDetails(source, details) {
      var length = details.length;
      if (!length) {
        return source;
      }
      var lastIndex = length - 1;
      details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];
      details = details.join(length > 2 ? ', ' : ' ');
      return source.replace(reWrapComment, '{\n/* [wrapped with ' + details + '] */\n');
    }

    /**
     * Checks if `value` is a flattenable `arguments` object or array.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
     */
    function isFlattenable(value) {
      return isArray(value) || isArguments(value) ||
        !!(spreadableSymbol && value && value[spreadableSymbol]);
    }

    /**
     * Checks if `value` is a valid array-like index.
     *
     * @private
     * @param {*} value The value to check.
     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
     */
    function isIndex(value, length) {
      length = length == null ? MAX_SAFE_INTEGER : length;
      return !!length &&
        (typeof value == 'number' || reIsUint.test(value)) &&
        (value > -1 && value % 1 == 0 && value < length);
    }

    /**
     * Checks if the given arguments are from an iteratee call.
     *
     * @private
     * @param {*} value The potential iteratee value argument.
     * @param {*} index The potential iteratee index or key argument.
     * @param {*} object The potential iteratee object argument.
     * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
     *  else `false`.
     */
    function isIterateeCall(value, index, object) {
      if (!isObject(object)) {
        return false;
      }
      var type = typeof index;
      if (type == 'number'
            ? (isArrayLike(object) && isIndex(index, object.length))
            : (type == 'string' && index in object)
          ) {
        return eq(object[index], value);
      }
      return false;
    }

    /**
     * Checks if `value` is a property name and not a property path.
     *
     * @private
     * @param {*} value The value to check.
     * @param {Object} [object] The object to query keys on.
     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
     */
    function isKey(value, object) {
      if (isArray(value)) {
        return false;
      }
      var type = typeof value;
      if (type == 'number' || type == 'symbol' || type == 'boolean' ||
          value == null || isSymbol(value)) {
        return true;
      }
      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
        (object != null && value in Object(object));
    }

    /**
     * Checks if `value` is suitable for use as unique object key.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
     */
    function isKeyable(value) {
      var type = typeof value;
      return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
        ? (value !== '__proto__')
        : (value === null);
    }

    /**
     * Checks if `func` has a lazy counterpart.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
     *  else `false`.
     */
    function isLaziable(func) {
      var funcName = getFuncName(func),
          other = lodash[funcName];

      if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
        return false;
      }
      if (func === other) {
        return true;
      }
      var data = getData(other);
      return !!data && func === data[0];
    }

    /**
     * Checks if `func` has its source masked.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` is masked, else `false`.
     */
    function isMasked(func) {
      return !!maskSrcKey && (maskSrcKey in func);
    }

    /**
     * Checks if `func` is capable of being masked.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `func` is maskable, else `false`.
     */
    var isMaskable = coreJsData ? isFunction : stubFalse;

    /**
     * Checks if `value` is likely a prototype object.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
     */
    function isPrototype(value) {
      var Ctor = value && value.constructor,
          proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

      return value === proto;
    }

    /**
     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` if suitable for strict
     *  equality comparisons, else `false`.
     */
    function isStrictComparable(value) {
      return value === value && !isObject(value);
    }

    /**
     * A specialized version of `matchesProperty` for source values suitable
     * for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {string} key The key of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */
    function matchesStrictComparable(key, srcValue) {
      return function(object) {
        if (object == null) {
          return false;
        }
        return object[key] === srcValue &&
          (srcValue !== undefined || (key in Object(object)));
      };
    }

    /**
     * A specialized version of `_.memoize` which clears the memoized function's
     * cache when it exceeds `MAX_MEMOIZE_SIZE`.
     *
     * @private
     * @param {Function} func The function to have its output memoized.
     * @returns {Function} Returns the new memoized function.
     */
    function memoizeCapped(func) {
      var result = memoize(func, function(key) {
        if (cache.size === MAX_MEMOIZE_SIZE) {
          cache.clear();
        }
        return key;
      });

      var cache = result.cache;
      return result;
    }

    /**
     * Merges the function metadata of `source` into `data`.
     *
     * Merging metadata reduces the number of wrappers used to invoke a function.
     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
     * may be applied regardless of execution order. Methods like `_.ary` and
     * `_.rearg` modify function arguments, making the order in which they are
     * executed important, preventing the merging of metadata. However, we make
     * an exception for a safe combined case where curried functions have `_.ary`
     * and or `_.rearg` applied.
     *
     * @private
     * @param {Array} data The destination metadata.
     * @param {Array} source The source metadata.
     * @returns {Array} Returns `data`.
     */
    function mergeData(data, source) {
      var bitmask = data[1],
          srcBitmask = source[1],
          newBitmask = bitmask | srcBitmask,
          isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);

      var isCombo =
        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_CURRY_FLAG)) ||
        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_REARG_FLAG) && (data[7].length <= source[8])) ||
        ((srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG)) && (source[7].length <= source[8]) && (bitmask == WRAP_CURRY_FLAG));

      // Exit early if metadata can't be merged.
      if (!(isCommon || isCombo)) {
        return data;
      }
      // Use source `thisArg` if available.
      if (srcBitmask & WRAP_BIND_FLAG) {
        data[2] = source[2];
        // Set when currying a bound function.
        newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
      }
      // Compose partial arguments.
      var value = source[3];
      if (value) {
        var partials = data[3];
        data[3] = partials ? composeArgs(partials, value, source[4]) : value;
        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
      }
      // Compose partial right arguments.
      value = source[5];
      if (value) {
        partials = data[5];
        data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
      }
      // Use source `argPos` if available.
      value = source[7];
      if (value) {
        data[7] = value;
      }
      // Use source `ary` if it's smaller.
      if (srcBitmask & WRAP_ARY_FLAG) {
        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
      }
      // Use source `arity` if one is not provided.
      if (data[9] == null) {
        data[9] = source[9];
      }
      // Use source `func` and merge bitmasks.
      data[0] = source[0];
      data[1] = newBitmask;

      return data;
    }

    /**
     * This function is like
     * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * except that it includes inherited enumerable properties.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function nativeKeysIn(object) {
      var result = [];
      if (object != null) {
        for (var key in Object(object)) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * Converts `value` to a string using `Object.prototype.toString`.
     *
     * @private
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     */
    function objectToString(value) {
      return nativeObjectToString.call(value);
    }

    /**
     * A specialized version of `baseRest` which transforms the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @param {Function} transform The rest array transform.
     * @returns {Function} Returns the new function.
     */
    function overRest(func, start, transform) {
      start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
      return function() {
        var args = arguments,
            index = -1,
            length = nativeMax(args.length - start, 0),
            array = Array(length);

        while (++index < length) {
          array[index] = args[start + index];
        }
        index = -1;
        var otherArgs = Array(start + 1);
        while (++index < start) {
          otherArgs[index] = args[index];
        }
        otherArgs[start] = transform(array);
        return apply(func, this, otherArgs);
      };
    }

    /**
     * Gets the parent value at `path` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array} path The path to get the parent value of.
     * @returns {*} Returns the parent value.
     */
    function parent(object, path) {
      return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
    }

    /**
     * Reorder `array` according to the specified indexes where the element at
     * the first index is assigned as the first element, the element at
     * the second index is assigned as the second element, and so on.
     *
     * @private
     * @param {Array} array The array to reorder.
     * @param {Array} indexes The arranged array indexes.
     * @returns {Array} Returns `array`.
     */
    function reorder(array, indexes) {
      var arrLength = array.length,
          length = nativeMin(indexes.length, arrLength),
          oldArray = copyArray(array);

      while (length--) {
        var index = indexes[length];
        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
      }
      return array;
    }

    /**
     * Sets metadata for `func`.
     *
     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
     * period of time, it will trip its breaker and transition to an identity
     * function to avoid garbage collection pauses in V8. See
     * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
     * for more details.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var setData = shortOut(baseSetData);

    /**
     * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @returns {number|Object} Returns the timer id or timeout object.
     */
    var setTimeout = ctxSetTimeout || function(func, wait) {
      return root.setTimeout(func, wait);
    };

    /**
     * Sets the `toString` method of `func` to return `string`.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */
    var setToString = shortOut(baseSetToString);

    /**
     * Sets the `toString` method of `wrapper` to mimic the source of `reference`
     * with wrapper details in a comment at the top of the source body.
     *
     * @private
     * @param {Function} wrapper The function to modify.
     * @param {Function} reference The reference function.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @returns {Function} Returns `wrapper`.
     */
    function setWrapToString(wrapper, reference, bitmask) {
      var source = (reference + '');
      return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
    }

    /**
     * Creates a function that'll short out and invoke `identity` instead
     * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
     * milliseconds.
     *
     * @private
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new shortable function.
     */
    function shortOut(func) {
      var count = 0,
          lastCalled = 0;

      return function() {
        var stamp = nativeNow(),
            remaining = HOT_SPAN - (stamp - lastCalled);

        lastCalled = stamp;
        if (remaining > 0) {
          if (++count >= HOT_COUNT) {
            return arguments[0];
          }
        } else {
          count = 0;
        }
        return func.apply(undefined, arguments);
      };
    }

    /**
     * A specialized version of `_.shuffle` which mutates and sets the size of `array`.
     *
     * @private
     * @param {Array} array The array to shuffle.
     * @param {number} [size=array.length] The size of `array`.
     * @returns {Array} Returns `array`.
     */
    function shuffleSelf(array, size) {
      var index = -1,
          length = array.length,
          lastIndex = length - 1;

      size = size === undefined ? length : size;
      while (++index < size) {
        var rand = baseRandom(index, lastIndex),
            value = array[rand];

        array[rand] = array[index];
        array[index] = value;
      }
      array.length = size;
      return array;
    }

    /**
     * Converts `string` to a property path array.
     *
     * @private
     * @param {string} string The string to convert.
     * @returns {Array} Returns the property path array.
     */
    var stringToPath = memoizeCapped(function(string) {
      var result = [];
      if (reLeadingDot.test(string)) {
        result.push('');
      }
      string.replace(rePropName, function(match, number, quote, string) {
        result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));
      });
      return result;
    });

    /**
     * Converts `value` to a string key if it's not a string or symbol.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {string|symbol} Returns the key.
     */
    function toKey(value) {
      if (typeof value == 'string' || isSymbol(value)) {
        return value;
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
    }

    /**
     * Converts `func` to its source code.
     *
     * @private
     * @param {Function} func The function to convert.
     * @returns {string} Returns the source code.
     */
    function toSource(func) {
      if (func != null) {
        try {
          return funcToString.call(func);
        } catch (e) {}
        try {
          return (func + '');
        } catch (e) {}
      }
      return '';
    }

    /**
     * Updates wrapper `details` based on `bitmask` flags.
     *
     * @private
     * @returns {Array} details The details to modify.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @returns {Array} Returns `details`.
     */
    function updateWrapDetails(details, bitmask) {
      arrayEach(wrapFlags, function(pair) {
        var value = '_.' + pair[0];
        if ((bitmask & pair[1]) && !arrayIncludes(details, value)) {
          details.push(value);
        }
      });
      return details.sort();
    }

    /**
     * Creates a clone of `wrapper`.
     *
     * @private
     * @param {Object} wrapper The wrapper to clone.
     * @returns {Object} Returns the cloned wrapper.
     */
    function wrapperClone(wrapper) {
      if (wrapper instanceof LazyWrapper) {
        return wrapper.clone();
      }
      var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
      result.__actions__ = copyArray(wrapper.__actions__);
      result.__index__  = wrapper.__index__;
      result.__values__ = wrapper.__values__;
      return result;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an array of elements split into groups the length of `size`.
     * If `array` can't be split evenly, the final chunk will be the remaining
     * elements.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to process.
     * @param {number} [size=1] The length of each chunk
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the new array of chunks.
     * @example
     *
     * _.chunk(['a', 'b', 'c', 'd'], 2);
     * // => [['a', 'b'], ['c', 'd']]
     *
     * _.chunk(['a', 'b', 'c', 'd'], 3);
     * // => [['a', 'b', 'c'], ['d']]
     */
    function chunk(array, size, guard) {
      if ((guard ? isIterateeCall(array, size, guard) : size === undefined)) {
        size = 1;
      } else {
        size = nativeMax(toInteger(size), 0);
      }
      var length = array == null ? 0 : array.length;
      if (!length || size < 1) {
        return [];
      }
      var index = 0,
          resIndex = 0,
          result = Array(nativeCeil(length / size));

      while (index < length) {
        result[resIndex++] = baseSlice(array, index, (index += size));
      }
      return result;
    }

    /**
     * Creates an array with all falsey values removed. The values `false`, `null`,
     * `0`, `""`, `undefined`, and `NaN` are falsey.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to compact.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.compact([0, 1, false, 2, '', 3]);
     * // => [1, 2, 3]
     */
    function compact(array) {
      var index = -1,
          length = array == null ? 0 : array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index];
        if (value) {
          result[resIndex++] = value;
        }
      }
      return result;
    }

    /**
     * Creates a new array concatenating `array` with any additional arrays
     * and/or values.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to concatenate.
     * @param {...*} [values] The values to concatenate.
     * @returns {Array} Returns the new concatenated array.
     * @example
     *
     * var array = [1];
     * var other = _.concat(array, 2, [3], [[4]]);
     *
     * console.log(other);
     * // => [1, 2, 3, [4]]
     *
     * console.log(array);
     * // => [1]
     */
    function concat() {
      var length = arguments.length;
      if (!length) {
        return [];
      }
      var args = Array(length - 1),
          array = arguments[0],
          index = length;

      while (index--) {
        args[index - 1] = arguments[index];
      }
      return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
    }

    /**
     * Creates an array of `array` values not included in the other given arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. The order and references of result values are
     * determined by the first array.
     *
     * **Note:** Unlike `_.pullAll`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.without, _.xor
     * @example
     *
     * _.difference([2, 1], [2, 3]);
     * // => [1]
     */
    var difference = baseRest(function(array, values) {
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))
        : [];
    });

    /**
     * This method is like `_.difference` except that it accepts `iteratee` which
     * is invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. The order and references of result values are
     * determined by the first array. The iteratee is invoked with one argument:
     * (value).
     *
     * **Note:** Unlike `_.pullAllBy`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */
    var differenceBy = baseRest(function(array, values) {
      var iteratee = last(values);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee, 2))
        : [];
    });

    /**
     * This method is like `_.difference` except that it accepts `comparator`
     * which is invoked to compare elements of `array` to `values`. The order and
     * references of result values are determined by the first array. The comparator
     * is invoked with two arguments: (arrVal, othVal).
     *
     * **Note:** Unlike `_.pullAllWith`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     *
     * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }]
     */
    var differenceWith = baseRest(function(array, values) {
      var comparator = last(values);
      if (isArrayLikeObject(comparator)) {
        comparator = undefined;
      }
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined, comparator)
        : [];
    });

    /**
     * Creates a slice of `array` with `n` elements dropped from the beginning.
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.drop([1, 2, 3]);
     * // => [2, 3]
     *
     * _.drop([1, 2, 3], 2);
     * // => [3]
     *
     * _.drop([1, 2, 3], 5);
     * // => []
     *
     * _.drop([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function drop(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      return baseSlice(array, n < 0 ? 0 : n, length);
    }

    /**
     * Creates a slice of `array` with `n` elements dropped from the end.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.dropRight([1, 2, 3]);
     * // => [1, 2]
     *
     * _.dropRight([1, 2, 3], 2);
     * // => [1]
     *
     * _.dropRight([1, 2, 3], 5);
     * // => []
     *
     * _.dropRight([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function dropRight(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      n = length - n;
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the end.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.dropRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropRightWhile(users, ['active', false]);
     * // => objects for ['barney']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropRightWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */
    function dropRightWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), true, true)
        : [];
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the beginning.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.dropWhile(users, function(o) { return !o.active; });
     * // => objects for ['pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropWhile(users, ['active', false]);
     * // => objects for ['pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */
    function dropWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), true)
        : [];
    }

    /**
     * Fills elements of `array` with `value` from `start` up to, but not
     * including, `end`.
     *
     * **Note:** This method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Array
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.fill(array, 'a');
     * console.log(array);
     * // => ['a', 'a', 'a']
     *
     * _.fill(Array(3), 2);
     * // => [2, 2, 2]
     *
     * _.fill([4, 6, 8, 10], '*', 1, 3);
     * // => [4, '*', '*', 10]
     */
    function fill(array, value, start, end) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
        start = 0;
        end = length;
      }
      return baseFill(array, value, start, end);
    }

    /**
     * This method is like `_.find` except that it returns the index of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.findIndex(users, function(o) { return o.user == 'barney'; });
     * // => 0
     *
     * // The `_.matches` iteratee shorthand.
     * _.findIndex(users, { 'user': 'fred', 'active': false });
     * // => 1
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findIndex(users, ['active', false]);
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.findIndex(users, 'active');
     * // => 2
     */
    function findIndex(array, predicate, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = fromIndex == null ? 0 : toInteger(fromIndex);
      if (index < 0) {
        index = nativeMax(length + index, 0);
      }
      return baseFindIndex(array, getIteratee(predicate, 3), index);
    }

    /**
     * This method is like `_.findIndex` except that it iterates over elements
     * of `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
     * // => 2
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastIndex(users, { 'user': 'barney', 'active': true });
     * // => 0
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastIndex(users, ['active', false]);
     * // => 2
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastIndex(users, 'active');
     * // => 0
     */
    function findLastIndex(array, predicate, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = length - 1;
      if (fromIndex !== undefined) {
        index = toInteger(fromIndex);
        index = fromIndex < 0
          ? nativeMax(length + index, 0)
          : nativeMin(index, length - 1);
      }
      return baseFindIndex(array, getIteratee(predicate, 3), index, true);
    }

    /**
     * Flattens `array` a single level deep.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flatten([1, [2, [3, [4]], 5]]);
     * // => [1, 2, [3, [4]], 5]
     */
    function flatten(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseFlatten(array, 1) : [];
    }

    /**
     * Recursively flattens `array`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flattenDeep([1, [2, [3, [4]], 5]]);
     * // => [1, 2, 3, 4, 5]
     */
    function flattenDeep(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseFlatten(array, INFINITY) : [];
    }

    /**
     * Recursively flatten `array` up to `depth` times.
     *
     * @static
     * @memberOf _
     * @since 4.4.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @param {number} [depth=1] The maximum recursion depth.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * var array = [1, [2, [3, [4]], 5]];
     *
     * _.flattenDepth(array, 1);
     * // => [1, 2, [3, [4]], 5]
     *
     * _.flattenDepth(array, 2);
     * // => [1, 2, 3, [4], 5]
     */
    function flattenDepth(array, depth) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      depth = depth === undefined ? 1 : toInteger(depth);
      return baseFlatten(array, depth);
    }

    /**
     * The inverse of `_.toPairs`; this method returns an object composed
     * from key-value `pairs`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} pairs The key-value pairs.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.fromPairs([['a', 1], ['b', 2]]);
     * // => { 'a': 1, 'b': 2 }
     */
    function fromPairs(pairs) {
      var index = -1,
          length = pairs == null ? 0 : pairs.length,
          result = {};

      while (++index < length) {
        var pair = pairs[index];
        result[pair[0]] = pair[1];
      }
      return result;
    }

    /**
     * Gets the first element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias first
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the first element of `array`.
     * @example
     *
     * _.head([1, 2, 3]);
     * // => 1
     *
     * _.head([]);
     * // => undefined
     */
    function head(array) {
      return (array && array.length) ? array[0] : undefined;
    }

    /**
     * Gets the index at which the first occurrence of `value` is found in `array`
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. If `fromIndex` is negative, it's used as the
     * offset from the end of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.indexOf([1, 2, 1, 2], 2);
     * // => 1
     *
     * // Search from the `fromIndex`.
     * _.indexOf([1, 2, 1, 2], 2, 2);
     * // => 3
     */
    function indexOf(array, value, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = fromIndex == null ? 0 : toInteger(fromIndex);
      if (index < 0) {
        index = nativeMax(length + index, 0);
      }
      return baseIndexOf(array, value, index);
    }

    /**
     * Gets all but the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.initial([1, 2, 3]);
     * // => [1, 2]
     */
    function initial(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseSlice(array, 0, -1) : [];
    }

    /**
     * Creates an array of unique values that are included in all given arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. The order and references of result values are
     * determined by the first array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersection([2, 1], [2, 3]);
     * // => [2]
     */
    var intersection = baseRest(function(arrays) {
      var mapped = arrayMap(arrays, castArrayLikeObject);
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped)
        : [];
    });

    /**
     * This method is like `_.intersection` except that it accepts `iteratee`
     * which is invoked for each element of each `arrays` to generate the criterion
     * by which they're compared. The order and references of result values are
     * determined by the first array. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [2.1]
     *
     * // The `_.property` iteratee shorthand.
     * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }]
     */
    var intersectionBy = baseRest(function(arrays) {
      var iteratee = last(arrays),
          mapped = arrayMap(arrays, castArrayLikeObject);

      if (iteratee === last(mapped)) {
        iteratee = undefined;
      } else {
        mapped.pop();
      }
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped, getIteratee(iteratee, 2))
        : [];
    });

    /**
     * This method is like `_.intersection` except that it accepts `comparator`
     * which is invoked to compare elements of `arrays`. The order and references
     * of result values are determined by the first array. The comparator is
     * invoked with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.intersectionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }]
     */
    var intersectionWith = baseRest(function(arrays) {
      var comparator = last(arrays),
          mapped = arrayMap(arrays, castArrayLikeObject);

      comparator = typeof comparator == 'function' ? comparator : undefined;
      if (comparator) {
        mapped.pop();
      }
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped, undefined, comparator)
        : [];
    });

    /**
     * Converts all elements in `array` into a string separated by `separator`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to convert.
     * @param {string} [separator=','] The element separator.
     * @returns {string} Returns the joined string.
     * @example
     *
     * _.join(['a', 'b', 'c'], '~');
     * // => 'a~b~c'
     */
    function join(array, separator) {
      return array == null ? '' : nativeJoin.call(array, separator);
    }

    /**
     * Gets the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the last element of `array`.
     * @example
     *
     * _.last([1, 2, 3]);
     * // => 3
     */
    function last(array) {
      var length = array == null ? 0 : array.length;
      return length ? array[length - 1] : undefined;
    }

    /**
     * This method is like `_.indexOf` except that it iterates over elements of
     * `array` from right to left.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.lastIndexOf([1, 2, 1, 2], 2);
     * // => 3
     *
     * // Search from the `fromIndex`.
     * _.lastIndexOf([1, 2, 1, 2], 2, 2);
     * // => 1
     */
    function lastIndexOf(array, value, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = length;
      if (fromIndex !== undefined) {
        index = toInteger(fromIndex);
        index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
      }
      return value === value
        ? strictLastIndexOf(array, value, index)
        : baseFindIndex(array, baseIsNaN, index, true);
    }

    /**
     * Gets the element at index `n` of `array`. If `n` is negative, the nth
     * element from the end is returned.
     *
     * @static
     * @memberOf _
     * @since 4.11.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=0] The index of the element to return.
     * @returns {*} Returns the nth element of `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'd'];
     *
     * _.nth(array, 1);
     * // => 'b'
     *
     * _.nth(array, -2);
     * // => 'c';
     */
    function nth(array, n) {
      return (array && array.length) ? baseNth(array, toInteger(n)) : undefined;
    }

    /**
     * Removes all given values from `array` using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
     * to remove elements from an array by predicate.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...*} [values] The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
     *
     * _.pull(array, 'a', 'c');
     * console.log(array);
     * // => ['b', 'b']
     */
    var pull = baseRest(pullAll);

    /**
     * This method is like `_.pull` except that it accepts an array of values to remove.
     *
     * **Note:** Unlike `_.difference`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
     *
     * _.pullAll(array, ['a', 'c']);
     * console.log(array);
     * // => ['b', 'b']
     */
    function pullAll(array, values) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values)
        : array;
    }

    /**
     * This method is like `_.pullAll` except that it accepts `iteratee` which is
     * invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. The iteratee is invoked with one argument: (value).
     *
     * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
     *
     * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
     * console.log(array);
     * // => [{ 'x': 2 }]
     */
    function pullAllBy(array, values, iteratee) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values, getIteratee(iteratee, 2))
        : array;
    }

    /**
     * This method is like `_.pullAll` except that it accepts `comparator` which
     * is invoked to compare elements of `array` to `values`. The comparator is
     * invoked with two arguments: (arrVal, othVal).
     *
     * **Note:** Unlike `_.differenceWith`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];
     *
     * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);
     * console.log(array);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]
     */
    function pullAllWith(array, values, comparator) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values, undefined, comparator)
        : array;
    }

    /**
     * Removes elements from `array` corresponding to `indexes` and returns an
     * array of removed elements.
     *
     * **Note:** Unlike `_.at`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...(number|number[])} [indexes] The indexes of elements to remove.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = ['a', 'b', 'c', 'd'];
     * var pulled = _.pullAt(array, [1, 3]);
     *
     * console.log(array);
     * // => ['a', 'c']
     *
     * console.log(pulled);
     * // => ['b', 'd']
     */
    var pullAt = flatRest(function(array, indexes) {
      var length = array == null ? 0 : array.length,
          result = baseAt(array, indexes);

      basePullAt(array, arrayMap(indexes, function(index) {
        return isIndex(index, length) ? +index : index;
      }).sort(compareAscending));

      return result;
    });

    /**
     * Removes all elements from `array` that `predicate` returns truthy for
     * and returns an array of the removed elements. The predicate is invoked
     * with three arguments: (value, index, array).
     *
     * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
     * to pull elements from an array by value.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = [1, 2, 3, 4];
     * var evens = _.remove(array, function(n) {
     *   return n % 2 == 0;
     * });
     *
     * console.log(array);
     * // => [1, 3]
     *
     * console.log(evens);
     * // => [2, 4]
     */
    function remove(array, predicate) {
      var result = [];
      if (!(array && array.length)) {
        return result;
      }
      var index = -1,
          indexes = [],
          length = array.length;

      predicate = getIteratee(predicate, 3);
      while (++index < length) {
        var value = array[index];
        if (predicate(value, index, array)) {
          result.push(value);
          indexes.push(index);
        }
      }
      basePullAt(array, indexes);
      return result;
    }

    /**
     * Reverses `array` so that the first element becomes the last, the second
     * element becomes the second to last, and so on.
     *
     * **Note:** This method mutates `array` and is based on
     * [`Array#reverse`](https://mdn.io/Array/reverse).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.reverse(array);
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */
    function reverse(array) {
      return array == null ? array : nativeReverse.call(array);
    }

    /**
     * Creates a slice of `array` from `start` up to, but not including, `end`.
     *
     * **Note:** This method is used instead of
     * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are
     * returned.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function slice(array, start, end) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
        start = 0;
        end = length;
      }
      else {
        start = start == null ? 0 : toInteger(start);
        end = end === undefined ? length : toInteger(end);
      }
      return baseSlice(array, start, end);
    }

    /**
     * Uses a binary search to determine the lowest index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedIndex([30, 50], 40);
     * // => 1
     */
    function sortedIndex(array, value) {
      return baseSortedIndex(array, value);
    }

    /**
     * This method is like `_.sortedIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * var objects = [{ 'x': 4 }, { 'x': 5 }];
     *
     * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedIndexBy(objects, { 'x': 4 }, 'x');
     * // => 0
     */
    function sortedIndexBy(array, value, iteratee) {
      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));
    }

    /**
     * This method is like `_.indexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedIndexOf([4, 5, 5, 5, 6], 5);
     * // => 1
     */
    function sortedIndexOf(array, value) {
      var length = array == null ? 0 : array.length;
      if (length) {
        var index = baseSortedIndex(array, value);
        if (index < length && eq(array[index], value)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * This method is like `_.sortedIndex` except that it returns the highest
     * index at which `value` should be inserted into `array` in order to
     * maintain its sort order.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedLastIndex([4, 5, 5, 5, 6], 5);
     * // => 4
     */
    function sortedLastIndex(array, value) {
      return baseSortedIndex(array, value, true);
    }

    /**
     * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * var objects = [{ 'x': 4 }, { 'x': 5 }];
     *
     * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
     * // => 1
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');
     * // => 1
     */
    function sortedLastIndexBy(array, value, iteratee) {
      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2), true);
    }

    /**
     * This method is like `_.lastIndexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);
     * // => 3
     */
    function sortedLastIndexOf(array, value) {
      var length = array == null ? 0 : array.length;
      if (length) {
        var index = baseSortedIndex(array, value, true) - 1;
        if (eq(array[index], value)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * This method is like `_.uniq` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniq([1, 1, 2]);
     * // => [1, 2]
     */
    function sortedUniq(array) {
      return (array && array.length)
        ? baseSortedUniq(array)
        : [];
    }

    /**
     * This method is like `_.uniqBy` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
     * // => [1.1, 2.3]
     */
    function sortedUniqBy(array, iteratee) {
      return (array && array.length)
        ? baseSortedUniq(array, getIteratee(iteratee, 2))
        : [];
    }

    /**
     * Gets all but the first element of `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.tail([1, 2, 3]);
     * // => [2, 3]
     */
    function tail(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseSlice(array, 1, length) : [];
    }

    /**
     * Creates a slice of `array` with `n` elements taken from the beginning.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.take([1, 2, 3]);
     * // => [1]
     *
     * _.take([1, 2, 3], 2);
     * // => [1, 2]
     *
     * _.take([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.take([1, 2, 3], 0);
     * // => []
     */
    function take(array, n, guard) {
      if (!(array && array.length)) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` with `n` elements taken from the end.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.takeRight([1, 2, 3]);
     * // => [3]
     *
     * _.takeRight([1, 2, 3], 2);
     * // => [2, 3]
     *
     * _.takeRight([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.takeRight([1, 2, 3], 0);
     * // => []
     */
    function takeRight(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      n = length - n;
      return baseSlice(array, n < 0 ? 0 : n, length);
    }

    /**
     * Creates a slice of `array` with elements taken from the end. Elements are
     * taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.takeRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeRightWhile(users, ['active', false]);
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeRightWhile(users, 'active');
     * // => []
     */
    function takeRightWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), false, true)
        : [];
    }

    /**
     * Creates a slice of `array` with elements taken from the beginning. Elements
     * are taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.takeWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeWhile(users, ['active', false]);
     * // => objects for ['barney', 'fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeWhile(users, 'active');
     * // => []
     */
    function takeWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3))
        : [];
    }

    /**
     * Creates an array of unique values, in order, from all given arrays using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.union([2], [1, 2]);
     * // => [2, 1]
     */
    var union = baseRest(function(arrays) {
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
    });

    /**
     * This method is like `_.union` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by
     * which uniqueness is computed. Result values are chosen from the first
     * array in which the value occurs. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.unionBy([2.1], [1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    var unionBy = baseRest(function(arrays) {
      var iteratee = last(arrays);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee, 2));
    });

    /**
     * This method is like `_.union` except that it accepts `comparator` which
     * is invoked to compare elements of `arrays`. Result values are chosen from
     * the first array in which the value occurs. The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.unionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */
    var unionWith = baseRest(function(arrays) {
      var comparator = last(arrays);
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined, comparator);
    });

    /**
     * Creates a duplicate-free version of an array, using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons, in which only the first occurrence of each element
     * is kept. The order of result values is determined by the order they occur
     * in the array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniq([2, 1, 2]);
     * // => [2, 1]
     */
    function uniq(array) {
      return (array && array.length) ? baseUniq(array) : [];
    }

    /**
     * This method is like `_.uniq` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * uniqueness is computed. The order of result values is determined by the
     * order they occur in the array. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    function uniqBy(array, iteratee) {
      return (array && array.length) ? baseUniq(array, getIteratee(iteratee, 2)) : [];
    }

    /**
     * This method is like `_.uniq` except that it accepts `comparator` which
     * is invoked to compare elements of `array`. The order of result values is
     * determined by the order they occur in the array.The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.uniqWith(objects, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
     */
    function uniqWith(array, comparator) {
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return (array && array.length) ? baseUniq(array, undefined, comparator) : [];
    }

    /**
     * This method is like `_.zip` except that it accepts an array of grouped
     * elements and creates an array regrouping the elements to their pre-zip
     * configuration.
     *
     * @static
     * @memberOf _
     * @since 1.2.0
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);
     * // => [['a', 1, true], ['b', 2, false]]
     *
     * _.unzip(zipped);
     * // => [['a', 'b'], [1, 2], [true, false]]
     */
    function unzip(array) {
      if (!(array && array.length)) {
        return [];
      }
      var length = 0;
      array = arrayFilter(array, function(group) {
        if (isArrayLikeObject(group)) {
          length = nativeMax(group.length, length);
          return true;
        }
      });
      return baseTimes(length, function(index) {
        return arrayMap(array, baseProperty(index));
      });
    }

    /**
     * This method is like `_.unzip` except that it accepts `iteratee` to specify
     * how regrouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @param {Function} [iteratee=_.identity] The function to combine
     *  regrouped values.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
     * // => [[1, 10, 100], [2, 20, 200]]
     *
     * _.unzipWith(zipped, _.add);
     * // => [3, 30, 300]
     */
    function unzipWith(array, iteratee) {
      if (!(array && array.length)) {
        return [];
      }
      var result = unzip(array);
      if (iteratee == null) {
        return result;
      }
      return arrayMap(result, function(group) {
        return apply(iteratee, undefined, group);
      });
    }

    /**
     * Creates an array excluding all given values using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.pull`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...*} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.difference, _.xor
     * @example
     *
     * _.without([2, 1, 2, 3], 1, 2);
     * // => [3]
     */
    var without = baseRest(function(array, values) {
      return isArrayLikeObject(array)
        ? baseDifference(array, values)
        : [];
    });

    /**
     * Creates an array of unique values that is the
     * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
     * of the given arrays. The order of result values is determined by the order
     * they occur in the arrays.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.difference, _.without
     * @example
     *
     * _.xor([2, 1], [2, 3]);
     * // => [1, 3]
     */
    var xor = baseRest(function(arrays) {
      return baseXor(arrayFilter(arrays, isArrayLikeObject));
    });

    /**
     * This method is like `_.xor` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by
     * which by which they're compared. The order of result values is determined
     * by the order they occur in the arrays. The iteratee is invoked with one
     * argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [1.2, 3.4]
     *
     * // The `_.property` iteratee shorthand.
     * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */
    var xorBy = baseRest(function(arrays) {
      var iteratee = last(arrays);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee, 2));
    });

    /**
     * This method is like `_.xor` except that it accepts `comparator` which is
     * invoked to compare elements of `arrays`. The order of result values is
     * determined by the order they occur in the arrays. The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.xorWith(objects, others, _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */
    var xorWith = baseRest(function(arrays) {
      var comparator = last(arrays);
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);
    });

    /**
     * Creates an array of grouped elements, the first of which contains the
     * first elements of the given arrays, the second of which contains the
     * second elements of the given arrays, and so on.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zip(['a', 'b'], [1, 2], [true, false]);
     * // => [['a', 1, true], ['b', 2, false]]
     */
    var zip = baseRest(unzip);

    /**
     * This method is like `_.fromPairs` except that it accepts two arrays,
     * one of property identifiers and one of corresponding values.
     *
     * @static
     * @memberOf _
     * @since 0.4.0
     * @category Array
     * @param {Array} [props=[]] The property identifiers.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObject(['a', 'b'], [1, 2]);
     * // => { 'a': 1, 'b': 2 }
     */
    function zipObject(props, values) {
      return baseZipObject(props || [], values || [], assignValue);
    }

    /**
     * This method is like `_.zipObject` except that it supports property paths.
     *
     * @static
     * @memberOf _
     * @since 4.1.0
     * @category Array
     * @param {Array} [props=[]] The property identifiers.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
     * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
     */
    function zipObjectDeep(props, values) {
      return baseZipObject(props || [], values || [], baseSet);
    }

    /**
     * This method is like `_.zip` except that it accepts `iteratee` to specify
     * how grouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @param {Function} [iteratee=_.identity] The function to combine
     *  grouped values.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
     *   return a + b + c;
     * });
     * // => [111, 222]
     */
    var zipWith = baseRest(function(arrays) {
      var length = arrays.length,
          iteratee = length > 1 ? arrays[length - 1] : undefined;

      iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;
      return unzipWith(arrays, iteratee);
    });

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` wrapper instance that wraps `value` with explicit method
     * chain sequences enabled. The result of such sequences must be unwrapped
     * with `_#value`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Seq
     * @param {*} value The value to wrap.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36 },
     *   { 'user': 'fred',    'age': 40 },
     *   { 'user': 'pebbles', 'age': 1 }
     * ];
     *
     * var youngest = _
     *   .chain(users)
     *   .sortBy('age')
     *   .map(function(o) {
     *     return o.user + ' is ' + o.age;
     *   })
     *   .head()
     *   .value();
     * // => 'pebbles is 1'
     */
    function chain(value) {
      var result = lodash(value);
      result.__chain__ = true;
      return result;
    }

    /**
     * This method invokes `interceptor` and returns `value`. The interceptor
     * is invoked with one argument; (value). The purpose of this method is to
     * "tap into" a method chain sequence in order to modify intermediate results.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns `value`.
     * @example
     *
     * _([1, 2, 3])
     *  .tap(function(array) {
     *    // Mutate input array.
     *    array.pop();
     *  })
     *  .reverse()
     *  .value();
     * // => [2, 1]
     */
    function tap(value, interceptor) {
      interceptor(value);
      return value;
    }

    /**
     * This method is like `_.tap` except that it returns the result of `interceptor`.
     * The purpose of this method is to "pass thru" values replacing intermediate
     * results in a method chain sequence.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns the result of `interceptor`.
     * @example
     *
     * _('  abc  ')
     *  .chain()
     *  .trim()
     *  .thru(function(value) {
     *    return [value];
     *  })
     *  .value();
     * // => ['abc']
     */
    function thru(value, interceptor) {
      return interceptor(value);
    }

    /**
     * This method is the wrapper version of `_.at`.
     *
     * @name at
     * @memberOf _
     * @since 1.0.0
     * @category Seq
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _(object).at(['a[0].b.c', 'a[1]']).value();
     * // => [3, 4]
     */
    var wrapperAt = flatRest(function(paths) {
      var length = paths.length,
          start = length ? paths[0] : 0,
          value = this.__wrapped__,
          interceptor = function(object) { return baseAt(object, paths); };

      if (length > 1 || this.__actions__.length ||
          !(value instanceof LazyWrapper) || !isIndex(start)) {
        return this.thru(interceptor);
      }
      value = value.slice(start, +start + (length ? 1 : 0));
      value.__actions__.push({
        'func': thru,
        'args': [interceptor],
        'thisArg': undefined
      });
      return new LodashWrapper(value, this.__chain__).thru(function(array) {
        if (length && !array.length) {
          array.push(undefined);
        }
        return array;
      });
    });

    /**
     * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.
     *
     * @name chain
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * // A sequence without explicit chaining.
     * _(users).head();
     * // => { 'user': 'barney', 'age': 36 }
     *
     * // A sequence with explicit chaining.
     * _(users)
     *   .chain()
     *   .head()
     *   .pick('user')
     *   .value();
     * // => { 'user': 'barney' }
     */
    function wrapperChain() {
      return chain(this);
    }

    /**
     * Executes the chain sequence and returns the wrapped result.
     *
     * @name commit
     * @memberOf _
     * @since 3.2.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2];
     * var wrapped = _(array).push(3);
     *
     * console.log(array);
     * // => [1, 2]
     *
     * wrapped = wrapped.commit();
     * console.log(array);
     * // => [1, 2, 3]
     *
     * wrapped.last();
     * // => 3
     *
     * console.log(array);
     * // => [1, 2, 3]
     */
    function wrapperCommit() {
      return new LodashWrapper(this.value(), this.__chain__);
    }

    /**
     * Gets the next value on a wrapped object following the
     * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
     *
     * @name next
     * @memberOf _
     * @since 4.0.0
     * @category Seq
     * @returns {Object} Returns the next iterator value.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 1 }
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 2 }
     *
     * wrapped.next();
     * // => { 'done': true, 'value': undefined }
     */
    function wrapperNext() {
      if (this.__values__ === undefined) {
        this.__values__ = toArray(this.value());
      }
      var done = this.__index__ >= this.__values__.length,
          value = done ? undefined : this.__values__[this.__index__++];

      return { 'done': done, 'value': value };
    }

    /**
     * Enables the wrapper to be iterable.
     *
     * @name Symbol.iterator
     * @memberOf _
     * @since 4.0.0
     * @category Seq
     * @returns {Object} Returns the wrapper object.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped[Symbol.iterator]() === wrapped;
     * // => true
     *
     * Array.from(wrapped);
     * // => [1, 2]
     */
    function wrapperToIterator() {
      return this;
    }

    /**
     * Creates a clone of the chain sequence planting `value` as the wrapped value.
     *
     * @name plant
     * @memberOf _
     * @since 3.2.0
     * @category Seq
     * @param {*} value The value to plant.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2]).map(square);
     * var other = wrapped.plant([3, 4]);
     *
     * other.value();
     * // => [9, 16]
     *
     * wrapped.value();
     * // => [1, 4]
     */
    function wrapperPlant(value) {
      var result,
          parent = this;

      while (parent instanceof baseLodash) {
        var clone = wrapperClone(parent);
        clone.__index__ = 0;
        clone.__values__ = undefined;
        if (result) {
          previous.__wrapped__ = clone;
        } else {
          result = clone;
        }
        var previous = clone;
        parent = parent.__wrapped__;
      }
      previous.__wrapped__ = value;
      return result;
    }

    /**
     * This method is the wrapper version of `_.reverse`.
     *
     * **Note:** This method mutates the wrapped array.
     *
     * @name reverse
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _(array).reverse().value()
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */
    function wrapperReverse() {
      var value = this.__wrapped__;
      if (value instanceof LazyWrapper) {
        var wrapped = value;
        if (this.__actions__.length) {
          wrapped = new LazyWrapper(this);
        }
        wrapped = wrapped.reverse();
        wrapped.__actions__.push({
          'func': thru,
          'args': [reverse],
          'thisArg': undefined
        });
        return new LodashWrapper(wrapped, this.__chain__);
      }
      return this.thru(reverse);
    }

    /**
     * Executes the chain sequence to resolve the unwrapped value.
     *
     * @name value
     * @memberOf _
     * @since 0.1.0
     * @alias toJSON, valueOf
     * @category Seq
     * @returns {*} Returns the resolved unwrapped value.
     * @example
     *
     * _([1, 2, 3]).value();
     * // => [1, 2, 3]
     */
    function wrapperValue() {
      return baseWrapperValue(this.__wrapped__, this.__actions__);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The corresponding value of
     * each key is the number of times the key was returned by `iteratee`. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.countBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': 1, '6': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.countBy(['one', 'two', 'three'], 'length');
     * // => { '3': 2, '5': 1 }
     */
    var countBy = createAggregator(function(result, value, key) {
      if (hasOwnProperty.call(result, key)) {
        ++result[key];
      } else {
        baseAssignValue(result, key, 1);
      }
    });

    /**
     * Checks if `predicate` returns truthy for **all** elements of `collection`.
     * Iteration is stopped once `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * **Note:** This method returns `true` for
     * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
     * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
     * elements of empty collections.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`.
     * @example
     *
     * _.every([true, 1, null, 'yes'], Boolean);
     * // => false
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.every(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.every(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.every(users, 'active');
     * // => false
     */
    function every(collection, predicate, guard) {
      var func = isArray(collection) ? arrayEvery : baseEvery;
      if (guard && isIterateeCall(collection, predicate, guard)) {
        predicate = undefined;
      }
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Iterates over elements of `collection`, returning an array of all elements
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * **Note:** Unlike `_.remove`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.reject
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * _.filter(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, { 'age': 36, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.filter(users, 'active');
     * // => objects for ['barney']
     */
    function filter(collection, predicate) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Iterates over elements of `collection`, returning the first element
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': true },
     *   { 'user': 'fred',    'age': 40, 'active': false },
     *   { 'user': 'pebbles', 'age': 1,  'active': true }
     * ];
     *
     * _.find(users, function(o) { return o.age < 40; });
     * // => object for 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.find(users, { 'age': 1, 'active': true });
     * // => object for 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.find(users, ['active', false]);
     * // => object for 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.find(users, 'active');
     * // => object for 'barney'
     */
    var find = createFind(findIndex);

    /**
     * This method is like `_.find` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=collection.length-1] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * _.findLast([1, 2, 3, 4], function(n) {
     *   return n % 2 == 1;
     * });
     * // => 3
     */
    var findLast = createFind(findLastIndex);

    /**
     * Creates a flattened array of values by running each element in `collection`
     * thru `iteratee` and flattening the mapped results. The iteratee is invoked
     * with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [n, n];
     * }
     *
     * _.flatMap([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */
    function flatMap(collection, iteratee) {
      return baseFlatten(map(collection, iteratee), 1);
    }

    /**
     * This method is like `_.flatMap` except that it recursively flattens the
     * mapped results.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [[[n, n]]];
     * }
     *
     * _.flatMapDeep([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */
    function flatMapDeep(collection, iteratee) {
      return baseFlatten(map(collection, iteratee), INFINITY);
    }

    /**
     * This method is like `_.flatMap` except that it recursively flattens the
     * mapped results up to `depth` times.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {number} [depth=1] The maximum recursion depth.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [[[n, n]]];
     * }
     *
     * _.flatMapDepth([1, 2], duplicate, 2);
     * // => [[1, 1], [2, 2]]
     */
    function flatMapDepth(collection, iteratee, depth) {
      depth = depth === undefined ? 1 : toInteger(depth);
      return baseFlatten(map(collection, iteratee), depth);
    }

    /**
     * Iterates over elements of `collection` and invokes `iteratee` for each element.
     * The iteratee is invoked with three arguments: (value, index|key, collection).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * **Note:** As with other "Collections" methods, objects with a "length"
     * property are iterated like arrays. To avoid this behavior use `_.forIn`
     * or `_.forOwn` for object iteration.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias each
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEachRight
     * @example
     *
     * _.forEach([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => Logs `1` then `2`.
     *
     * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */
    function forEach(collection, iteratee) {
      var func = isArray(collection) ? arrayEach : baseEach;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.forEach` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @alias eachRight
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEach
     * @example
     *
     * _.forEachRight([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => Logs `2` then `1`.
     */
    function forEachRight(collection, iteratee) {
      var func = isArray(collection) ? arrayEachRight : baseEachRight;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The order of grouped values
     * is determined by the order they occur in `collection`. The corresponding
     * value of each key is an array of elements responsible for generating the
     * key. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.groupBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': [4.2], '6': [6.1, 6.3] }
     *
     * // The `_.property` iteratee shorthand.
     * _.groupBy(['one', 'two', 'three'], 'length');
     * // => { '3': ['one', 'two'], '5': ['three'] }
     */
    var groupBy = createAggregator(function(result, value, key) {
      if (hasOwnProperty.call(result, key)) {
        result[key].push(value);
      } else {
        baseAssignValue(result, key, [value]);
      }
    });

    /**
     * Checks if `value` is in `collection`. If `collection` is a string, it's
     * checked for a substring of `value`, otherwise
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * is used for equality comparisons. If `fromIndex` is negative, it's used as
     * the offset from the end of `collection`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {boolean} Returns `true` if `value` is found, else `false`.
     * @example
     *
     * _.includes([1, 2, 3], 1);
     * // => true
     *
     * _.includes([1, 2, 3], 1, 2);
     * // => false
     *
     * _.includes({ 'a': 1, 'b': 2 }, 1);
     * // => true
     *
     * _.includes('abcd', 'bc');
     * // => true
     */
    function includes(collection, value, fromIndex, guard) {
      collection = isArrayLike(collection) ? collection : values(collection);
      fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;

      var length = collection.length;
      if (fromIndex < 0) {
        fromIndex = nativeMax(length + fromIndex, 0);
      }
      return isString(collection)
        ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)
        : (!!length && baseIndexOf(collection, value, fromIndex) > -1);
    }

    /**
     * Invokes the method at `path` of each element in `collection`, returning
     * an array of the results of each invoked method. Any additional arguments
     * are provided to each invoked method. If `path` is a function, it's invoked
     * for, and `this` bound to, each element in `collection`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array|Function|string} path The path of the method to invoke or
     *  the function invoked per iteration.
     * @param {...*} [args] The arguments to invoke each method with.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
     * // => [[1, 5, 7], [1, 2, 3]]
     *
     * _.invokeMap([123, 456], String.prototype.split, '');
     * // => [['1', '2', '3'], ['4', '5', '6']]
     */
    var invokeMap = baseRest(function(collection, path, args) {
      var index = -1,
          isFunc = typeof path == 'function',
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value) {
        result[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
      });
      return result;
    });

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The corresponding value of
     * each key is the last element responsible for generating the key. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * var array = [
     *   { 'dir': 'left', 'code': 97 },
     *   { 'dir': 'right', 'code': 100 }
     * ];
     *
     * _.keyBy(array, function(o) {
     *   return String.fromCharCode(o.code);
     * });
     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
     *
     * _.keyBy(array, 'dir');
     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
     */
    var keyBy = createAggregator(function(result, value, key) {
      baseAssignValue(result, key, value);
    });

    /**
     * Creates an array of values by running each element in `collection` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
     *
     * The guarded methods are:
     * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
     * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
     * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
     * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * _.map([4, 8], square);
     * // => [16, 64]
     *
     * _.map({ 'a': 4, 'b': 8 }, square);
     * // => [16, 64] (iteration order is not guaranteed)
     *
     * var users = [
     *   { 'user': 'barney' },
     *   { 'user': 'fred' }
     * ];
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, 'user');
     * // => ['barney', 'fred']
     */
    function map(collection, iteratee) {
      var func = isArray(collection) ? arrayMap : baseMap;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.sortBy` except that it allows specifying the sort
     * orders of the iteratees to sort by. If `orders` is unspecified, all values
     * are sorted in ascending order. Otherwise, specify an order of "desc" for
     * descending or "asc" for ascending sort order of corresponding values.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @param {string[]} [orders] The sort orders of `iteratees`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 34 },
     *   { 'user': 'fred',   'age': 40 },
     *   { 'user': 'barney', 'age': 36 }
     * ];
     *
     * // Sort by `user` in ascending order and by `age` in descending order.
     * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
     */
    function orderBy(collection, iteratees, orders, guard) {
      if (collection == null) {
        return [];
      }
      if (!isArray(iteratees)) {
        iteratees = iteratees == null ? [] : [iteratees];
      }
      orders = guard ? undefined : orders;
      if (!isArray(orders)) {
        orders = orders == null ? [] : [orders];
      }
      return baseOrderBy(collection, iteratees, orders);
    }

    /**
     * Creates an array of elements split into two groups, the first of which
     * contains elements `predicate` returns truthy for, the second of which
     * contains elements `predicate` returns falsey for. The predicate is
     * invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of grouped elements.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': false },
     *   { 'user': 'fred',    'age': 40, 'active': true },
     *   { 'user': 'pebbles', 'age': 1,  'active': false }
     * ];
     *
     * _.partition(users, function(o) { return o.active; });
     * // => objects for [['fred'], ['barney', 'pebbles']]
     *
     * // The `_.matches` iteratee shorthand.
     * _.partition(users, { 'age': 1, 'active': false });
     * // => objects for [['pebbles'], ['barney', 'fred']]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.partition(users, ['active', false]);
     * // => objects for [['barney', 'pebbles'], ['fred']]
     *
     * // The `_.property` iteratee shorthand.
     * _.partition(users, 'active');
     * // => objects for [['fred'], ['barney', 'pebbles']]
     */
    var partition = createAggregator(function(result, value, key) {
      result[key ? 0 : 1].push(value);
    }, function() { return [[], []]; });

    /**
     * Reduces `collection` to a value which is the accumulated result of running
     * each element in `collection` thru `iteratee`, where each successive
     * invocation is supplied the return value of the previous. If `accumulator`
     * is not given, the first element of `collection` is used as the initial
     * value. The iteratee is invoked with four arguments:
     * (accumulator, value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.reduce`, `_.reduceRight`, and `_.transform`.
     *
     * The guarded methods are:
     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
     * and `sortBy`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduceRight
     * @example
     *
     * _.reduce([1, 2], function(sum, n) {
     *   return sum + n;
     * }, 0);
     * // => 3
     *
     * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     *   return result;
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
     */
    function reduce(collection, iteratee, accumulator) {
      var func = isArray(collection) ? arrayReduce : baseReduce,
          initAccum = arguments.length < 3;

      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);
    }

    /**
     * This method is like `_.reduce` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduce
     * @example
     *
     * var array = [[0, 1], [2, 3], [4, 5]];
     *
     * _.reduceRight(array, function(flattened, other) {
     *   return flattened.concat(other);
     * }, []);
     * // => [4, 5, 2, 3, 0, 1]
     */
    function reduceRight(collection, iteratee, accumulator) {
      var func = isArray(collection) ? arrayReduceRight : baseReduce,
          initAccum = arguments.length < 3;

      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);
    }

    /**
     * The opposite of `_.filter`; this method returns the elements of `collection`
     * that `predicate` does **not** return truthy for.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.filter
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': true }
     * ];
     *
     * _.reject(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.reject(users, { 'age': 40, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.reject(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.reject(users, 'active');
     * // => objects for ['barney']
     */
    function reject(collection, predicate) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      return func(collection, negate(getIteratee(predicate, 3)));
    }

    /**
     * Gets a random element from `collection`.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     * @example
     *
     * _.sample([1, 2, 3, 4]);
     * // => 2
     */
    function sample(collection) {
      var func = isArray(collection) ? arraySample : baseSample;
      return func(collection);
    }

    /**
     * Gets `n` random elements at unique keys from `collection` up to the
     * size of `collection`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @param {number} [n=1] The number of elements to sample.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the random elements.
     * @example
     *
     * _.sampleSize([1, 2, 3], 2);
     * // => [3, 1]
     *
     * _.sampleSize([1, 2, 3], 4);
     * // => [2, 3, 1]
     */
    function sampleSize(collection, n, guard) {
      if ((guard ? isIterateeCall(collection, n, guard) : n === undefined)) {
        n = 1;
      } else {
        n = toInteger(n);
      }
      var func = isArray(collection) ? arraySampleSize : baseSampleSize;
      return func(collection, n);
    }

    /**
     * Creates an array of shuffled values, using a version of the
     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     * @example
     *
     * _.shuffle([1, 2, 3, 4]);
     * // => [4, 1, 3, 2]
     */
    function shuffle(collection) {
      var func = isArray(collection) ? arrayShuffle : baseShuffle;
      return func(collection);
    }

    /**
     * Gets the size of `collection` by returning its length for array-like
     * values or the number of own enumerable string keyed properties for objects.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @returns {number} Returns the collection size.
     * @example
     *
     * _.size([1, 2, 3]);
     * // => 3
     *
     * _.size({ 'a': 1, 'b': 2 });
     * // => 2
     *
     * _.size('pebbles');
     * // => 7
     */
    function size(collection) {
      if (collection == null) {
        return 0;
      }
      if (isArrayLike(collection)) {
        return isString(collection) ? stringSize(collection) : collection.length;
      }
      var tag = getTag(collection);
      if (tag == mapTag || tag == setTag) {
        return collection.size;
      }
      return baseKeys(collection).length;
    }

    /**
     * Checks if `predicate` returns truthy for **any** element of `collection`.
     * Iteration is stopped once `predicate` returns truthy. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     * @example
     *
     * _.some([null, 0, 'yes', false], Boolean);
     * // => true
     *
     * var users = [
     *   { 'user': 'barney', 'active': true },
     *   { 'user': 'fred',   'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.some(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.some(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.some(users, 'active');
     * // => true
     */
    function some(collection, predicate, guard) {
      var func = isArray(collection) ? arraySome : baseSome;
      if (guard && isIterateeCall(collection, predicate, guard)) {
        predicate = undefined;
      }
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Creates an array of elements, sorted in ascending order by the results of
     * running each element in a collection thru each iteratee. This method
     * performs a stable sort, that is, it preserves the original sort order of
     * equal elements. The iteratees are invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {...(Function|Function[])} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 },
     *   { 'user': 'barney', 'age': 34 }
     * ];
     *
     * _.sortBy(users, [function(o) { return o.user; }]);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
     *
     * _.sortBy(users, ['user', 'age']);
     * // => objects for [['barney', 34], ['barney', 36], ['fred', 40], ['fred', 48]]
     */
    var sortBy = baseRest(function(collection, iteratees) {
      if (collection == null) {
        return [];
      }
      var length = iteratees.length;
      if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
        iteratees = [];
      } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
        iteratees = [iteratees[0]];
      }
      return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
    });

    /*------------------------------------------------------------------------*/

    /**
     * Gets the timestamp of the number of milliseconds that have elapsed since
     * the Unix epoch (1 January 1970 00:00:00 UTC).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Date
     * @returns {number} Returns the timestamp.
     * @example
     *
     * _.defer(function(stamp) {
     *   console.log(_.now() - stamp);
     * }, _.now());
     * // => Logs the number of milliseconds it took for the deferred invocation.
     */
    var now = ctxNow || function() {
      return root.Date.now();
    };

    /*------------------------------------------------------------------------*/

    /**
     * The opposite of `_.before`; this method creates a function that invokes
     * `func` once it's called `n` or more times.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {number} n The number of calls before `func` is invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var saves = ['profile', 'settings'];
     *
     * var done = _.after(saves.length, function() {
     *   console.log('done saving!');
     * });
     *
     * _.forEach(saves, function(type) {
     *   asyncSave({ 'type': type, 'complete': done });
     * });
     * // => Logs 'done saving!' after the two async saves have completed.
     */
    function after(n, func) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      n = toInteger(n);
      return function() {
        if (--n < 1) {
          return func.apply(this, arguments);
        }
      };
    }

    /**
     * Creates a function that invokes `func`, with up to `n` arguments,
     * ignoring any additional arguments.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @param {number} [n=func.length] The arity cap.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new capped function.
     * @example
     *
     * _.map(['6', '8', '10'], _.ary(parseInt, 1));
     * // => [6, 8, 10]
     */
    function ary(func, n, guard) {
      n = guard ? undefined : n;
      n = (func && n == null) ? func.length : n;
      return createWrap(func, WRAP_ARY_FLAG, undefined, undefined, undefined, undefined, n);
    }

    /**
     * Creates a function that invokes `func`, with the `this` binding and arguments
     * of the created function, while it's called less than `n` times. Subsequent
     * calls to the created function return the result of the last `func` invocation.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {number} n The number of calls at which `func` is no longer invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * jQuery(element).on('click', _.before(5, addContactToList));
     * // => Allows adding up to 4 contacts to the list.
     */
    function before(n, func) {
      var result;
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      n = toInteger(n);
      return function() {
        if (--n > 0) {
          result = func.apply(this, arguments);
        }
        if (n <= 1) {
          func = undefined;
        }
        return result;
      };
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of `thisArg`
     * and `partials` prepended to the arguments it receives.
     *
     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for partially applied arguments.
     *
     * **Note:** Unlike native `Function#bind`, this method doesn't set the "length"
     * property of bound functions.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to bind.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * function greet(greeting, punctuation) {
     *   return greeting + ' ' + this.user + punctuation;
     * }
     *
     * var object = { 'user': 'fred' };
     *
     * var bound = _.bind(greet, object, 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bind(greet, object, _, '!');
     * bound('hi');
     * // => 'hi fred!'
     */
    var bind = baseRest(function(func, thisArg, partials) {
      var bitmask = WRAP_BIND_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, getHolder(bind));
        bitmask |= WRAP_PARTIAL_FLAG;
      }
      return createWrap(func, bitmask, thisArg, partials, holders);
    });

    /**
     * Creates a function that invokes the method at `object[key]` with `partials`
     * prepended to the arguments it receives.
     *
     * This method differs from `_.bind` by allowing bound functions to reference
     * methods that may be redefined or don't yet exist. See
     * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
     * for more details.
     *
     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Function
     * @param {Object} object The object to invoke the method on.
     * @param {string} key The key of the method.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * var object = {
     *   'user': 'fred',
     *   'greet': function(greeting, punctuation) {
     *     return greeting + ' ' + this.user + punctuation;
     *   }
     * };
     *
     * var bound = _.bindKey(object, 'greet', 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * object.greet = function(greeting, punctuation) {
     *   return greeting + 'ya ' + this.user + punctuation;
     * };
     *
     * bound('!');
     * // => 'hiya fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bindKey(object, 'greet', _, '!');
     * bound('hi');
     * // => 'hiya fred!'
     */
    var bindKey = baseRest(function(object, key, partials) {
      var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, getHolder(bindKey));
        bitmask |= WRAP_PARTIAL_FLAG;
      }
      return createWrap(key, bitmask, object, partials, holders);
    });

    /**
     * Creates a function that accepts arguments of `func` and either invokes
     * `func` returning its result, if at least `arity` number of arguments have
     * been provided, or returns a function that accepts the remaining `func`
     * arguments, and so on. The arity of `func` may be specified if `func.length`
     * is not sufficient.
     *
     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curry(abc);
     *
     * curried(1)(2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(1)(_, 3)(2);
     * // => [1, 2, 3]
     */
    function curry(func, arity, guard) {
      arity = guard ? undefined : arity;
      var result = createWrap(func, WRAP_CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
      result.placeholder = curry.placeholder;
      return result;
    }

    /**
     * This method is like `_.curry` except that arguments are applied to `func`
     * in the manner of `_.partialRight` instead of `_.partial`.
     *
     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curryRight(abc);
     *
     * curried(3)(2)(1);
     * // => [1, 2, 3]
     *
     * curried(2, 3)(1);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(3)(1, _)(2);
     * // => [1, 2, 3]
     */
    function curryRight(func, arity, guard) {
      arity = guard ? undefined : arity;
      var result = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
      result.placeholder = curryRight.placeholder;
      return result;
    }

    /**
     * Creates a debounced function that delays invoking `func` until after `wait`
     * milliseconds have elapsed since the last time the debounced function was
     * invoked. The debounced function comes with a `cancel` method to cancel
     * delayed `func` invocations and a `flush` method to immediately invoke them.
     * Provide `options` to indicate whether `func` should be invoked on the
     * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
     * with the last arguments provided to the debounced function. Subsequent
     * calls to the debounced function return the result of the last `func`
     * invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the debounced function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.debounce` and `_.throttle`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to debounce.
     * @param {number} [wait=0] The number of milliseconds to delay.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=false]
     *  Specify invoking on the leading edge of the timeout.
     * @param {number} [options.maxWait]
     *  The maximum time `func` is allowed to be delayed before it's invoked.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new debounced function.
     * @example
     *
     * // Avoid costly calculations while the window size is in flux.
     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
     *
     * // Invoke `sendMail` when clicked, debouncing subsequent calls.
     * jQuery(element).on('click', _.debounce(sendMail, 300, {
     *   'leading': true,
     *   'trailing': false
     * }));
     *
     * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
     * var source = new EventSource('/stream');
     * jQuery(source).on('message', debounced);
     *
     * // Cancel the trailing debounced invocation.
     * jQuery(window).on('popstate', debounced.cancel);
     */
    function debounce(func, wait, options) {
      var lastArgs,
          lastThis,
          maxWait,
          result,
          timerId,
          lastCallTime,
          lastInvokeTime = 0,
          leading = false,
          maxing = false,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      wait = toNumber(wait) || 0;
      if (isObject(options)) {
        leading = !!options.leading;
        maxing = 'maxWait' in options;
        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }

      function invokeFunc(time) {
        var args = lastArgs,
            thisArg = lastThis;

        lastArgs = lastThis = undefined;
        lastInvokeTime = time;
        result = func.apply(thisArg, args);
        return result;
      }

      function leadingEdge(time) {
        // Reset any `maxWait` timer.
        lastInvokeTime = time;
        // Start the timer for the trailing edge.
        timerId = setTimeout(timerExpired, wait);
        // Invoke the leading edge.
        return leading ? invokeFunc(time) : result;
      }

      function remainingWait(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime,
            result = wait - timeSinceLastCall;

        return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;
      }

      function shouldInvoke(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime;

        // Either this is the first call, activity has stopped and we're at the
        // trailing edge, the system time has gone backwards and we're treating
        // it as the trailing edge, or we've hit the `maxWait` limit.
        return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||
          (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
      }

      function timerExpired() {
        var time = now();
        if (shouldInvoke(time)) {
          return trailingEdge(time);
        }
        // Restart the timer.
        timerId = setTimeout(timerExpired, remainingWait(time));
      }

      function trailingEdge(time) {
        timerId = undefined;

        // Only invoke if we have `lastArgs` which means `func` has been
        // debounced at least once.
        if (trailing && lastArgs) {
          return invokeFunc(time);
        }
        lastArgs = lastThis = undefined;
        return result;
      }

      function cancel() {
        if (timerId !== undefined) {
          clearTimeout(timerId);
        }
        lastInvokeTime = 0;
        lastArgs = lastCallTime = lastThis = timerId = undefined;
      }

      function flush() {
        return timerId === undefined ? result : trailingEdge(now());
      }

      function debounced() {
        var time = now(),
            isInvoking = shouldInvoke(time);

        lastArgs = arguments;
        lastThis = this;
        lastCallTime = time;

        if (isInvoking) {
          if (timerId === undefined) {
            return leadingEdge(lastCallTime);
          }
          if (maxing) {
            // Handle invocations in a tight loop.
            timerId = setTimeout(timerExpired, wait);
            return invokeFunc(lastCallTime);
          }
        }
        if (timerId === undefined) {
          timerId = setTimeout(timerExpired, wait);
        }
        return result;
      }
      debounced.cancel = cancel;
      debounced.flush = flush;
      return debounced;
    }

    /**
     * Defers invoking the `func` until the current call stack has cleared. Any
     * additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to defer.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.defer(function(text) {
     *   console.log(text);
     * }, 'deferred');
     * // => Logs 'deferred' after one millisecond.
     */
    var defer = baseRest(function(func, args) {
      return baseDelay(func, 1, args);
    });

    /**
     * Invokes `func` after `wait` milliseconds. Any additional arguments are
     * provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.delay(function(text) {
     *   console.log(text);
     * }, 1000, 'later');
     * // => Logs 'later' after one second.
     */
    var delay = baseRest(function(func, wait, args) {
      return baseDelay(func, toNumber(wait) || 0, args);
    });

    /**
     * Creates a function that invokes `func` with arguments reversed.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to flip arguments for.
     * @returns {Function} Returns the new flipped function.
     * @example
     *
     * var flipped = _.flip(function() {
     *   return _.toArray(arguments);
     * });
     *
     * flipped('a', 'b', 'c', 'd');
     * // => ['d', 'c', 'b', 'a']
     */
    function flip(func) {
      return createWrap(func, WRAP_FLIP_FLAG);
    }

    /**
     * Creates a function that memoizes the result of `func`. If `resolver` is
     * provided, it determines the cache key for storing the result based on the
     * arguments provided to the memoized function. By default, the first argument
     * provided to the memoized function is used as the map cache key. The `func`
     * is invoked with the `this` binding of the memoized function.
     *
     * **Note:** The cache is exposed as the `cache` property on the memoized
     * function. Its creation may be customized by replacing the `_.memoize.Cache`
     * constructor with one whose instances implement the
     * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
     * method interface of `clear`, `delete`, `get`, `has`, and `set`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to have its output memoized.
     * @param {Function} [resolver] The function to resolve the cache key.
     * @returns {Function} Returns the new memoized function.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     * var other = { 'c': 3, 'd': 4 };
     *
     * var values = _.memoize(_.values);
     * values(object);
     * // => [1, 2]
     *
     * values(other);
     * // => [3, 4]
     *
     * object.a = 2;
     * values(object);
     * // => [1, 2]
     *
     * // Modify the result cache.
     * values.cache.set(object, ['a', 'b']);
     * values(object);
     * // => ['a', 'b']
     *
     * // Replace `_.memoize.Cache`.
     * _.memoize.Cache = WeakMap;
     */
    function memoize(func, resolver) {
      if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var memoized = function() {
        var args = arguments,
            key = resolver ? resolver.apply(this, args) : args[0],
            cache = memoized.cache;

        if (cache.has(key)) {
          return cache.get(key);
        }
        var result = func.apply(this, args);
        memoized.cache = cache.set(key, result) || cache;
        return result;
      };
      memoized.cache = new (memoize.Cache || MapCache);
      return memoized;
    }

    // Expose `MapCache`.
    memoize.Cache = MapCache;

    /**
     * Creates a function that negates the result of the predicate `func`. The
     * `func` predicate is invoked with the `this` binding and arguments of the
     * created function.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} predicate The predicate to negate.
     * @returns {Function} Returns the new negated function.
     * @example
     *
     * function isEven(n) {
     *   return n % 2 == 0;
     * }
     *
     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
     * // => [1, 3, 5]
     */
    function negate(predicate) {
      if (typeof predicate != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return function() {
        var args = arguments;
        switch (args.length) {
          case 0: return !predicate.call(this);
          case 1: return !predicate.call(this, args[0]);
          case 2: return !predicate.call(this, args[0], args[1]);
          case 3: return !predicate.call(this, args[0], args[1], args[2]);
        }
        return !predicate.apply(this, args);
      };
    }

    /**
     * Creates a function that is restricted to invoking `func` once. Repeat calls
     * to the function return the value of the first invocation. The `func` is
     * invoked with the `this` binding and arguments of the created function.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var initialize = _.once(createApplication);
     * initialize();
     * initialize();
     * // => `createApplication` is invoked once
     */
    function once(func) {
      return before(2, func);
    }

    /**
     * Creates a function that invokes `func` with its arguments transformed.
     *
     * @static
     * @since 4.0.0
     * @memberOf _
     * @category Function
     * @param {Function} func The function to wrap.
     * @param {...(Function|Function[])} [transforms=[_.identity]]
     *  The argument transforms.
     * @returns {Function} Returns the new function.
     * @example
     *
     * function doubled(n) {
     *   return n * 2;
     * }
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var func = _.overArgs(function(x, y) {
     *   return [x, y];
     * }, [square, doubled]);
     *
     * func(9, 3);
     * // => [81, 6]
     *
     * func(10, 5);
     * // => [100, 10]
     */
    var overArgs = castRest(function(func, transforms) {
      transforms = (transforms.length == 1 && isArray(transforms[0]))
        ? arrayMap(transforms[0], baseUnary(getIteratee()))
        : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));

      var funcsLength = transforms.length;
      return baseRest(function(args) {
        var index = -1,
            length = nativeMin(args.length, funcsLength);

        while (++index < length) {
          args[index] = transforms[index].call(this, args[index]);
        }
        return apply(func, this, args);
      });
    });

    /**
     * Creates a function that invokes `func` with `partials` prepended to the
     * arguments it receives. This method is like `_.bind` except it does **not**
     * alter the `this` binding.
     *
     * The `_.partial.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @since 0.2.0
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * function greet(greeting, name) {
     *   return greeting + ' ' + name;
     * }
     *
     * var sayHelloTo = _.partial(greet, 'hello');
     * sayHelloTo('fred');
     * // => 'hello fred'
     *
     * // Partially applied with placeholders.
     * var greetFred = _.partial(greet, _, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     */
    var partial = baseRest(function(func, partials) {
      var holders = replaceHolders(partials, getHolder(partial));
      return createWrap(func, WRAP_PARTIAL_FLAG, undefined, partials, holders);
    });

    /**
     * This method is like `_.partial` except that partially applied arguments
     * are appended to the arguments it receives.
     *
     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * function greet(greeting, name) {
     *   return greeting + ' ' + name;
     * }
     *
     * var greetFred = _.partialRight(greet, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     *
     * // Partially applied with placeholders.
     * var sayHelloTo = _.partialRight(greet, 'hello', _);
     * sayHelloTo('fred');
     * // => 'hello fred'
     */
    var partialRight = baseRest(function(func, partials) {
      var holders = replaceHolders(partials, getHolder(partialRight));
      return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined, partials, holders);
    });

    /**
     * Creates a function that invokes `func` with arguments arranged according
     * to the specified `indexes` where the argument value at the first index is
     * provided as the first argument, the argument value at the second index is
     * provided as the second argument, and so on.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to rearrange arguments for.
     * @param {...(number|number[])} indexes The arranged argument indexes.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var rearged = _.rearg(function(a, b, c) {
     *   return [a, b, c];
     * }, [2, 0, 1]);
     *
     * rearged('b', 'c', 'a')
     * // => ['a', 'b', 'c']
     */
    var rearg = flatRest(function(func, indexes) {
      return createWrap(func, WRAP_REARG_FLAG, undefined, undefined, undefined, indexes);
    });

    /**
     * Creates a function that invokes `func` with the `this` binding of the
     * created function and arguments from `start` and beyond provided as
     * an array.
     *
     * **Note:** This method is based on the
     * [rest parameter](https://mdn.io/rest_parameters).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.rest(function(what, names) {
     *   return what + ' ' + _.initial(names).join(', ') +
     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
     * });
     *
     * say('hello', 'fred', 'barney', 'pebbles');
     * // => 'hello fred, barney, & pebbles'
     */
    function rest(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      start = start === undefined ? start : toInteger(start);
      return baseRest(func, start);
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of the
     * create function and an array of arguments much like
     * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).
     *
     * **Note:** This method is based on the
     * [spread operator](https://mdn.io/spread_operator).
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Function
     * @param {Function} func The function to spread arguments over.
     * @param {number} [start=0] The start position of the spread.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.spread(function(who, what) {
     *   return who + ' says ' + what;
     * });
     *
     * say(['fred', 'hello']);
     * // => 'fred says hello'
     *
     * var numbers = Promise.all([
     *   Promise.resolve(40),
     *   Promise.resolve(36)
     * ]);
     *
     * numbers.then(_.spread(function(x, y) {
     *   return x + y;
     * }));
     * // => a Promise of 76
     */
    function spread(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      start = start == null ? 0 : nativeMax(toInteger(start), 0);
      return baseRest(function(args) {
        var array = args[start],
            otherArgs = castSlice(args, 0, start);

        if (array) {
          arrayPush(otherArgs, array);
        }
        return apply(func, this, otherArgs);
      });
    }

    /**
     * Creates a throttled function that only invokes `func` at most once per
     * every `wait` milliseconds. The throttled function comes with a `cancel`
     * method to cancel delayed `func` invocations and a `flush` method to
     * immediately invoke them. Provide `options` to indicate whether `func`
     * should be invoked on the leading and/or trailing edge of the `wait`
     * timeout. The `func` is invoked with the last arguments provided to the
     * throttled function. Subsequent calls to the throttled function return the
     * result of the last `func` invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the throttled function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.throttle` and `_.debounce`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to throttle.
     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=true]
     *  Specify invoking on the leading edge of the timeout.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new throttled function.
     * @example
     *
     * // Avoid excessively updating the position while scrolling.
     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
     *
     * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
     * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
     * jQuery(element).on('click', throttled);
     *
     * // Cancel the trailing throttled invocation.
     * jQuery(window).on('popstate', throttled.cancel);
     */
    function throttle(func, wait, options) {
      var leading = true,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      if (isObject(options)) {
        leading = 'leading' in options ? !!options.leading : leading;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }
      return debounce(func, wait, {
        'leading': leading,
        'maxWait': wait,
        'trailing': trailing
      });
    }

    /**
     * Creates a function that accepts up to one argument, ignoring any
     * additional arguments.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @returns {Function} Returns the new capped function.
     * @example
     *
     * _.map(['6', '8', '10'], _.unary(parseInt));
     * // => [6, 8, 10]
     */
    function unary(func) {
      return ary(func, 1);
    }

    /**
     * Creates a function that provides `value` to `wrapper` as its first
     * argument. Any additional arguments provided to the function are appended
     * to those provided to the `wrapper`. The wrapper is invoked with the `this`
     * binding of the created function.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {*} value The value to wrap.
     * @param {Function} [wrapper=identity] The wrapper function.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var p = _.wrap(_.escape, function(func, text) {
     *   return '<p>' + func(text) + '</p>';
     * });
     *
     * p('fred, barney, & pebbles');
     * // => '<p>fred, barney, &amp; pebbles</p>'
     */
    function wrap(value, wrapper) {
      return partial(castFunction(wrapper), value);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Casts `value` as an array if it's not one.
     *
     * @static
     * @memberOf _
     * @since 4.4.0
     * @category Lang
     * @param {*} value The value to inspect.
     * @returns {Array} Returns the cast array.
     * @example
     *
     * _.castArray(1);
     * // => [1]
     *
     * _.castArray({ 'a': 1 });
     * // => [{ 'a': 1 }]
     *
     * _.castArray('abc');
     * // => ['abc']
     *
     * _.castArray(null);
     * // => [null]
     *
     * _.castArray(undefined);
     * // => [undefined]
     *
     * _.castArray();
     * // => []
     *
     * var array = [1, 2, 3];
     * console.log(_.castArray(array) === array);
     * // => true
     */
    function castArray() {
      if (!arguments.length) {
        return [];
      }
      var value = arguments[0];
      return isArray(value) ? value : [value];
    }

    /**
     * Creates a shallow clone of `value`.
     *
     * **Note:** This method is loosely based on the
     * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
     * and supports cloning arrays, array buffers, booleans, date objects, maps,
     * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
     * arrays. The own enumerable properties of `arguments` objects are cloned
     * as plain objects. An empty object is returned for uncloneable values such
     * as error objects, functions, DOM nodes, and WeakMaps.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to clone.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeep
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var shallow = _.clone(objects);
     * console.log(shallow[0] === objects[0]);
     * // => true
     */
    function clone(value) {
      return baseClone(value, CLONE_SYMBOLS_FLAG);
    }

    /**
     * This method is like `_.clone` except that it accepts `customizer` which
     * is invoked to produce the cloned value. If `customizer` returns `undefined`,
     * cloning is handled by the method instead. The `customizer` is invoked with
     * up to four arguments; (value [, index|key, object, stack]).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeepWith
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(false);
     *   }
     * }
     *
     * var el = _.cloneWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 0
     */
    function cloneWith(value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
    }

    /**
     * This method is like `_.clone` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @returns {*} Returns the deep cloned value.
     * @see _.clone
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var deep = _.cloneDeep(objects);
     * console.log(deep[0] === objects[0]);
     * // => false
     */
    function cloneDeep(value) {
      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
    }

    /**
     * This method is like `_.cloneWith` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the deep cloned value.
     * @see _.cloneWith
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(true);
     *   }
     * }
     *
     * var el = _.cloneDeepWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 20
     */
    function cloneDeepWith(value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
    }

    /**
     * Checks if `object` conforms to `source` by invoking the predicate
     * properties of `source` with the corresponding property values of `object`.
     *
     * **Note:** This method is equivalent to `_.conforms` when `source` is
     * partially applied.
     *
     * @static
     * @memberOf _
     * @since 4.14.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property predicates to conform to.
     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     *
     * _.conformsTo(object, { 'b': function(n) { return n > 1; } });
     * // => true
     *
     * _.conformsTo(object, { 'b': function(n) { return n > 2; } });
     * // => false
     */
    function conformsTo(object, source) {
      return source == null || baseConformsTo(object, source, keys(source));
    }

    /**
     * Performs a
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * comparison between two values to determine if they are equivalent.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.eq(object, object);
     * // => true
     *
     * _.eq(object, other);
     * // => false
     *
     * _.eq('a', 'a');
     * // => true
     *
     * _.eq('a', Object('a'));
     * // => false
     *
     * _.eq(NaN, NaN);
     * // => true
     */
    function eq(value, other) {
      return value === other || (value !== value && other !== other);
    }

    /**
     * Checks if `value` is greater than `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     * @see _.lt
     * @example
     *
     * _.gt(3, 1);
     * // => true
     *
     * _.gt(3, 3);
     * // => false
     *
     * _.gt(1, 3);
     * // => false
     */
    var gt = createRelationalOperation(baseGt);

    /**
     * Checks if `value` is greater than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than or equal to
     *  `other`, else `false`.
     * @see _.lte
     * @example
     *
     * _.gte(3, 1);
     * // => true
     *
     * _.gte(3, 3);
     * // => true
     *
     * _.gte(1, 3);
     * // => false
     */
    var gte = createRelationalOperation(function(value, other) {
      return value >= other;
    });

    /**
     * Checks if `value` is likely an `arguments` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     *  else `false`.
     * @example
     *
     * _.isArguments(function() { return arguments; }());
     * // => true
     *
     * _.isArguments([1, 2, 3]);
     * // => false
     */
    var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
      return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
        !propertyIsEnumerable.call(value, 'callee');
    };

    /**
     * Checks if `value` is classified as an `Array` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array, else `false`.
     * @example
     *
     * _.isArray([1, 2, 3]);
     * // => true
     *
     * _.isArray(document.body.children);
     * // => false
     *
     * _.isArray('abc');
     * // => false
     *
     * _.isArray(_.noop);
     * // => false
     */
    var isArray = Array.isArray;

    /**
     * Checks if `value` is classified as an `ArrayBuffer` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
     * @example
     *
     * _.isArrayBuffer(new ArrayBuffer(2));
     * // => true
     *
     * _.isArrayBuffer(new Array(2));
     * // => false
     */
    var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;

    /**
     * Checks if `value` is array-like. A value is considered array-like if it's
     * not a function and has a `value.length` that's an integer greater than or
     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
     * @example
     *
     * _.isArrayLike([1, 2, 3]);
     * // => true
     *
     * _.isArrayLike(document.body.children);
     * // => true
     *
     * _.isArrayLike('abc');
     * // => true
     *
     * _.isArrayLike(_.noop);
     * // => false
     */
    function isArrayLike(value) {
      return value != null && isLength(value.length) && !isFunction(value);
    }

    /**
     * This method is like `_.isArrayLike` except that it also checks if `value`
     * is an object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array-like object,
     *  else `false`.
     * @example
     *
     * _.isArrayLikeObject([1, 2, 3]);
     * // => true
     *
     * _.isArrayLikeObject(document.body.children);
     * // => true
     *
     * _.isArrayLikeObject('abc');
     * // => false
     *
     * _.isArrayLikeObject(_.noop);
     * // => false
     */
    function isArrayLikeObject(value) {
      return isObjectLike(value) && isArrayLike(value);
    }

    /**
     * Checks if `value` is classified as a boolean primitive or object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
     * @example
     *
     * _.isBoolean(false);
     * // => true
     *
     * _.isBoolean(null);
     * // => false
     */
    function isBoolean(value) {
      return value === true || value === false ||
        (isObjectLike(value) && baseGetTag(value) == boolTag);
    }

    /**
     * Checks if `value` is a buffer.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
     * @example
     *
     * _.isBuffer(new Buffer(2));
     * // => true
     *
     * _.isBuffer(new Uint8Array(2));
     * // => false
     */
    var isBuffer = nativeIsBuffer || stubFalse;

    /**
     * Checks if `value` is classified as a `Date` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
     * @example
     *
     * _.isDate(new Date);
     * // => true
     *
     * _.isDate('Mon April 23 2012');
     * // => false
     */
    var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;

    /**
     * Checks if `value` is likely a DOM element.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
     * @example
     *
     * _.isElement(document.body);
     * // => true
     *
     * _.isElement('<body>');
     * // => false
     */
    function isElement(value) {
      return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
    }

    /**
     * Checks if `value` is an empty object, collection, map, or set.
     *
     * Objects are considered empty if they have no own enumerable string keyed
     * properties.
     *
     * Array-like values such as `arguments` objects, arrays, buffers, strings, or
     * jQuery-like collections are considered empty if they have a `length` of `0`.
     * Similarly, maps and sets are considered empty if they have a `size` of `0`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is empty, else `false`.
     * @example
     *
     * _.isEmpty(null);
     * // => true
     *
     * _.isEmpty(true);
     * // => true
     *
     * _.isEmpty(1);
     * // => true
     *
     * _.isEmpty([1, 2, 3]);
     * // => false
     *
     * _.isEmpty({ 'a': 1 });
     * // => false
     */
    function isEmpty(value) {
      if (value == null) {
        return true;
      }
      if (isArrayLike(value) &&
          (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||
            isBuffer(value) || isTypedArray(value) || isArguments(value))) {
        return !value.length;
      }
      var tag = getTag(value);
      if (tag == mapTag || tag == setTag) {
        return !value.size;
      }
      if (isPrototype(value)) {
        return !baseKeys(value).length;
      }
      for (var key in value) {
        if (hasOwnProperty.call(value, key)) {
          return false;
        }
      }
      return true;
    }

    /**
     * Performs a deep comparison between two values to determine if they are
     * equivalent.
     *
     * **Note:** This method supports comparing arrays, array buffers, booleans,
     * date objects, error objects, maps, numbers, `Object` objects, regexes,
     * sets, strings, symbols, and typed arrays. `Object` objects are compared
     * by their own, not inherited, enumerable properties. Functions and DOM
     * nodes are compared by strict equality, i.e. `===`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.isEqual(object, other);
     * // => true
     *
     * object === other;
     * // => false
     */
    function isEqual(value, other) {
      return baseIsEqual(value, other);
    }

    /**
     * This method is like `_.isEqual` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
     * are handled by the method instead. The `customizer` is invoked with up to
     * six arguments: (objValue, othValue [, index|key, object, other, stack]).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, othValue) {
     *   if (isGreeting(objValue) && isGreeting(othValue)) {
     *     return true;
     *   }
     * }
     *
     * var array = ['hello', 'goodbye'];
     * var other = ['hi', 'goodbye'];
     *
     * _.isEqualWith(array, other, customizer);
     * // => true
     */
    function isEqualWith(value, other, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      var result = customizer ? customizer(value, other) : undefined;
      return result === undefined ? baseIsEqual(value, other, undefined, customizer) : !!result;
    }

    /**
     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
     * `SyntaxError`, `TypeError`, or `URIError` object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
     * @example
     *
     * _.isError(new Error);
     * // => true
     *
     * _.isError(Error);
     * // => false
     */
    function isError(value) {
      if (!isObjectLike(value)) {
        return false;
      }
      var tag = baseGetTag(value);
      return tag == errorTag || tag == domExcTag ||
        (typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value));
    }

    /**
     * Checks if `value` is a finite primitive number.
     *
     * **Note:** This method is based on
     * [`Number.isFinite`](https://mdn.io/Number/isFinite).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
     * @example
     *
     * _.isFinite(3);
     * // => true
     *
     * _.isFinite(Number.MIN_VALUE);
     * // => true
     *
     * _.isFinite(Infinity);
     * // => false
     *
     * _.isFinite('3');
     * // => false
     */
    function isFinite(value) {
      return typeof value == 'number' && nativeIsFinite(value);
    }

    /**
     * Checks if `value` is classified as a `Function` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a function, else `false`.
     * @example
     *
     * _.isFunction(_);
     * // => true
     *
     * _.isFunction(/abc/);
     * // => false
     */
    function isFunction(value) {
      if (!isObject(value)) {
        return false;
      }
      // The use of `Object#toString` avoids issues with the `typeof` operator
      // in Safari 9 which returns 'object' for typed arrays and other constructors.
      var tag = baseGetTag(value);
      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
    }

    /**
     * Checks if `value` is an integer.
     *
     * **Note:** This method is based on
     * [`Number.isInteger`](https://mdn.io/Number/isInteger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
     * @example
     *
     * _.isInteger(3);
     * // => true
     *
     * _.isInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isInteger(Infinity);
     * // => false
     *
     * _.isInteger('3');
     * // => false
     */
    function isInteger(value) {
      return typeof value == 'number' && value == toInteger(value);
    }

    /**
     * Checks if `value` is a valid array-like length.
     *
     * **Note:** This method is loosely based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
     * @example
     *
     * _.isLength(3);
     * // => true
     *
     * _.isLength(Number.MIN_VALUE);
     * // => false
     *
     * _.isLength(Infinity);
     * // => false
     *
     * _.isLength('3');
     * // => false
     */
    function isLength(value) {
      return typeof value == 'number' &&
        value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }

    /**
     * Checks if `value` is the
     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
     * @example
     *
     * _.isObject({});
     * // => true
     *
     * _.isObject([1, 2, 3]);
     * // => true
     *
     * _.isObject(_.noop);
     * // => true
     *
     * _.isObject(null);
     * // => false
     */
    function isObject(value) {
      var type = typeof value;
      return value != null && (type == 'object' || type == 'function');
    }

    /**
     * Checks if `value` is object-like. A value is object-like if it's not `null`
     * and has a `typeof` result of "object".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
     * @example
     *
     * _.isObjectLike({});
     * // => true
     *
     * _.isObjectLike([1, 2, 3]);
     * // => true
     *
     * _.isObjectLike(_.noop);
     * // => false
     *
     * _.isObjectLike(null);
     * // => false
     */
    function isObjectLike(value) {
      return value != null && typeof value == 'object';
    }

    /**
     * Checks if `value` is classified as a `Map` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     * @example
     *
     * _.isMap(new Map);
     * // => true
     *
     * _.isMap(new WeakMap);
     * // => false
     */
    var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;

    /**
     * Performs a partial deep comparison between `object` and `source` to
     * determine if `object` contains equivalent property values.
     *
     * **Note:** This method is equivalent to `_.matches` when `source` is
     * partially applied.
     *
     * Partial comparisons will match empty array and empty object `source`
     * values against any array or object value, respectively. See `_.isEqual`
     * for a list of supported value comparisons.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     *
     * _.isMatch(object, { 'b': 2 });
     * // => true
     *
     * _.isMatch(object, { 'b': 1 });
     * // => false
     */
    function isMatch(object, source) {
      return object === source || baseIsMatch(object, source, getMatchData(source));
    }

    /**
     * This method is like `_.isMatch` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
     * are handled by the method instead. The `customizer` is invoked with five
     * arguments: (objValue, srcValue, index|key, object, source).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, srcValue) {
     *   if (isGreeting(objValue) && isGreeting(srcValue)) {
     *     return true;
     *   }
     * }
     *
     * var object = { 'greeting': 'hello' };
     * var source = { 'greeting': 'hi' };
     *
     * _.isMatchWith(object, source, customizer);
     * // => true
     */
    function isMatchWith(object, source, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseIsMatch(object, source, getMatchData(source), customizer);
    }

    /**
     * Checks if `value` is `NaN`.
     *
     * **Note:** This method is based on
     * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
     * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
     * `undefined` and other non-number values.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
     * @example
     *
     * _.isNaN(NaN);
     * // => true
     *
     * _.isNaN(new Number(NaN));
     * // => true
     *
     * isNaN(undefined);
     * // => true
     *
     * _.isNaN(undefined);
     * // => false
     */
    function isNaN(value) {
      // An `NaN` primitive is the only value that is not equal to itself.
      // Perform the `toStringTag` check first to avoid errors with some
      // ActiveX objects in IE.
      return isNumber(value) && value != +value;
    }

    /**
     * Checks if `value` is a pristine native function.
     *
     * **Note:** This method can't reliably detect native functions in the presence
     * of the core-js package because core-js circumvents this kind of detection.
     * Despite multiple requests, the core-js maintainer has made it clear: any
     * attempt to fix the detection will be obstructed. As a result, we're left
     * with little choice but to throw an error. Unfortunately, this also affects
     * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),
     * which rely on core-js.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     * @example
     *
     * _.isNative(Array.prototype.push);
     * // => true
     *
     * _.isNative(_);
     * // => false
     */
    function isNative(value) {
      if (isMaskable(value)) {
        throw new Error(CORE_ERROR_TEXT);
      }
      return baseIsNative(value);
    }

    /**
     * Checks if `value` is `null`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
     * @example
     *
     * _.isNull(null);
     * // => true
     *
     * _.isNull(void 0);
     * // => false
     */
    function isNull(value) {
      return value === null;
    }

    /**
     * Checks if `value` is `null` or `undefined`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
     * @example
     *
     * _.isNil(null);
     * // => true
     *
     * _.isNil(void 0);
     * // => true
     *
     * _.isNil(NaN);
     * // => false
     */
    function isNil(value) {
      return value == null;
    }

    /**
     * Checks if `value` is classified as a `Number` primitive or object.
     *
     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
     * classified as numbers, use the `_.isFinite` method.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a number, else `false`.
     * @example
     *
     * _.isNumber(3);
     * // => true
     *
     * _.isNumber(Number.MIN_VALUE);
     * // => true
     *
     * _.isNumber(Infinity);
     * // => true
     *
     * _.isNumber('3');
     * // => false
     */
    function isNumber(value) {
      return typeof value == 'number' ||
        (isObjectLike(value) && baseGetTag(value) == numberTag);
    }

    /**
     * Checks if `value` is a plain object, that is, an object created by the
     * `Object` constructor or one with a `[[Prototype]]` of `null`.
     *
     * @static
     * @memberOf _
     * @since 0.8.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * _.isPlainObject(new Foo);
     * // => false
     *
     * _.isPlainObject([1, 2, 3]);
     * // => false
     *
     * _.isPlainObject({ 'x': 0, 'y': 0 });
     * // => true
     *
     * _.isPlainObject(Object.create(null));
     * // => true
     */
    function isPlainObject(value) {
      if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
        return false;
      }
      var proto = getPrototype(value);
      if (proto === null) {
        return true;
      }
      var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
      return typeof Ctor == 'function' && Ctor instanceof Ctor &&
        funcToString.call(Ctor) == objectCtorString;
    }

    /**
     * Checks if `value` is classified as a `RegExp` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
     * @example
     *
     * _.isRegExp(/abc/);
     * // => true
     *
     * _.isRegExp('/abc/');
     * // => false
     */
    var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;

    /**
     * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
     * double precision number which isn't the result of a rounded unsafe integer.
     *
     * **Note:** This method is based on
     * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.
     * @example
     *
     * _.isSafeInteger(3);
     * // => true
     *
     * _.isSafeInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isSafeInteger(Infinity);
     * // => false
     *
     * _.isSafeInteger('3');
     * // => false
     */
    function isSafeInteger(value) {
      return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
    }

    /**
     * Checks if `value` is classified as a `Set` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     * @example
     *
     * _.isSet(new Set);
     * // => true
     *
     * _.isSet(new WeakSet);
     * // => false
     */
    var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;

    /**
     * Checks if `value` is classified as a `String` primitive or object.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a string, else `false`.
     * @example
     *
     * _.isString('abc');
     * // => true
     *
     * _.isString(1);
     * // => false
     */
    function isString(value) {
      return typeof value == 'string' ||
        (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);
    }

    /**
     * Checks if `value` is classified as a `Symbol` primitive or object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
     * @example
     *
     * _.isSymbol(Symbol.iterator);
     * // => true
     *
     * _.isSymbol('abc');
     * // => false
     */
    function isSymbol(value) {
      return typeof value == 'symbol' ||
        (isObjectLike(value) && baseGetTag(value) == symbolTag);
    }

    /**
     * Checks if `value` is classified as a typed array.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     * @example
     *
     * _.isTypedArray(new Uint8Array);
     * // => true
     *
     * _.isTypedArray([]);
     * // => false
     */
    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

    /**
     * Checks if `value` is `undefined`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
     * @example
     *
     * _.isUndefined(void 0);
     * // => true
     *
     * _.isUndefined(null);
     * // => false
     */
    function isUndefined(value) {
      return value === undefined;
    }

    /**
     * Checks if `value` is classified as a `WeakMap` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.
     * @example
     *
     * _.isWeakMap(new WeakMap);
     * // => true
     *
     * _.isWeakMap(new Map);
     * // => false
     */
    function isWeakMap(value) {
      return isObjectLike(value) && getTag(value) == weakMapTag;
    }

    /**
     * Checks if `value` is classified as a `WeakSet` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.
     * @example
     *
     * _.isWeakSet(new WeakSet);
     * // => true
     *
     * _.isWeakSet(new Set);
     * // => false
     */
    function isWeakSet(value) {
      return isObjectLike(value) && baseGetTag(value) == weakSetTag;
    }

    /**
     * Checks if `value` is less than `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     * @see _.gt
     * @example
     *
     * _.lt(1, 3);
     * // => true
     *
     * _.lt(3, 3);
     * // => false
     *
     * _.lt(3, 1);
     * // => false
     */
    var lt = createRelationalOperation(baseLt);

    /**
     * Checks if `value` is less than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than or equal to
     *  `other`, else `false`.
     * @see _.gte
     * @example
     *
     * _.lte(1, 3);
     * // => true
     *
     * _.lte(3, 3);
     * // => true
     *
     * _.lte(3, 1);
     * // => false
     */
    var lte = createRelationalOperation(function(value, other) {
      return value <= other;
    });

    /**
     * Converts `value` to an array.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Array} Returns the converted array.
     * @example
     *
     * _.toArray({ 'a': 1, 'b': 2 });
     * // => [1, 2]
     *
     * _.toArray('abc');
     * // => ['a', 'b', 'c']
     *
     * _.toArray(1);
     * // => []
     *
     * _.toArray(null);
     * // => []
     */
    function toArray(value) {
      if (!value) {
        return [];
      }
      if (isArrayLike(value)) {
        return isString(value) ? stringToArray(value) : copyArray(value);
      }
      if (symIterator && value[symIterator]) {
        return iteratorToArray(value[symIterator]());
      }
      var tag = getTag(value),
          func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);

      return func(value);
    }

    /**
     * Converts `value` to a finite number.
     *
     * @static
     * @memberOf _
     * @since 4.12.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted number.
     * @example
     *
     * _.toFinite(3.2);
     * // => 3.2
     *
     * _.toFinite(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toFinite(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toFinite('3.2');
     * // => 3.2
     */
    function toFinite(value) {
      if (!value) {
        return value === 0 ? value : 0;
      }
      value = toNumber(value);
      if (value === INFINITY || value === -INFINITY) {
        var sign = (value < 0 ? -1 : 1);
        return sign * MAX_INTEGER;
      }
      return value === value ? value : 0;
    }

    /**
     * Converts `value` to an integer.
     *
     * **Note:** This method is loosely based on
     * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toInteger(3.2);
     * // => 3
     *
     * _.toInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toInteger(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toInteger('3.2');
     * // => 3
     */
    function toInteger(value) {
      var result = toFinite(value),
          remainder = result % 1;

      return result === result ? (remainder ? result - remainder : result) : 0;
    }

    /**
     * Converts `value` to an integer suitable for use as the length of an
     * array-like object.
     *
     * **Note:** This method is based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toLength(3.2);
     * // => 3
     *
     * _.toLength(Number.MIN_VALUE);
     * // => 0
     *
     * _.toLength(Infinity);
     * // => 4294967295
     *
     * _.toLength('3.2');
     * // => 3
     */
    function toLength(value) {
      return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
    }

    /**
     * Converts `value` to a number.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     * @example
     *
     * _.toNumber(3.2);
     * // => 3.2
     *
     * _.toNumber(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toNumber(Infinity);
     * // => Infinity
     *
     * _.toNumber('3.2');
     * // => 3.2
     */
    function toNumber(value) {
      if (typeof value == 'number') {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      if (isObject(value)) {
        var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
        value = isObject(other) ? (other + '') : other;
      }
      if (typeof value != 'string') {
        return value === 0 ? value : +value;
      }
      value = value.replace(reTrim, '');
      var isBinary = reIsBinary.test(value);
      return (isBinary || reIsOctal.test(value))
        ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
        : (reIsBadHex.test(value) ? NAN : +value);
    }

    /**
     * Converts `value` to a plain object flattening inherited enumerable string
     * keyed properties of `value` to own properties of the plain object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Object} Returns the converted plain object.
     * @example
     *
     * function Foo() {
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.assign({ 'a': 1 }, new Foo);
     * // => { 'a': 1, 'b': 2 }
     *
     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
     * // => { 'a': 1, 'b': 2, 'c': 3 }
     */
    function toPlainObject(value) {
      return copyObject(value, keysIn(value));
    }

    /**
     * Converts `value` to a safe integer. A safe integer can be compared and
     * represented correctly.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toSafeInteger(3.2);
     * // => 3
     *
     * _.toSafeInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toSafeInteger(Infinity);
     * // => 9007199254740991
     *
     * _.toSafeInteger('3.2');
     * // => 3
     */
    function toSafeInteger(value) {
      return value
        ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER)
        : (value === 0 ? value : 0);
    }

    /**
     * Converts `value` to a string. An empty string is returned for `null`
     * and `undefined` values. The sign of `-0` is preserved.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.toString(null);
     * // => ''
     *
     * _.toString(-0);
     * // => '-0'
     *
     * _.toString([1, 2, 3]);
     * // => '1,2,3'
     */
    function toString(value) {
      return value == null ? '' : baseToString(value);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Assigns own enumerable string keyed properties of source objects to the
     * destination object. Source objects are applied from left to right.
     * Subsequent sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object` and is loosely based on
     * [`Object.assign`](https://mdn.io/Object/assign).
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assignIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assign({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'c': 3 }
     */
    var assign = createAssigner(function(object, source) {
      if (isPrototype(source) || isArrayLike(source)) {
        copyObject(source, keys(source), object);
        return;
      }
      for (var key in source) {
        if (hasOwnProperty.call(source, key)) {
          assignValue(object, key, source[key]);
        }
      }
    });

    /**
     * This method is like `_.assign` except that it iterates over own and
     * inherited source properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias extend
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assign
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assignIn({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
     */
    var assignIn = createAssigner(function(object, source) {
      copyObject(source, keysIn(source), object);
    });

    /**
     * This method is like `_.assignIn` except that it accepts `customizer`
     * which is invoked to produce the assigned values. If `customizer` returns
     * `undefined`, assignment is handled by the method instead. The `customizer`
     * is invoked with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias extendWith
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @see _.assignWith
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignInWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
      copyObject(source, keysIn(source), object, customizer);
    });

    /**
     * This method is like `_.assign` except that it accepts `customizer`
     * which is invoked to produce the assigned values. If `customizer` returns
     * `undefined`, assignment is handled by the method instead. The `customizer`
     * is invoked with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @see _.assignInWith
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
      copyObject(source, keys(source), object, customizer);
    });

    /**
     * Creates an array of values corresponding to `paths` of `object`.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Array} Returns the picked values.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _.at(object, ['a[0].b.c', 'a[1]']);
     * // => [3, 4]
     */
    var at = flatRest(baseAt);

    /**
     * Creates an object that inherits from the `prototype` object. If a
     * `properties` object is given, its own enumerable string keyed properties
     * are assigned to the created object.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Object
     * @param {Object} prototype The object to inherit from.
     * @param {Object} [properties] The properties to assign to the object.
     * @returns {Object} Returns the new object.
     * @example
     *
     * function Shape() {
     *   this.x = 0;
     *   this.y = 0;
     * }
     *
     * function Circle() {
     *   Shape.call(this);
     * }
     *
     * Circle.prototype = _.create(Shape.prototype, {
     *   'constructor': Circle
     * });
     *
     * var circle = new Circle;
     * circle instanceof Circle;
     * // => true
     *
     * circle instanceof Shape;
     * // => true
     */
    function create(prototype, properties) {
      var result = baseCreate(prototype);
      return properties == null ? result : baseAssign(result, properties);
    }

    /**
     * Assigns own and inherited enumerable string keyed properties of source
     * objects to the destination object for all destination properties that
     * resolve to `undefined`. Source objects are applied from left to right.
     * Once a property is set, additional values of the same property are ignored.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaultsDeep
     * @example
     *
     * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var defaults = baseRest(function(args) {
      args.push(undefined, customDefaultsAssignIn);
      return apply(assignInWith, undefined, args);
    });

    /**
     * This method is like `_.defaults` except that it recursively assigns
     * default properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaults
     * @example
     *
     * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });
     * // => { 'a': { 'b': 2, 'c': 3 } }
     */
    var defaultsDeep = baseRest(function(args) {
      args.push(undefined, customDefaultsMerge);
      return apply(mergeWith, undefined, args);
    });

    /**
     * This method is like `_.find` except that it returns the key of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element,
     *  else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findKey(users, function(o) { return o.age < 40; });
     * // => 'barney' (iteration order is not guaranteed)
     *
     * // The `_.matches` iteratee shorthand.
     * _.findKey(users, { 'age': 1, 'active': true });
     * // => 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findKey(users, 'active');
     * // => 'barney'
     */
    function findKey(object, predicate) {
      return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
    }

    /**
     * This method is like `_.findKey` except that it iterates over elements of
     * a collection in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element,
     *  else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findLastKey(users, function(o) { return o.age < 40; });
     * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastKey(users, { 'age': 36, 'active': true });
     * // => 'barney'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastKey(users, 'active');
     * // => 'pebbles'
     */
    function findLastKey(object, predicate) {
      return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
    }

    /**
     * Iterates over own and inherited enumerable string keyed properties of an
     * object and invokes `iteratee` for each property. The iteratee is invoked
     * with three arguments: (value, key, object). Iteratee functions may exit
     * iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 0.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forInRight
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forIn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
     */
    function forIn(object, iteratee) {
      return object == null
        ? object
        : baseFor(object, getIteratee(iteratee, 3), keysIn);
    }

    /**
     * This method is like `_.forIn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forInRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
     */
    function forInRight(object, iteratee) {
      return object == null
        ? object
        : baseForRight(object, getIteratee(iteratee, 3), keysIn);
    }

    /**
     * Iterates over own enumerable string keyed properties of an object and
     * invokes `iteratee` for each property. The iteratee is invoked with three
     * arguments: (value, key, object). Iteratee functions may exit iteration
     * early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 0.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forOwnRight
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */
    function forOwn(object, iteratee) {
      return object && baseForOwn(object, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.forOwn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forOwn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwnRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
     */
    function forOwnRight(object, iteratee) {
      return object && baseForOwnRight(object, getIteratee(iteratee, 3));
    }

    /**
     * Creates an array of function property names from own enumerable properties
     * of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the function names.
     * @see _.functionsIn
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functions(new Foo);
     * // => ['a', 'b']
     */
    function functions(object) {
      return object == null ? [] : baseFunctions(object, keys(object));
    }

    /**
     * Creates an array of function property names from own and inherited
     * enumerable properties of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the function names.
     * @see _.functions
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functionsIn(new Foo);
     * // => ['a', 'b', 'c']
     */
    function functionsIn(object) {
      return object == null ? [] : baseFunctions(object, keysIn(object));
    }

    /**
     * Gets the value at `path` of `object`. If the resolved value is
     * `undefined`, the `defaultValue` is returned in its place.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.get(object, 'a[0].b.c');
     * // => 3
     *
     * _.get(object, ['a', '0', 'b', 'c']);
     * // => 3
     *
     * _.get(object, 'a.b.c', 'default');
     * // => 'default'
     */
    function get(object, path, defaultValue) {
      var result = object == null ? undefined : baseGet(object, path);
      return result === undefined ? defaultValue : result;
    }

    /**
     * Checks if `path` is a direct property of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = { 'a': { 'b': 2 } };
     * var other = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.has(object, 'a');
     * // => true
     *
     * _.has(object, 'a.b');
     * // => true
     *
     * _.has(object, ['a', 'b']);
     * // => true
     *
     * _.has(other, 'a');
     * // => false
     */
    function has(object, path) {
      return object != null && hasPath(object, path, baseHas);
    }

    /**
     * Checks if `path` is a direct or inherited property of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.hasIn(object, 'a');
     * // => true
     *
     * _.hasIn(object, 'a.b');
     * // => true
     *
     * _.hasIn(object, ['a', 'b']);
     * // => true
     *
     * _.hasIn(object, 'b');
     * // => false
     */
    function hasIn(object, path) {
      return object != null && hasPath(object, path, baseHasIn);
    }

    /**
     * Creates an object composed of the inverted keys and values of `object`.
     * If `object` contains duplicate values, subsequent values overwrite
     * property assignments of previous values.
     *
     * @static
     * @memberOf _
     * @since 0.7.0
     * @category Object
     * @param {Object} object The object to invert.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invert(object);
     * // => { '1': 'c', '2': 'b' }
     */
    var invert = createInverter(function(result, value, key) {
      result[value] = key;
    }, constant(identity));

    /**
     * This method is like `_.invert` except that the inverted object is generated
     * from the results of running each element of `object` thru `iteratee`. The
     * corresponding inverted value of each inverted key is an array of keys
     * responsible for generating the inverted value. The iteratee is invoked
     * with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.1.0
     * @category Object
     * @param {Object} object The object to invert.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invertBy(object);
     * // => { '1': ['a', 'c'], '2': ['b'] }
     *
     * _.invertBy(object, function(value) {
     *   return 'group' + value;
     * });
     * // => { 'group1': ['a', 'c'], 'group2': ['b'] }
     */
    var invertBy = createInverter(function(result, value, key) {
      if (hasOwnProperty.call(result, value)) {
        result[value].push(key);
      } else {
        result[value] = [key];
      }
    }, getIteratee);

    /**
     * Invokes the method at `path` of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
     *
     * _.invoke(object, 'a[0].b.c.slice', 1, 3);
     * // => [2, 3]
     */
    var invoke = baseRest(baseInvoke);

    /**
     * Creates an array of the own enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects. See the
     * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * for more details.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keys(new Foo);
     * // => ['a', 'b'] (iteration order is not guaranteed)
     *
     * _.keys('hi');
     * // => ['0', '1']
     */
    function keys(object) {
      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
    }

    /**
     * Creates an array of the own and inherited enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keysIn(new Foo);
     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
     */
    function keysIn(object) {
      return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
    }

    /**
     * The opposite of `_.mapValues`; this method creates an object with the
     * same values as `object` and keys generated by running each own enumerable
     * string keyed property of `object` thru `iteratee`. The iteratee is invoked
     * with three arguments: (value, key, object).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @see _.mapValues
     * @example
     *
     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
     *   return key + value;
     * });
     * // => { 'a1': 1, 'b2': 2 }
     */
    function mapKeys(object, iteratee) {
      var result = {};
      iteratee = getIteratee(iteratee, 3);

      baseForOwn(object, function(value, key, object) {
        baseAssignValue(result, iteratee(value, key, object), value);
      });
      return result;
    }

    /**
     * Creates an object with the same keys as `object` and values generated
     * by running each own enumerable string keyed property of `object` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, key, object).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @see _.mapKeys
     * @example
     *
     * var users = {
     *   'fred':    { 'user': 'fred',    'age': 40 },
     *   'pebbles': { 'user': 'pebbles', 'age': 1 }
     * };
     *
     * _.mapValues(users, function(o) { return o.age; });
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     *
     * // The `_.property` iteratee shorthand.
     * _.mapValues(users, 'age');
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     */
    function mapValues(object, iteratee) {
      var result = {};
      iteratee = getIteratee(iteratee, 3);

      baseForOwn(object, function(value, key, object) {
        baseAssignValue(result, key, iteratee(value, key, object));
      });
      return result;
    }

    /**
     * This method is like `_.assign` except that it recursively merges own and
     * inherited enumerable string keyed properties of source objects into the
     * destination object. Source properties that resolve to `undefined` are
     * skipped if a destination value exists. Array and plain object properties
     * are merged recursively. Other objects and value types are overridden by
     * assignment. Source objects are applied from left to right. Subsequent
     * sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {
     *   'a': [{ 'b': 2 }, { 'd': 4 }]
     * };
     *
     * var other = {
     *   'a': [{ 'c': 3 }, { 'e': 5 }]
     * };
     *
     * _.merge(object, other);
     * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
     */
    var merge = createAssigner(function(object, source, srcIndex) {
      baseMerge(object, source, srcIndex);
    });

    /**
     * This method is like `_.merge` except that it accepts `customizer` which
     * is invoked to produce the merged values of the destination and source
     * properties. If `customizer` returns `undefined`, merging is handled by the
     * method instead. The `customizer` is invoked with six arguments:
     * (objValue, srcValue, key, object, source, stack).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} customizer The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   if (_.isArray(objValue)) {
     *     return objValue.concat(srcValue);
     *   }
     * }
     *
     * var object = { 'a': [1], 'b': [2] };
     * var other = { 'a': [3], 'b': [4] };
     *
     * _.mergeWith(object, other, customizer);
     * // => { 'a': [1, 3], 'b': [2, 4] }
     */
    var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
      baseMerge(object, source, srcIndex, customizer);
    });

    /**
     * The opposite of `_.pick`; this method creates an object composed of the
     * own and inherited enumerable property paths of `object` that are not omitted.
     *
     * **Note:** This method is considerably slower than `_.pick`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [paths] The property paths to omit.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omit(object, ['a', 'c']);
     * // => { 'b': '2' }
     */
    var omit = flatRest(function(object, paths) {
      var result = {};
      if (object == null) {
        return result;
      }
      var isDeep = false;
      paths = arrayMap(paths, function(path) {
        path = castPath(path, object);
        isDeep || (isDeep = path.length > 1);
        return path;
      });
      copyObject(object, getAllKeysIn(object), result);
      if (isDeep) {
        result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
      }
      var length = paths.length;
      while (length--) {
        baseUnset(result, paths[length]);
      }
      return result;
    });

    /**
     * The opposite of `_.pickBy`; this method creates an object composed of
     * the own and inherited enumerable string keyed properties of `object` that
     * `predicate` doesn't return truthy for. The predicate is invoked with two
     * arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The source object.
     * @param {Function} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omitBy(object, _.isNumber);
     * // => { 'b': '2' }
     */
    function omitBy(object, predicate) {
      return pickBy(object, negate(getIteratee(predicate)));
    }

    /**
     * Creates an object composed of the picked `object` properties.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pick(object, ['a', 'c']);
     * // => { 'a': 1, 'c': 3 }
     */
    var pick = flatRest(function(object, paths) {
      return object == null ? {} : basePick(object, paths);
    });

    /**
     * Creates an object composed of the `object` properties `predicate` returns
     * truthy for. The predicate is invoked with two arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The source object.
     * @param {Function} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pickBy(object, _.isNumber);
     * // => { 'a': 1, 'c': 3 }
     */
    function pickBy(object, predicate) {
      if (object == null) {
        return {};
      }
      var props = arrayMap(getAllKeysIn(object), function(prop) {
        return [prop];
      });
      predicate = getIteratee(predicate);
      return basePickBy(object, props, function(value, path) {
        return predicate(value, path[0]);
      });
    }

    /**
     * This method is like `_.get` except that if the resolved value is a
     * function it's invoked with the `this` binding of its parent object and
     * its result is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to resolve.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
     *
     * _.result(object, 'a[0].b.c1');
     * // => 3
     *
     * _.result(object, 'a[0].b.c2');
     * // => 4
     *
     * _.result(object, 'a[0].b.c3', 'default');
     * // => 'default'
     *
     * _.result(object, 'a[0].b.c3', _.constant('default'));
     * // => 'default'
     */
    function result(object, path, defaultValue) {
      path = castPath(path, object);

      var index = -1,
          length = path.length;

      // Ensure the loop is entered when path is empty.
      if (!length) {
        length = 1;
        object = undefined;
      }
      while (++index < length) {
        var value = object == null ? undefined : object[toKey(path[index])];
        if (value === undefined) {
          index = length;
          value = defaultValue;
        }
        object = isFunction(value) ? value.call(object) : value;
      }
      return object;
    }

    /**
     * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
     * it's created. Arrays are created for missing index properties while objects
     * are created for all other missing properties. Use `_.setWith` to customize
     * `path` creation.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.set(object, 'a[0].b.c', 4);
     * console.log(object.a[0].b.c);
     * // => 4
     *
     * _.set(object, ['x', '0', 'y', 'z'], 5);
     * console.log(object.x[0].y.z);
     * // => 5
     */
    function set(object, path, value) {
      return object == null ? object : baseSet(object, path, value);
    }

    /**
     * This method is like `_.set` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.setWith(object, '[0][1]', 'a', Object);
     * // => { '0': { '1': 'a' } }
     */
    function setWith(object, path, value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return object == null ? object : baseSet(object, path, value, customizer);
    }

    /**
     * Creates an array of own enumerable string keyed-value pairs for `object`
     * which can be consumed by `_.fromPairs`. If `object` is a map or set, its
     * entries are returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias entries
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairs(new Foo);
     * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
     */
    var toPairs = createToPairs(keys);

    /**
     * Creates an array of own and inherited enumerable string keyed-value pairs
     * for `object` which can be consumed by `_.fromPairs`. If `object` is a map
     * or set, its entries are returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias entriesIn
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairsIn(new Foo);
     * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)
     */
    var toPairsIn = createToPairs(keysIn);

    /**
     * An alternative to `_.reduce`; this method transforms `object` to a new
     * `accumulator` object which is the result of running each of its own
     * enumerable string keyed properties thru `iteratee`, with each invocation
     * potentially mutating the `accumulator` object. If `accumulator` is not
     * provided, a new object with the same `[[Prototype]]` will be used. The
     * iteratee is invoked with four arguments: (accumulator, value, key, object).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The custom accumulator value.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * _.transform([2, 3, 4], function(result, n) {
     *   result.push(n *= n);
     *   return n % 2 == 0;
     * }, []);
     * // => [4, 9]
     *
     * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] }
     */
    function transform(object, iteratee, accumulator) {
      var isArr = isArray(object),
          isArrLike = isArr || isBuffer(object) || isTypedArray(object);

      iteratee = getIteratee(iteratee, 4);
      if (accumulator == null) {
        var Ctor = object && object.constructor;
        if (isArrLike) {
          accumulator = isArr ? new Ctor : [];
        }
        else if (isObject(object)) {
          accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
        }
        else {
          accumulator = {};
        }
      }
      (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object) {
        return iteratee(accumulator, value, index, object);
      });
      return accumulator;
    }

    /**
     * Removes the property at `path` of `object`.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 7 } }] };
     * _.unset(object, 'a[0].b.c');
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     *
     * _.unset(object, ['a', '0', 'b', 'c']);
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     */
    function unset(object, path) {
      return object == null ? true : baseUnset(object, path);
    }

    /**
     * This method is like `_.set` except that accepts `updater` to produce the
     * value to set. Use `_.updateWith` to customize `path` creation. The `updater`
     * is invoked with one argument: (value).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.update(object, 'a[0].b.c', function(n) { return n * n; });
     * console.log(object.a[0].b.c);
     * // => 9
     *
     * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
     * console.log(object.x[0].y.z);
     * // => 0
     */
    function update(object, path, updater) {
      return object == null ? object : baseUpdate(object, path, castFunction(updater));
    }

    /**
     * This method is like `_.update` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.updateWith(object, '[0][1]', _.constant('a'), Object);
     * // => { '0': { '1': 'a' } }
     */
    function updateWith(object, path, updater, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
    }

    /**
     * Creates an array of the own enumerable string keyed property values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.values(new Foo);
     * // => [1, 2] (iteration order is not guaranteed)
     *
     * _.values('hi');
     * // => ['h', 'i']
     */
    function values(object) {
      return object == null ? [] : baseValues(object, keys(object));
    }

    /**
     * Creates an array of the own and inherited enumerable string keyed property
     * values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.valuesIn(new Foo);
     * // => [1, 2, 3] (iteration order is not guaranteed)
     */
    function valuesIn(object) {
      return object == null ? [] : baseValues(object, keysIn(object));
    }

    /*------------------------------------------------------------------------*/

    /**
     * Clamps `number` within the inclusive `lower` and `upper` bounds.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Number
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     * @example
     *
     * _.clamp(-10, -5, 5);
     * // => -5
     *
     * _.clamp(10, -5, 5);
     * // => 5
     */
    function clamp(number, lower, upper) {
      if (upper === undefined) {
        upper = lower;
        lower = undefined;
      }
      if (upper !== undefined) {
        upper = toNumber(upper);
        upper = upper === upper ? upper : 0;
      }
      if (lower !== undefined) {
        lower = toNumber(lower);
        lower = lower === lower ? lower : 0;
      }
      return baseClamp(toNumber(number), lower, upper);
    }

    /**
     * Checks if `n` is between `start` and up to, but not including, `end`. If
     * `end` is not specified, it's set to `start` with `start` then set to `0`.
     * If `start` is greater than `end` the params are swapped to support
     * negative ranges.
     *
     * @static
     * @memberOf _
     * @since 3.3.0
     * @category Number
     * @param {number} number The number to check.
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     * @see _.range, _.rangeRight
     * @example
     *
     * _.inRange(3, 2, 4);
     * // => true
     *
     * _.inRange(4, 8);
     * // => true
     *
     * _.inRange(4, 2);
     * // => false
     *
     * _.inRange(2, 2);
     * // => false
     *
     * _.inRange(1.2, 2);
     * // => true
     *
     * _.inRange(5.2, 4);
     * // => false
     *
     * _.inRange(-3, -2, -6);
     * // => true
     */
    function inRange(number, start, end) {
      start = toFinite(start);
      if (end === undefined) {
        end = start;
        start = 0;
      } else {
        end = toFinite(end);
      }
      number = toNumber(number);
      return baseInRange(number, start, end);
    }

    /**
     * Produces a random number between the inclusive `lower` and `upper` bounds.
     * If only one argument is provided a number between `0` and the given number
     * is returned. If `floating` is `true`, or either `lower` or `upper` are
     * floats, a floating-point number is returned instead of an integer.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @memberOf _
     * @since 0.7.0
     * @category Number
     * @param {number} [lower=0] The lower bound.
     * @param {number} [upper=1] The upper bound.
     * @param {boolean} [floating] Specify returning a floating-point number.
     * @returns {number} Returns the random number.
     * @example
     *
     * _.random(0, 5);
     * // => an integer between 0 and 5
     *
     * _.random(5);
     * // => also an integer between 0 and 5
     *
     * _.random(5, true);
     * // => a floating-point number between 0 and 5
     *
     * _.random(1.2, 5.2);
     * // => a floating-point number between 1.2 and 5.2
     */
    function random(lower, upper, floating) {
      if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {
        upper = floating = undefined;
      }
      if (floating === undefined) {
        if (typeof upper == 'boolean') {
          floating = upper;
          upper = undefined;
        }
        else if (typeof lower == 'boolean') {
          floating = lower;
          lower = undefined;
        }
      }
      if (lower === undefined && upper === undefined) {
        lower = 0;
        upper = 1;
      }
      else {
        lower = toFinite(lower);
        if (upper === undefined) {
          upper = lower;
          lower = 0;
        } else {
          upper = toFinite(upper);
        }
      }
      if (lower > upper) {
        var temp = lower;
        lower = upper;
        upper = temp;
      }
      if (floating || lower % 1 || upper % 1) {
        var rand = nativeRandom();
        return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);
      }
      return baseRandom(lower, upper);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the camel cased string.
     * @example
     *
     * _.camelCase('Foo Bar');
     * // => 'fooBar'
     *
     * _.camelCase('--foo-bar--');
     * // => 'fooBar'
     *
     * _.camelCase('__FOO_BAR__');
     * // => 'fooBar'
     */
    var camelCase = createCompounder(function(result, word, index) {
      word = word.toLowerCase();
      return result + (index ? capitalize(word) : word);
    });

    /**
     * Converts the first character of `string` to upper case and the remaining
     * to lower case.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to capitalize.
     * @returns {string} Returns the capitalized string.
     * @example
     *
     * _.capitalize('FRED');
     * // => 'Fred'
     */
    function capitalize(string) {
      return upperFirst(toString(string).toLowerCase());
    }

    /**
     * Deburrs `string` by converting
     * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
     * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
     * letters to basic Latin letters and removing
     * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to deburr.
     * @returns {string} Returns the deburred string.
     * @example
     *
     * _.deburr('déjà vu');
     * // => 'deja vu'
     */
    function deburr(string) {
      string = toString(string);
      return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
    }

    /**
     * Checks if `string` ends with the given target string.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {string} [target] The string to search for.
     * @param {number} [position=string.length] The position to search up to.
     * @returns {boolean} Returns `true` if `string` ends with `target`,
     *  else `false`.
     * @example
     *
     * _.endsWith('abc', 'c');
     * // => true
     *
     * _.endsWith('abc', 'b');
     * // => false
     *
     * _.endsWith('abc', 'b', 2);
     * // => true
     */
    function endsWith(string, target, position) {
      string = toString(string);
      target = baseToString(target);

      var length = string.length;
      position = position === undefined
        ? length
        : baseClamp(toInteger(position), 0, length);

      var end = position;
      position -= target.length;
      return position >= 0 && string.slice(position, end) == target;
    }

    /**
     * Converts the characters "&", "<", ">", '"', and "'" in `string` to their
     * corresponding HTML entities.
     *
     * **Note:** No other characters are escaped. To escape additional
     * characters use a third-party library like [_he_](https://mths.be/he).
     *
     * Though the ">" character is escaped for symmetry, characters like
     * ">" and "/" don't need escaping in HTML and have no special meaning
     * unless they're part of a tag or unquoted attribute value. See
     * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
     * (under "semi-related fun fact") for more details.
     *
     * When working with HTML you should always
     * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
     * XSS vectors.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escape('fred, barney, & pebbles');
     * // => 'fred, barney, &amp; pebbles'
     */
    function escape(string) {
      string = toString(string);
      return (string && reHasUnescapedHtml.test(string))
        ? string.replace(reUnescapedHtml, escapeHtmlChar)
        : string;
    }

    /**
     * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
     * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escapeRegExp('[lodash](https://lodash.com/)');
     * // => '\[lodash\]\(https://lodash\.com/\)'
     */
    function escapeRegExp(string) {
      string = toString(string);
      return (string && reHasRegExpChar.test(string))
        ? string.replace(reRegExpChar, '\\$&')
        : string;
    }

    /**
     * Converts `string` to
     * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the kebab cased string.
     * @example
     *
     * _.kebabCase('Foo Bar');
     * // => 'foo-bar'
     *
     * _.kebabCase('fooBar');
     * // => 'foo-bar'
     *
     * _.kebabCase('__FOO_BAR__');
     * // => 'foo-bar'
     */
    var kebabCase = createCompounder(function(result, word, index) {
      return result + (index ? '-' : '') + word.toLowerCase();
    });

    /**
     * Converts `string`, as space separated words, to lower case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.lowerCase('--Foo-Bar--');
     * // => 'foo bar'
     *
     * _.lowerCase('fooBar');
     * // => 'foo bar'
     *
     * _.lowerCase('__FOO_BAR__');
     * // => 'foo bar'
     */
    var lowerCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + word.toLowerCase();
    });

    /**
     * Converts the first character of `string` to lower case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.lowerFirst('Fred');
     * // => 'fred'
     *
     * _.lowerFirst('FRED');
     * // => 'fRED'
     */
    var lowerFirst = createCaseFirst('toLowerCase');

    /**
     * Pads `string` on the left and right sides if it's shorter than `length`.
     * Padding characters are truncated if they can't be evenly divided by `length`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.pad('abc', 8);
     * // => '  abc   '
     *
     * _.pad('abc', 8, '_-');
     * // => '_-abc_-_'
     *
     * _.pad('abc', 3);
     * // => 'abc'
     */
    function pad(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      if (!length || strLength >= length) {
        return string;
      }
      var mid = (length - strLength) / 2;
      return (
        createPadding(nativeFloor(mid), chars) +
        string +
        createPadding(nativeCeil(mid), chars)
      );
    }

    /**
     * Pads `string` on the right side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padEnd('abc', 6);
     * // => 'abc   '
     *
     * _.padEnd('abc', 6, '_-');
     * // => 'abc_-_'
     *
     * _.padEnd('abc', 3);
     * // => 'abc'
     */
    function padEnd(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      return (length && strLength < length)
        ? (string + createPadding(length - strLength, chars))
        : string;
    }

    /**
     * Pads `string` on the left side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padStart('abc', 6);
     * // => '   abc'
     *
     * _.padStart('abc', 6, '_-');
     * // => '_-_abc'
     *
     * _.padStart('abc', 3);
     * // => 'abc'
     */
    function padStart(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      return (length && strLength < length)
        ? (createPadding(length - strLength, chars) + string)
        : string;
    }

    /**
     * Converts `string` to an integer of the specified radix. If `radix` is
     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a
     * hexadecimal, in which case a `radix` of `16` is used.
     *
     * **Note:** This method aligns with the
     * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category String
     * @param {string} string The string to convert.
     * @param {number} [radix=10] The radix to interpret `value` by.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.parseInt('08');
     * // => 8
     *
     * _.map(['6', '08', '10'], _.parseInt);
     * // => [6, 8, 10]
     */
    function parseInt(string, radix, guard) {
      if (guard || radix == null) {
        radix = 0;
      } else if (radix) {
        radix = +radix;
      }
      return nativeParseInt(toString(string).replace(reTrimStart, ''), radix || 0);
    }

    /**
     * Repeats the given string `n` times.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to repeat.
     * @param {number} [n=1] The number of times to repeat the string.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the repeated string.
     * @example
     *
     * _.repeat('*', 3);
     * // => '***'
     *
     * _.repeat('abc', 2);
     * // => 'abcabc'
     *
     * _.repeat('abc', 0);
     * // => ''
     */
    function repeat(string, n, guard) {
      if ((guard ? isIterateeCall(string, n, guard) : n === undefined)) {
        n = 1;
      } else {
        n = toInteger(n);
      }
      return baseRepeat(toString(string), n);
    }

    /**
     * Replaces matches for `pattern` in `string` with `replacement`.
     *
     * **Note:** This method is based on
     * [`String#replace`](https://mdn.io/String/replace).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to modify.
     * @param {RegExp|string} pattern The pattern to replace.
     * @param {Function|string} replacement The match replacement.
     * @returns {string} Returns the modified string.
     * @example
     *
     * _.replace('Hi Fred', 'Fred', 'Barney');
     * // => 'Hi Barney'
     */
    function replace() {
      var args = arguments,
          string = toString(args[0]);

      return args.length < 3 ? string : string.replace(args[1], args[2]);
    }

    /**
     * Converts `string` to
     * [snake case](https://en.wikipedia.org/wiki/Snake_case).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the snake cased string.
     * @example
     *
     * _.snakeCase('Foo Bar');
     * // => 'foo_bar'
     *
     * _.snakeCase('fooBar');
     * // => 'foo_bar'
     *
     * _.snakeCase('--FOO-BAR--');
     * // => 'foo_bar'
     */
    var snakeCase = createCompounder(function(result, word, index) {
      return result + (index ? '_' : '') + word.toLowerCase();
    });

    /**
     * Splits `string` by `separator`.
     *
     * **Note:** This method is based on
     * [`String#split`](https://mdn.io/String/split).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to split.
     * @param {RegExp|string} separator The separator pattern to split by.
     * @param {number} [limit] The length to truncate results to.
     * @returns {Array} Returns the string segments.
     * @example
     *
     * _.split('a-b-c', '-', 2);
     * // => ['a', 'b']
     */
    function split(string, separator, limit) {
      if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {
        separator = limit = undefined;
      }
      limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;
      if (!limit) {
        return [];
      }
      string = toString(string);
      if (string && (
            typeof separator == 'string' ||
            (separator != null && !isRegExp(separator))
          )) {
        separator = baseToString(separator);
        if (!separator && hasUnicode(string)) {
          return castSlice(stringToArray(string), 0, limit);
        }
      }
      return string.split(separator, limit);
    }

    /**
     * Converts `string` to
     * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
     *
     * @static
     * @memberOf _
     * @since 3.1.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the start cased string.
     * @example
     *
     * _.startCase('--foo-bar--');
     * // => 'Foo Bar'
     *
     * _.startCase('fooBar');
     * // => 'Foo Bar'
     *
     * _.startCase('__FOO_BAR__');
     * // => 'FOO BAR'
     */
    var startCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + upperFirst(word);
    });

    /**
     * Checks if `string` starts with the given target string.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {string} [target] The string to search for.
     * @param {number} [position=0] The position to search from.
     * @returns {boolean} Returns `true` if `string` starts with `target`,
     *  else `false`.
     * @example
     *
     * _.startsWith('abc', 'a');
     * // => true
     *
     * _.startsWith('abc', 'b');
     * // => false
     *
     * _.startsWith('abc', 'b', 1);
     * // => true
     */
    function startsWith(string, target, position) {
      string = toString(string);
      position = position == null
        ? 0
        : baseClamp(toInteger(position), 0, string.length);

      target = baseToString(target);
      return string.slice(position, position + target.length) == target;
    }

    /**
     * Creates a compiled template function that can interpolate data properties
     * in "interpolate" delimiters, HTML-escape interpolated data properties in
     * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
     * properties may be accessed as free variables in the template. If a setting
     * object is given, it takes precedence over `_.templateSettings` values.
     *
     * **Note:** In the development build `_.template` utilizes
     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
     * for easier debugging.
     *
     * For more information on precompiling templates see
     * [lodash's custom builds documentation](https://lodash.com/custom-builds).
     *
     * For more information on Chrome extension sandboxes see
     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category String
     * @param {string} [string=''] The template string.
     * @param {Object} [options={}] The options object.
     * @param {RegExp} [options.escape=_.templateSettings.escape]
     *  The HTML "escape" delimiter.
     * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
     *  The "evaluate" delimiter.
     * @param {Object} [options.imports=_.templateSettings.imports]
     *  An object to import into the template as free variables.
     * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
     *  The "interpolate" delimiter.
     * @param {string} [options.sourceURL='lodash.templateSources[n]']
     *  The sourceURL of the compiled template.
     * @param {string} [options.variable='obj']
     *  The data object variable name.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the compiled template function.
     * @example
     *
     * // Use the "interpolate" delimiter to create a compiled template.
     * var compiled = _.template('hello <%= user %>!');
     * compiled({ 'user': 'fred' });
     * // => 'hello fred!'
     *
     * // Use the HTML "escape" delimiter to escape data property values.
     * var compiled = _.template('<b><%- value %></b>');
     * compiled({ 'value': '<script>' });
     * // => '<b>&lt;script&gt;</b>'
     *
     * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the internal `print` function in "evaluate" delimiters.
     * var compiled = _.template('<% print("hello " + user); %>!');
     * compiled({ 'user': 'barney' });
     * // => 'hello barney!'
     *
     * // Use the ES template literal delimiter as an "interpolate" delimiter.
     * // Disable support by replacing the "interpolate" delimiter.
     * var compiled = _.template('hello ${ user }!');
     * compiled({ 'user': 'pebbles' });
     * // => 'hello pebbles!'
     *
     * // Use backslashes to treat delimiters as plain text.
     * var compiled = _.template('<%= "\\<%- value %\\>" %>');
     * compiled({ 'value': 'ignored' });
     * // => '<%- value %>'
     *
     * // Use the `imports` option to import `jQuery` as `jq`.
     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the `sourceURL` option to specify a custom sourceURL for the template.
     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
     * compiled(data);
     * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
     *
     * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
     * compiled.source;
     * // => function(data) {
     * //   var __t, __p = '';
     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
     * //   return __p;
     * // }
     *
     * // Use custom template delimiters.
     * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
     * var compiled = _.template('hello {{ user }}!');
     * compiled({ 'user': 'mustache' });
     * // => 'hello mustache!'
     *
     * // Use the `source` property to inline compiled templates for meaningful
     * // line numbers in error messages and stack traces.
     * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\
     *   var JST = {\
     *     "main": ' + _.template(mainText).source + '\
     *   };\
     * ');
     */
    function template(string, options, guard) {
      // Based on John Resig's `tmpl` implementation
      // (http://ejohn.org/blog/javascript-micro-templating/)
      // and Laura Doktorova's doT.js (https://github.com/olado/doT).
      var settings = lodash.templateSettings;

      if (guard && isIterateeCall(string, options, guard)) {
        options = undefined;
      }
      string = toString(string);
      options = assignInWith({}, options, settings, customDefaultsAssignIn);

      var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn),
          importsKeys = keys(imports),
          importsValues = baseValues(imports, importsKeys);

      var isEscaping,
          isEvaluating,
          index = 0,
          interpolate = options.interpolate || reNoMatch,
          source = "__p += '";

      // Compile the regexp to match each delimiter.
      var reDelimiters = RegExp(
        (options.escape || reNoMatch).source + '|' +
        interpolate.source + '|' +
        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
        (options.evaluate || reNoMatch).source + '|$'
      , 'g');

      // Use a sourceURL for easier debugging.
      var sourceURL = '//# sourceURL=' +
        ('sourceURL' in options
          ? options.sourceURL
          : ('lodash.templateSources[' + (++templateCounter) + ']')
        ) + '\n';

      string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
        interpolateValue || (interpolateValue = esTemplateValue);

        // Escape characters that can't be included in string literals.
        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);

        // Replace delimiters with snippets.
        if (escapeValue) {
          isEscaping = true;
          source += "' +\n__e(" + escapeValue + ") +\n'";
        }
        if (evaluateValue) {
          isEvaluating = true;
          source += "';\n" + evaluateValue + ";\n__p += '";
        }
        if (interpolateValue) {
          source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
        }
        index = offset + match.length;

        // The JS engine embedded in Adobe products needs `match` returned in
        // order to produce the correct `offset` value.
        return match;
      });

      source += "';\n";

      // If `variable` is not specified wrap a with-statement around the generated
      // code to add the data object to the top of the scope chain.
      var variable = options.variable;
      if (!variable) {
        source = 'with (obj) {\n' + source + '\n}\n';
      }
      // Cleanup code by stripping empty strings.
      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
        .replace(reEmptyStringMiddle, '$1')
        .replace(reEmptyStringTrailing, '$1;');

      // Frame code as the function body.
      source = 'function(' + (variable || 'obj') + ') {\n' +
        (variable
          ? ''
          : 'obj || (obj = {});\n'
        ) +
        "var __t, __p = ''" +
        (isEscaping
           ? ', __e = _.escape'
           : ''
        ) +
        (isEvaluating
          ? ', __j = Array.prototype.join;\n' +
            "function print() { __p += __j.call(arguments, '') }\n"
          : ';\n'
        ) +
        source +
        'return __p\n}';

      var result = attempt(function() {
        return Function(importsKeys, sourceURL + 'return ' + source)
          .apply(undefined, importsValues);
      });

      // Provide the compiled function's source by its `toString` method or
      // the `source` property as a convenience for inlining compiled templates.
      result.source = source;
      if (isError(result)) {
        throw result;
      }
      return result;
    }

    /**
     * Converts `string`, as a whole, to lower case just like
     * [String#toLowerCase](https://mdn.io/toLowerCase).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.toLower('--Foo-Bar--');
     * // => '--foo-bar--'
     *
     * _.toLower('fooBar');
     * // => 'foobar'
     *
     * _.toLower('__FOO_BAR__');
     * // => '__foo_bar__'
     */
    function toLower(value) {
      return toString(value).toLowerCase();
    }

    /**
     * Converts `string`, as a whole, to upper case just like
     * [String#toUpperCase](https://mdn.io/toUpperCase).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.toUpper('--foo-bar--');
     * // => '--FOO-BAR--'
     *
     * _.toUpper('fooBar');
     * // => 'FOOBAR'
     *
     * _.toUpper('__foo_bar__');
     * // => '__FOO_BAR__'
     */
    function toUpper(value) {
      return toString(value).toUpperCase();
    }

    /**
     * Removes leading and trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trim('  abc  ');
     * // => 'abc'
     *
     * _.trim('-_-abc-_-', '_-');
     * // => 'abc'
     *
     * _.map(['  foo  ', '  bar  '], _.trim);
     * // => ['foo', 'bar']
     */
    function trim(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.replace(reTrim, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          chrSymbols = stringToArray(chars),
          start = charsStartIndex(strSymbols, chrSymbols),
          end = charsEndIndex(strSymbols, chrSymbols) + 1;

      return castSlice(strSymbols, start, end).join('');
    }

    /**
     * Removes trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimEnd('  abc  ');
     * // => '  abc'
     *
     * _.trimEnd('-_-abc-_-', '_-');
     * // => '-_-abc'
     */
    function trimEnd(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.replace(reTrimEnd, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;

      return castSlice(strSymbols, 0, end).join('');
    }

    /**
     * Removes leading whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimStart('  abc  ');
     * // => 'abc  '
     *
     * _.trimStart('-_-abc-_-', '_-');
     * // => 'abc-_-'
     */
    function trimStart(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.replace(reTrimStart, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          start = charsStartIndex(strSymbols, stringToArray(chars));

      return castSlice(strSymbols, start).join('');
    }

    /**
     * Truncates `string` if it's longer than the given maximum string length.
     * The last characters of the truncated string are replaced with the omission
     * string which defaults to "...".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to truncate.
     * @param {Object} [options={}] The options object.
     * @param {number} [options.length=30] The maximum string length.
     * @param {string} [options.omission='...'] The string to indicate text is omitted.
     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
     * @returns {string} Returns the truncated string.
     * @example
     *
     * _.truncate('hi-diddly-ho there, neighborino');
     * // => 'hi-diddly-ho there, neighbo...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': ' '
     * });
     * // => 'hi-diddly-ho there,...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': /,? +/
     * });
     * // => 'hi-diddly-ho there...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'omission': ' [...]'
     * });
     * // => 'hi-diddly-ho there, neig [...]'
     */
    function truncate(string, options) {
      var length = DEFAULT_TRUNC_LENGTH,
          omission = DEFAULT_TRUNC_OMISSION;

      if (isObject(options)) {
        var separator = 'separator' in options ? options.separator : separator;
        length = 'length' in options ? toInteger(options.length) : length;
        omission = 'omission' in options ? baseToString(options.omission) : omission;
      }
      string = toString(string);

      var strLength = string.length;
      if (hasUnicode(string)) {
        var strSymbols = stringToArray(string);
        strLength = strSymbols.length;
      }
      if (length >= strLength) {
        return string;
      }
      var end = length - stringSize(omission);
      if (end < 1) {
        return omission;
      }
      var result = strSymbols
        ? castSlice(strSymbols, 0, end).join('')
        : string.slice(0, end);

      if (separator === undefined) {
        return result + omission;
      }
      if (strSymbols) {
        end += (result.length - end);
      }
      if (isRegExp(separator)) {
        if (string.slice(end).search(separator)) {
          var match,
              substring = result;

          if (!separator.global) {
            separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');
          }
          separator.lastIndex = 0;
          while ((match = separator.exec(substring))) {
            var newEnd = match.index;
          }
          result = result.slice(0, newEnd === undefined ? end : newEnd);
        }
      } else if (string.indexOf(baseToString(separator), end) != end) {
        var index = result.lastIndexOf(separator);
        if (index > -1) {
          result = result.slice(0, index);
        }
      }
      return result + omission;
    }

    /**
     * The inverse of `_.escape`; this method converts the HTML entities
     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to
     * their corresponding characters.
     *
     * **Note:** No other HTML entities are unescaped. To unescape additional
     * HTML entities use a third-party library like [_he_](https://mths.be/he).
     *
     * @static
     * @memberOf _
     * @since 0.6.0
     * @category String
     * @param {string} [string=''] The string to unescape.
     * @returns {string} Returns the unescaped string.
     * @example
     *
     * _.unescape('fred, barney, &amp; pebbles');
     * // => 'fred, barney, & pebbles'
     */
    function unescape(string) {
      string = toString(string);
      return (string && reHasEscapedHtml.test(string))
        ? string.replace(reEscapedHtml, unescapeHtmlChar)
        : string;
    }

    /**
     * Converts `string`, as space separated words, to upper case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.upperCase('--foo-bar');
     * // => 'FOO BAR'
     *
     * _.upperCase('fooBar');
     * // => 'FOO BAR'
     *
     * _.upperCase('__foo_bar__');
     * // => 'FOO BAR'
     */
    var upperCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + word.toUpperCase();
    });

    /**
     * Converts the first character of `string` to upper case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.upperFirst('fred');
     * // => 'Fred'
     *
     * _.upperFirst('FRED');
     * // => 'FRED'
     */
    var upperFirst = createCaseFirst('toUpperCase');

    /**
     * Splits `string` into an array of its words.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {RegExp|string} [pattern] The pattern to match words.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the words of `string`.
     * @example
     *
     * _.words('fred, barney, & pebbles');
     * // => ['fred', 'barney', 'pebbles']
     *
     * _.words('fred, barney, & pebbles', /[^, ]+/g);
     * // => ['fred', 'barney', '&', 'pebbles']
     */
    function words(string, pattern, guard) {
      string = toString(string);
      pattern = guard ? undefined : pattern;

      if (pattern === undefined) {
        return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
      }
      return string.match(pattern) || [];
    }

    /*------------------------------------------------------------------------*/

    /**
     * Attempts to invoke `func`, returning either the result or the caught error
     * object. Any additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Function} func The function to attempt.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {*} Returns the `func` result or error object.
     * @example
     *
     * // Avoid throwing errors for invalid selectors.
     * var elements = _.attempt(function(selector) {
     *   return document.querySelectorAll(selector);
     * }, '>_>');
     *
     * if (_.isError(elements)) {
     *   elements = [];
     * }
     */
    var attempt = baseRest(function(func, args) {
      try {
        return apply(func, undefined, args);
      } catch (e) {
        return isError(e) ? e : new Error(e);
      }
    });

    /**
     * Binds methods of an object to the object itself, overwriting the existing
     * method.
     *
     * **Note:** This method doesn't set the "length" property of bound functions.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {Object} object The object to bind and assign the bound methods to.
     * @param {...(string|string[])} methodNames The object method names to bind.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var view = {
     *   'label': 'docs',
     *   'click': function() {
     *     console.log('clicked ' + this.label);
     *   }
     * };
     *
     * _.bindAll(view, ['click']);
     * jQuery(element).on('click', view.click);
     * // => Logs 'clicked docs' when clicked.
     */
    var bindAll = flatRest(function(object, methodNames) {
      arrayEach(methodNames, function(key) {
        key = toKey(key);
        baseAssignValue(object, key, bind(object[key], object));
      });
      return object;
    });

    /**
     * Creates a function that iterates over `pairs` and invokes the corresponding
     * function of the first predicate to return truthy. The predicate-function
     * pairs are invoked with the `this` binding and arguments of the created
     * function.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {Array} pairs The predicate-function pairs.
     * @returns {Function} Returns the new composite function.
     * @example
     *
     * var func = _.cond([
     *   [_.matches({ 'a': 1 }),           _.constant('matches A')],
     *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
     *   [_.stubTrue,                      _.constant('no match')]
     * ]);
     *
     * func({ 'a': 1, 'b': 2 });
     * // => 'matches A'
     *
     * func({ 'a': 0, 'b': 1 });
     * // => 'matches B'
     *
     * func({ 'a': '1', 'b': '2' });
     * // => 'no match'
     */
    function cond(pairs) {
      var length = pairs == null ? 0 : pairs.length,
          toIteratee = getIteratee();

      pairs = !length ? [] : arrayMap(pairs, function(pair) {
        if (typeof pair[1] != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        return [toIteratee(pair[0]), pair[1]];
      });

      return baseRest(function(args) {
        var index = -1;
        while (++index < length) {
          var pair = pairs[index];
          if (apply(pair[0], this, args)) {
            return apply(pair[1], this, args);
          }
        }
      });
    }

    /**
     * Creates a function that invokes the predicate properties of `source` with
     * the corresponding property values of a given object, returning `true` if
     * all predicates return truthy, else `false`.
     *
     * **Note:** The created function is equivalent to `_.conformsTo` with
     * `source` partially applied.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 2, 'b': 1 },
     *   { 'a': 1, 'b': 2 }
     * ];
     *
     * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));
     * // => [{ 'a': 1, 'b': 2 }]
     */
    function conforms(source) {
      return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that returns `value`.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {*} value The value to return from the new function.
     * @returns {Function} Returns the new constant function.
     * @example
     *
     * var objects = _.times(2, _.constant({ 'a': 1 }));
     *
     * console.log(objects);
     * // => [{ 'a': 1 }, { 'a': 1 }]
     *
     * console.log(objects[0] === objects[1]);
     * // => true
     */
    function constant(value) {
      return function() {
        return value;
      };
    }

    /**
     * Checks `value` to determine whether a default value should be returned in
     * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,
     * or `undefined`.
     *
     * @static
     * @memberOf _
     * @since 4.14.0
     * @category Util
     * @param {*} value The value to check.
     * @param {*} defaultValue The default value.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * _.defaultTo(1, 10);
     * // => 1
     *
     * _.defaultTo(undefined, 10);
     * // => 10
     */
    function defaultTo(value, defaultValue) {
      return (value == null || value !== value) ? defaultValue : value;
    }

    /**
     * Creates a function that returns the result of invoking the given functions
     * with the `this` binding of the created function, where each successive
     * invocation is supplied the return value of the previous.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {...(Function|Function[])} [funcs] The functions to invoke.
     * @returns {Function} Returns the new composite function.
     * @see _.flowRight
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flow([_.add, square]);
     * addSquare(1, 2);
     * // => 9
     */
    var flow = createFlow();

    /**
     * This method is like `_.flow` except that it creates a function that
     * invokes the given functions from right to left.
     *
     * @static
     * @since 3.0.0
     * @memberOf _
     * @category Util
     * @param {...(Function|Function[])} [funcs] The functions to invoke.
     * @returns {Function} Returns the new composite function.
     * @see _.flow
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flowRight([square, _.add]);
     * addSquare(1, 2);
     * // => 9
     */
    var flowRight = createFlow(true);

    /**
     * This method returns the first argument it receives.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {*} value Any value.
     * @returns {*} Returns `value`.
     * @example
     *
     * var object = { 'a': 1 };
     *
     * console.log(_.identity(object) === object);
     * // => true
     */
    function identity(value) {
      return value;
    }

    /**
     * Creates a function that invokes `func` with the arguments of the created
     * function. If `func` is a property name, the created function returns the
     * property value for a given element. If `func` is an array or object, the
     * created function returns `true` for elements that contain the equivalent
     * source properties, otherwise it returns `false`.
     *
     * @static
     * @since 4.0.0
     * @memberOf _
     * @category Util
     * @param {*} [func=_.identity] The value to convert to a callback.
     * @returns {Function} Returns the callback.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
     * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, _.iteratee(['user', 'fred']));
     * // => [{ 'user': 'fred', 'age': 40 }]
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, _.iteratee('user'));
     * // => ['barney', 'fred']
     *
     * // Create custom iteratee shorthands.
     * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
     *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
     *     return func.test(string);
     *   };
     * });
     *
     * _.filter(['abc', 'def'], /ef/);
     * // => ['def']
     */
    function iteratee(func) {
      return baseIteratee(typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that performs a partial deep comparison between a given
     * object and `source`, returning `true` if the given object has equivalent
     * property values, else `false`.
     *
     * **Note:** The created function is equivalent to `_.isMatch` with `source`
     * partially applied.
     *
     * Partial comparisons will match empty array and empty object `source`
     * values against any array or object value, respectively. See `_.isEqual`
     * for a list of supported value comparisons.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 1, 'b': 2, 'c': 3 },
     *   { 'a': 4, 'b': 5, 'c': 6 }
     * ];
     *
     * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));
     * // => [{ 'a': 4, 'b': 5, 'c': 6 }]
     */
    function matches(source) {
      return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that performs a partial deep comparison between the
     * value at `path` of a given object to `srcValue`, returning `true` if the
     * object value is equivalent, else `false`.
     *
     * **Note:** Partial comparisons will match empty array and empty object
     * `srcValue` values against any array or object value, respectively. See
     * `_.isEqual` for a list of supported value comparisons.
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 1, 'b': 2, 'c': 3 },
     *   { 'a': 4, 'b': 5, 'c': 6 }
     * ];
     *
     * _.find(objects, _.matchesProperty('a', 4));
     * // => { 'a': 4, 'b': 5, 'c': 6 }
     */
    function matchesProperty(path, srcValue) {
      return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that invokes the method at `path` of a given object.
     * Any additional arguments are provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Util
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new invoker function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': _.constant(2) } },
     *   { 'a': { 'b': _.constant(1) } }
     * ];
     *
     * _.map(objects, _.method('a.b'));
     * // => [2, 1]
     *
     * _.map(objects, _.method(['a', 'b']));
     * // => [2, 1]
     */
    var method = baseRest(function(path, args) {
      return function(object) {
        return baseInvoke(object, path, args);
      };
    });

    /**
     * The opposite of `_.method`; this method creates a function that invokes
     * the method at a given path of `object`. Any additional arguments are
     * provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Util
     * @param {Object} object The object to query.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new invoker function.
     * @example
     *
     * var array = _.times(3, _.constant),
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.methodOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
     * // => [2, 0]
     */
    var methodOf = baseRest(function(object, args) {
      return function(path) {
        return baseInvoke(object, path, args);
      };
    });

    /**
     * Adds all own enumerable string keyed function properties of a source
     * object to the destination object. If `object` is a function, then methods
     * are added to its prototype as well.
     *
     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
     * avoid conflicts caused by modifying the original.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {Function|Object} [object=lodash] The destination object.
     * @param {Object} source The object of functions to add.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.chain=true] Specify whether mixins are chainable.
     * @returns {Function|Object} Returns `object`.
     * @example
     *
     * function vowels(string) {
     *   return _.filter(string, function(v) {
     *     return /[aeiou]/i.test(v);
     *   });
     * }
     *
     * _.mixin({ 'vowels': vowels });
     * _.vowels('fred');
     * // => ['e']
     *
     * _('fred').vowels().value();
     * // => ['e']
     *
     * _.mixin({ 'vowels': vowels }, { 'chain': false });
     * _('fred').vowels();
     * // => ['e']
     */
    function mixin(object, source, options) {
      var props = keys(source),
          methodNames = baseFunctions(source, props);

      if (options == null &&
          !(isObject(source) && (methodNames.length || !props.length))) {
        options = source;
        source = object;
        object = this;
        methodNames = baseFunctions(source, keys(source));
      }
      var chain = !(isObject(options) && 'chain' in options) || !!options.chain,
          isFunc = isFunction(object);

      arrayEach(methodNames, function(methodName) {
        var func = source[methodName];
        object[methodName] = func;
        if (isFunc) {
          object.prototype[methodName] = function() {
            var chainAll = this.__chain__;
            if (chain || chainAll) {
              var result = object(this.__wrapped__),
                  actions = result.__actions__ = copyArray(this.__actions__);

              actions.push({ 'func': func, 'args': arguments, 'thisArg': object });
              result.__chain__ = chainAll;
              return result;
            }
            return func.apply(object, arrayPush([this.value()], arguments));
          };
        }
      });

      return object;
    }

    /**
     * Reverts the `_` variable to its previous value and returns a reference to
     * the `lodash` function.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @returns {Function} Returns the `lodash` function.
     * @example
     *
     * var lodash = _.noConflict();
     */
    function noConflict() {
      if (root._ === this) {
        root._ = oldDash;
      }
      return this;
    }

    /**
     * This method returns `undefined`.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Util
     * @example
     *
     * _.times(2, _.noop);
     * // => [undefined, undefined]
     */
    function noop() {
      // No operation performed.
    }

    /**
     * Creates a function that gets the argument at index `n`. If `n` is negative,
     * the nth argument from the end is returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {number} [n=0] The index of the argument to return.
     * @returns {Function} Returns the new pass-thru function.
     * @example
     *
     * var func = _.nthArg(1);
     * func('a', 'b', 'c', 'd');
     * // => 'b'
     *
     * var func = _.nthArg(-2);
     * func('a', 'b', 'c', 'd');
     * // => 'c'
     */
    function nthArg(n) {
      n = toInteger(n);
      return baseRest(function(args) {
        return baseNth(args, n);
      });
    }

    /**
     * Creates a function that invokes `iteratees` with the arguments it receives
     * and returns their results.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [iteratees=[_.identity]]
     *  The iteratees to invoke.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.over([Math.max, Math.min]);
     *
     * func(1, 2, 3, 4);
     * // => [4, 1]
     */
    var over = createOver(arrayMap);

    /**
     * Creates a function that checks if **all** of the `predicates` return
     * truthy when invoked with the arguments it receives.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [predicates=[_.identity]]
     *  The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overEvery([Boolean, isFinite]);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => false
     *
     * func(NaN);
     * // => false
     */
    var overEvery = createOver(arrayEvery);

    /**
     * Creates a function that checks if **any** of the `predicates` return
     * truthy when invoked with the arguments it receives.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [predicates=[_.identity]]
     *  The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overSome([Boolean, isFinite]);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => true
     *
     * func(NaN);
     * // => false
     */
    var overSome = createOver(arraySome);

    /**
     * Creates a function that returns the value at `path` of a given object.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': 2 } },
     *   { 'a': { 'b': 1 } }
     * ];
     *
     * _.map(objects, _.property('a.b'));
     * // => [2, 1]
     *
     * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
     * // => [1, 2]
     */
    function property(path) {
      return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
    }

    /**
     * The opposite of `_.property`; this method creates a function that returns
     * the value at a given path of `object`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Object} object The object to query.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var array = [0, 1, 2],
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
     * // => [2, 0]
     */
    function propertyOf(object) {
      return function(path) {
        return object == null ? undefined : baseGet(object, path);
      };
    }

    /**
     * Creates an array of numbers (positive and/or negative) progressing from
     * `start` up to, but not including, `end`. A step of `-1` is used if a negative
     * `start` is specified without an `end` or `step`. If `end` is not specified,
     * it's set to `start` with `start` then set to `0`.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.rangeRight
     * @example
     *
     * _.range(4);
     * // => [0, 1, 2, 3]
     *
     * _.range(-4);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 5);
     * // => [1, 2, 3, 4]
     *
     * _.range(0, 20, 5);
     * // => [0, 5, 10, 15]
     *
     * _.range(0, -4, -1);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.range(0);
     * // => []
     */
    var range = createRange();

    /**
     * This method is like `_.range` except that it populates values in
     * descending order.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.range
     * @example
     *
     * _.rangeRight(4);
     * // => [3, 2, 1, 0]
     *
     * _.rangeRight(-4);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 5);
     * // => [4, 3, 2, 1]
     *
     * _.rangeRight(0, 20, 5);
     * // => [15, 10, 5, 0]
     *
     * _.rangeRight(0, -4, -1);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.rangeRight(0);
     * // => []
     */
    var rangeRight = createRange(true);

    /**
     * This method returns a new empty array.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Array} Returns the new empty array.
     * @example
     *
     * var arrays = _.times(2, _.stubArray);
     *
     * console.log(arrays);
     * // => [[], []]
     *
     * console.log(arrays[0] === arrays[1]);
     * // => false
     */
    function stubArray() {
      return [];
    }

    /**
     * This method returns `false`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `false`.
     * @example
     *
     * _.times(2, _.stubFalse);
     * // => [false, false]
     */
    function stubFalse() {
      return false;
    }

    /**
     * This method returns a new empty object.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Object} Returns the new empty object.
     * @example
     *
     * var objects = _.times(2, _.stubObject);
     *
     * console.log(objects);
     * // => [{}, {}]
     *
     * console.log(objects[0] === objects[1]);
     * // => false
     */
    function stubObject() {
      return {};
    }

    /**
     * This method returns an empty string.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {string} Returns the empty string.
     * @example
     *
     * _.times(2, _.stubString);
     * // => ['', '']
     */
    function stubString() {
      return '';
    }

    /**
     * This method returns `true`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `true`.
     * @example
     *
     * _.times(2, _.stubTrue);
     * // => [true, true]
     */
    function stubTrue() {
      return true;
    }

    /**
     * Invokes the iteratee `n` times, returning an array of the results of
     * each invocation. The iteratee is invoked with one argument; (index).
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} n The number of times to invoke `iteratee`.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.times(3, String);
     * // => ['0', '1', '2']
     *
     *  _.times(4, _.constant(0));
     * // => [0, 0, 0, 0]
     */
    function times(n, iteratee) {
      n = toInteger(n);
      if (n < 1 || n > MAX_SAFE_INTEGER) {
        return [];
      }
      var index = MAX_ARRAY_LENGTH,
          length = nativeMin(n, MAX_ARRAY_LENGTH);

      iteratee = getIteratee(iteratee);
      n -= MAX_ARRAY_LENGTH;

      var result = baseTimes(length, iteratee);
      while (++index < n) {
        iteratee(index);
      }
      return result;
    }

    /**
     * Converts `value` to a property path array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {*} value The value to convert.
     * @returns {Array} Returns the new property path array.
     * @example
     *
     * _.toPath('a.b.c');
     * // => ['a', 'b', 'c']
     *
     * _.toPath('a[0].b.c');
     * // => ['a', '0', 'b', 'c']
     */
    function toPath(value) {
      if (isArray(value)) {
        return arrayMap(value, toKey);
      }
      return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
    }

    /**
     * Generates a unique ID. If `prefix` is given, the ID is appended to it.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {string} [prefix=''] The value to prefix the ID with.
     * @returns {string} Returns the unique ID.
     * @example
     *
     * _.uniqueId('contact_');
     * // => 'contact_104'
     *
     * _.uniqueId();
     * // => '105'
     */
    function uniqueId(prefix) {
      var id = ++idCounter;
      return toString(prefix) + id;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Adds two numbers.
     *
     * @static
     * @memberOf _
     * @since 3.4.0
     * @category Math
     * @param {number} augend The first number in an addition.
     * @param {number} addend The second number in an addition.
     * @returns {number} Returns the total.
     * @example
     *
     * _.add(6, 4);
     * // => 10
     */
    var add = createMathOperation(function(augend, addend) {
      return augend + addend;
    }, 0);

    /**
     * Computes `number` rounded up to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round up.
     * @param {number} [precision=0] The precision to round up to.
     * @returns {number} Returns the rounded up number.
     * @example
     *
     * _.ceil(4.006);
     * // => 5
     *
     * _.ceil(6.004, 2);
     * // => 6.01
     *
     * _.ceil(6040, -2);
     * // => 6100
     */
    var ceil = createRound('ceil');

    /**
     * Divide two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {number} dividend The first number in a division.
     * @param {number} divisor The second number in a division.
     * @returns {number} Returns the quotient.
     * @example
     *
     * _.divide(6, 4);
     * // => 1.5
     */
    var divide = createMathOperation(function(dividend, divisor) {
      return dividend / divisor;
    }, 1);

    /**
     * Computes `number` rounded down to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round down.
     * @param {number} [precision=0] The precision to round down to.
     * @returns {number} Returns the rounded down number.
     * @example
     *
     * _.floor(4.006);
     * // => 4
     *
     * _.floor(0.046, 2);
     * // => 0.04
     *
     * _.floor(4060, -2);
     * // => 4000
     */
    var floor = createRound('floor');

    /**
     * Computes the maximum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * _.max([4, 2, 8, 6]);
     * // => 8
     *
     * _.max([]);
     * // => undefined
     */
    function max(array) {
      return (array && array.length)
        ? baseExtremum(array, identity, baseGt)
        : undefined;
    }

    /**
     * This method is like `_.max` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.maxBy(objects, function(o) { return o.n; });
     * // => { 'n': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.maxBy(objects, 'n');
     * // => { 'n': 2 }
     */
    function maxBy(array, iteratee) {
      return (array && array.length)
        ? baseExtremum(array, getIteratee(iteratee, 2), baseGt)
        : undefined;
    }

    /**
     * Computes the mean of the values in `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the mean.
     * @example
     *
     * _.mean([4, 2, 8, 6]);
     * // => 5
     */
    function mean(array) {
      return baseMean(array, identity);
    }

    /**
     * This method is like `_.mean` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be averaged.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the mean.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.meanBy(objects, function(o) { return o.n; });
     * // => 5
     *
     * // The `_.property` iteratee shorthand.
     * _.meanBy(objects, 'n');
     * // => 5
     */
    function meanBy(array, iteratee) {
      return baseMean(array, getIteratee(iteratee, 2));
    }

    /**
     * Computes the minimum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * _.min([4, 2, 8, 6]);
     * // => 2
     *
     * _.min([]);
     * // => undefined
     */
    function min(array) {
      return (array && array.length)
        ? baseExtremum(array, identity, baseLt)
        : undefined;
    }

    /**
     * This method is like `_.min` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.minBy(objects, function(o) { return o.n; });
     * // => { 'n': 1 }
     *
     * // The `_.property` iteratee shorthand.
     * _.minBy(objects, 'n');
     * // => { 'n': 1 }
     */
    function minBy(array, iteratee) {
      return (array && array.length)
        ? baseExtremum(array, getIteratee(iteratee, 2), baseLt)
        : undefined;
    }

    /**
     * Multiply two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {number} multiplier The first number in a multiplication.
     * @param {number} multiplicand The second number in a multiplication.
     * @returns {number} Returns the product.
     * @example
     *
     * _.multiply(6, 4);
     * // => 24
     */
    var multiply = createMathOperation(function(multiplier, multiplicand) {
      return multiplier * multiplicand;
    }, 1);

    /**
     * Computes `number` rounded to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round.
     * @param {number} [precision=0] The precision to round to.
     * @returns {number} Returns the rounded number.
     * @example
     *
     * _.round(4.006);
     * // => 4
     *
     * _.round(4.006, 2);
     * // => 4.01
     *
     * _.round(4060, -2);
     * // => 4100
     */
    var round = createRound('round');

    /**
     * Subtract two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {number} minuend The first number in a subtraction.
     * @param {number} subtrahend The second number in a subtraction.
     * @returns {number} Returns the difference.
     * @example
     *
     * _.subtract(6, 4);
     * // => 2
     */
    var subtract = createMathOperation(function(minuend, subtrahend) {
      return minuend - subtrahend;
    }, 0);

    /**
     * Computes the sum of the values in `array`.
     *
     * @static
     * @memberOf _
     * @since 3.4.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the sum.
     * @example
     *
     * _.sum([4, 2, 8, 6]);
     * // => 20
     */
    function sum(array) {
      return (array && array.length)
        ? baseSum(array, identity)
        : 0;
    }

    /**
     * This method is like `_.sum` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be summed.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the sum.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.sumBy(objects, function(o) { return o.n; });
     * // => 20
     *
     * // The `_.property` iteratee shorthand.
     * _.sumBy(objects, 'n');
     * // => 20
     */
    function sumBy(array, iteratee) {
      return (array && array.length)
        ? baseSum(array, getIteratee(iteratee, 2))
        : 0;
    }

    /*------------------------------------------------------------------------*/

    // Add methods that return wrapped values in chain sequences.
    lodash.after = after;
    lodash.ary = ary;
    lodash.assign = assign;
    lodash.assignIn = assignIn;
    lodash.assignInWith = assignInWith;
    lodash.assignWith = assignWith;
    lodash.at = at;
    lodash.before = before;
    lodash.bind = bind;
    lodash.bindAll = bindAll;
    lodash.bindKey = bindKey;
    lodash.castArray = castArray;
    lodash.chain = chain;
    lodash.chunk = chunk;
    lodash.compact = compact;
    lodash.concat = concat;
    lodash.cond = cond;
    lodash.conforms = conforms;
    lodash.constant = constant;
    lodash.countBy = countBy;
    lodash.create = create;
    lodash.curry = curry;
    lodash.curryRight = curryRight;
    lodash.debounce = debounce;
    lodash.defaults = defaults;
    lodash.defaultsDeep = defaultsDeep;
    lodash.defer = defer;
    lodash.delay = delay;
    lodash.difference = difference;
    lodash.differenceBy = differenceBy;
    lodash.differenceWith = differenceWith;
    lodash.drop = drop;
    lodash.dropRight = dropRight;
    lodash.dropRightWhile = dropRightWhile;
    lodash.dropWhile = dropWhile;
    lodash.fill = fill;
    lodash.filter = filter;
    lodash.flatMap = flatMap;
    lodash.flatMapDeep = flatMapDeep;
    lodash.flatMapDepth = flatMapDepth;
    lodash.flatten = flatten;
    lodash.flattenDeep = flattenDeep;
    lodash.flattenDepth = flattenDepth;
    lodash.flip = flip;
    lodash.flow = flow;
    lodash.flowRight = flowRight;
    lodash.fromPairs = fromPairs;
    lodash.functions = functions;
    lodash.functionsIn = functionsIn;
    lodash.groupBy = groupBy;
    lodash.initial = initial;
    lodash.intersection = intersection;
    lodash.intersectionBy = intersectionBy;
    lodash.intersectionWith = intersectionWith;
    lodash.invert = invert;
    lodash.invertBy = invertBy;
    lodash.invokeMap = invokeMap;
    lodash.iteratee = iteratee;
    lodash.keyBy = keyBy;
    lodash.keys = keys;
    lodash.keysIn = keysIn;
    lodash.map = map;
    lodash.mapKeys = mapKeys;
    lodash.mapValues = mapValues;
    lodash.matches = matches;
    lodash.matchesProperty = matchesProperty;
    lodash.memoize = memoize;
    lodash.merge = merge;
    lodash.mergeWith = mergeWith;
    lodash.method = method;
    lodash.methodOf = methodOf;
    lodash.mixin = mixin;
    lodash.negate = negate;
    lodash.nthArg = nthArg;
    lodash.omit = omit;
    lodash.omitBy = omitBy;
    lodash.once = once;
    lodash.orderBy = orderBy;
    lodash.over = over;
    lodash.overArgs = overArgs;
    lodash.overEvery = overEvery;
    lodash.overSome = overSome;
    lodash.partial = partial;
    lodash.partialRight = partialRight;
    lodash.partition = partition;
    lodash.pick = pick;
    lodash.pickBy = pickBy;
    lodash.property = property;
    lodash.propertyOf = propertyOf;
    lodash.pull = pull;
    lodash.pullAll = pullAll;
    lodash.pullAllBy = pullAllBy;
    lodash.pullAllWith = pullAllWith;
    lodash.pullAt = pullAt;
    lodash.range = range;
    lodash.rangeRight = rangeRight;
    lodash.rearg = rearg;
    lodash.reject = reject;
    lodash.remove = remove;
    lodash.rest = rest;
    lodash.reverse = reverse;
    lodash.sampleSize = sampleSize;
    lodash.set = set;
    lodash.setWith = setWith;
    lodash.shuffle = shuffle;
    lodash.slice = slice;
    lodash.sortBy = sortBy;
    lodash.sortedUniq = sortedUniq;
    lodash.sortedUniqBy = sortedUniqBy;
    lodash.split = split;
    lodash.spread = spread;
    lodash.tail = tail;
    lodash.take = take;
    lodash.takeRight = takeRight;
    lodash.takeRightWhile = takeRightWhile;
    lodash.takeWhile = takeWhile;
    lodash.tap = tap;
    lodash.throttle = throttle;
    lodash.thru = thru;
    lodash.toArray = toArray;
    lodash.toPairs = toPairs;
    lodash.toPairsIn = toPairsIn;
    lodash.toPath = toPath;
    lodash.toPlainObject = toPlainObject;
    lodash.transform = transform;
    lodash.unary = unary;
    lodash.union = union;
    lodash.unionBy = unionBy;
    lodash.unionWith = unionWith;
    lodash.uniq = uniq;
    lodash.uniqBy = uniqBy;
    lodash.uniqWith = uniqWith;
    lodash.unset = unset;
    lodash.unzip = unzip;
    lodash.unzipWith = unzipWith;
    lodash.update = update;
    lodash.updateWith = updateWith;
    lodash.values = values;
    lodash.valuesIn = valuesIn;
    lodash.without = without;
    lodash.words = words;
    lodash.wrap = wrap;
    lodash.xor = xor;
    lodash.xorBy = xorBy;
    lodash.xorWith = xorWith;
    lodash.zip = zip;
    lodash.zipObject = zipObject;
    lodash.zipObjectDeep = zipObjectDeep;
    lodash.zipWith = zipWith;

    // Add aliases.
    lodash.entries = toPairs;
    lodash.entriesIn = toPairsIn;
    lodash.extend = assignIn;
    lodash.extendWith = assignInWith;

    // Add methods to `lodash.prototype`.
    mixin(lodash, lodash);

    /*------------------------------------------------------------------------*/

    // Add methods that return unwrapped values in chain sequences.
    lodash.add = add;
    lodash.attempt = attempt;
    lodash.camelCase = camelCase;
    lodash.capitalize = capitalize;
    lodash.ceil = ceil;
    lodash.clamp = clamp;
    lodash.clone = clone;
    lodash.cloneDeep = cloneDeep;
    lodash.cloneDeepWith = cloneDeepWith;
    lodash.cloneWith = cloneWith;
    lodash.conformsTo = conformsTo;
    lodash.deburr = deburr;
    lodash.defaultTo = defaultTo;
    lodash.divide = divide;
    lodash.endsWith = endsWith;
    lodash.eq = eq;
    lodash.escape = escape;
    lodash.escapeRegExp = escapeRegExp;
    lodash.every = every;
    lodash.find = find;
    lodash.findIndex = findIndex;
    lodash.findKey = findKey;
    lodash.findLast = findLast;
    lodash.findLastIndex = findLastIndex;
    lodash.findLastKey = findLastKey;
    lodash.floor = floor;
    lodash.forEach = forEach;
    lodash.forEachRight = forEachRight;
    lodash.forIn = forIn;
    lodash.forInRight = forInRight;
    lodash.forOwn = forOwn;
    lodash.forOwnRight = forOwnRight;
    lodash.get = get;
    lodash.gt = gt;
    lodash.gte = gte;
    lodash.has = has;
    lodash.hasIn = hasIn;
    lodash.head = head;
    lodash.identity = identity;
    lodash.includes = includes;
    lodash.indexOf = indexOf;
    lodash.inRange = inRange;
    lodash.invoke = invoke;
    lodash.isArguments = isArguments;
    lodash.isArray = isArray;
    lodash.isArrayBuffer = isArrayBuffer;
    lodash.isArrayLike = isArrayLike;
    lodash.isArrayLikeObject = isArrayLikeObject;
    lodash.isBoolean = isBoolean;
    lodash.isBuffer = isBuffer;
    lodash.isDate = isDate;
    lodash.isElement = isElement;
    lodash.isEmpty = isEmpty;
    lodash.isEqual = isEqual;
    lodash.isEqualWith = isEqualWith;
    lodash.isError = isError;
    lodash.isFinite = isFinite;
    lodash.isFunction = isFunction;
    lodash.isInteger = isInteger;
    lodash.isLength = isLength;
    lodash.isMap = isMap;
    lodash.isMatch = isMatch;
    lodash.isMatchWith = isMatchWith;
    lodash.isNaN = isNaN;
    lodash.isNative = isNative;
    lodash.isNil = isNil;
    lodash.isNull = isNull;
    lodash.isNumber = isNumber;
    lodash.isObject = isObject;
    lodash.isObjectLike = isObjectLike;
    lodash.isPlainObject = isPlainObject;
    lodash.isRegExp = isRegExp;
    lodash.isSafeInteger = isSafeInteger;
    lodash.isSet = isSet;
    lodash.isString = isString;
    lodash.isSymbol = isSymbol;
    lodash.isTypedArray = isTypedArray;
    lodash.isUndefined = isUndefined;
    lodash.isWeakMap = isWeakMap;
    lodash.isWeakSet = isWeakSet;
    lodash.join = join;
    lodash.kebabCase = kebabCase;
    lodash.last = last;
    lodash.lastIndexOf = lastIndexOf;
    lodash.lowerCase = lowerCase;
    lodash.lowerFirst = lowerFirst;
    lodash.lt = lt;
    lodash.lte = lte;
    lodash.max = max;
    lodash.maxBy = maxBy;
    lodash.mean = mean;
    lodash.meanBy = meanBy;
    lodash.min = min;
    lodash.minBy = minBy;
    lodash.stubArray = stubArray;
    lodash.stubFalse = stubFalse;
    lodash.stubObject = stubObject;
    lodash.stubString = stubString;
    lodash.stubTrue = stubTrue;
    lodash.multiply = multiply;
    lodash.nth = nth;
    lodash.noConflict = noConflict;
    lodash.noop = noop;
    lodash.now = now;
    lodash.pad = pad;
    lodash.padEnd = padEnd;
    lodash.padStart = padStart;
    lodash.parseInt = parseInt;
    lodash.random = random;
    lodash.reduce = reduce;
    lodash.reduceRight = reduceRight;
    lodash.repeat = repeat;
    lodash.replace = replace;
    lodash.result = result;
    lodash.round = round;
    lodash.runInContext = runInContext;
    lodash.sample = sample;
    lodash.size = size;
    lodash.snakeCase = snakeCase;
    lodash.some = some;
    lodash.sortedIndex = sortedIndex;
    lodash.sortedIndexBy = sortedIndexBy;
    lodash.sortedIndexOf = sortedIndexOf;
    lodash.sortedLastIndex = sortedLastIndex;
    lodash.sortedLastIndexBy = sortedLastIndexBy;
    lodash.sortedLastIndexOf = sortedLastIndexOf;
    lodash.startCase = startCase;
    lodash.startsWith = startsWith;
    lodash.subtract = subtract;
    lodash.sum = sum;
    lodash.sumBy = sumBy;
    lodash.template = template;
    lodash.times = times;
    lodash.toFinite = toFinite;
    lodash.toInteger = toInteger;
    lodash.toLength = toLength;
    lodash.toLower = toLower;
    lodash.toNumber = toNumber;
    lodash.toSafeInteger = toSafeInteger;
    lodash.toString = toString;
    lodash.toUpper = toUpper;
    lodash.trim = trim;
    lodash.trimEnd = trimEnd;
    lodash.trimStart = trimStart;
    lodash.truncate = truncate;
    lodash.unescape = unescape;
    lodash.uniqueId = uniqueId;
    lodash.upperCase = upperCase;
    lodash.upperFirst = upperFirst;

    // Add aliases.
    lodash.each = forEach;
    lodash.eachRight = forEachRight;
    lodash.first = head;

    mixin(lodash, (function() {
      var source = {};
      baseForOwn(lodash, function(func, methodName) {
        if (!hasOwnProperty.call(lodash.prototype, methodName)) {
          source[methodName] = func;
        }
      });
      return source;
    }()), { 'chain': false });

    /*------------------------------------------------------------------------*/

    /**
     * The semantic version number.
     *
     * @static
     * @memberOf _
     * @type {string}
     */
    lodash.VERSION = VERSION;

    // Assign default placeholders.
    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {
      lodash[methodName].placeholder = lodash;
    });

    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
    arrayEach(['drop', 'take'], function(methodName, index) {
      LazyWrapper.prototype[methodName] = function(n) {
        n = n === undefined ? 1 : nativeMax(toInteger(n), 0);

        var result = (this.__filtered__ && !index)
          ? new LazyWrapper(this)
          : this.clone();

        if (result.__filtered__) {
          result.__takeCount__ = nativeMin(n, result.__takeCount__);
        } else {
          result.__views__.push({
            'size': nativeMin(n, MAX_ARRAY_LENGTH),
            'type': methodName + (result.__dir__ < 0 ? 'Right' : '')
          });
        }
        return result;
      };

      LazyWrapper.prototype[methodName + 'Right'] = function(n) {
        return this.reverse()[methodName](n).reverse();
      };
    });

    // Add `LazyWrapper` methods that accept an `iteratee` value.
    arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {
      var type = index + 1,
          isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;

      LazyWrapper.prototype[methodName] = function(iteratee) {
        var result = this.clone();
        result.__iteratees__.push({
          'iteratee': getIteratee(iteratee, 3),
          'type': type
        });
        result.__filtered__ = result.__filtered__ || isFilter;
        return result;
      };
    });

    // Add `LazyWrapper` methods for `_.head` and `_.last`.
    arrayEach(['head', 'last'], function(methodName, index) {
      var takeName = 'take' + (index ? 'Right' : '');

      LazyWrapper.prototype[methodName] = function() {
        return this[takeName](1).value()[0];
      };
    });

    // Add `LazyWrapper` methods for `_.initial` and `_.tail`.
    arrayEach(['initial', 'tail'], function(methodName, index) {
      var dropName = 'drop' + (index ? '' : 'Right');

      LazyWrapper.prototype[methodName] = function() {
        return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
      };
    });

    LazyWrapper.prototype.compact = function() {
      return this.filter(identity);
    };

    LazyWrapper.prototype.find = function(predicate) {
      return this.filter(predicate).head();
    };

    LazyWrapper.prototype.findLast = function(predicate) {
      return this.reverse().find(predicate);
    };

    LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {
      if (typeof path == 'function') {
        return new LazyWrapper(this);
      }
      return this.map(function(value) {
        return baseInvoke(value, path, args);
      });
    });

    LazyWrapper.prototype.reject = function(predicate) {
      return this.filter(negate(getIteratee(predicate)));
    };

    LazyWrapper.prototype.slice = function(start, end) {
      start = toInteger(start);

      var result = this;
      if (result.__filtered__ && (start > 0 || end < 0)) {
        return new LazyWrapper(result);
      }
      if (start < 0) {
        result = result.takeRight(-start);
      } else if (start) {
        result = result.drop(start);
      }
      if (end !== undefined) {
        end = toInteger(end);
        result = end < 0 ? result.dropRight(-end) : result.take(end - start);
      }
      return result;
    };

    LazyWrapper.prototype.takeRightWhile = function(predicate) {
      return this.reverse().takeWhile(predicate).reverse();
    };

    LazyWrapper.prototype.toArray = function() {
      return this.take(MAX_ARRAY_LENGTH);
    };

    // Add `LazyWrapper` methods to `lodash.prototype`.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),
          isTaker = /^(?:head|last)$/.test(methodName),
          lodashFunc = lodash[isTaker ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName],
          retUnwrapped = isTaker || /^find/.test(methodName);

      if (!lodashFunc) {
        return;
      }
      lodash.prototype[methodName] = function() {
        var value = this.__wrapped__,
            args = isTaker ? [1] : arguments,
            isLazy = value instanceof LazyWrapper,
            iteratee = args[0],
            useLazy = isLazy || isArray(value);

        var interceptor = function(value) {
          var result = lodashFunc.apply(lodash, arrayPush([value], args));
          return (isTaker && chainAll) ? result[0] : result;
        };

        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
          // Avoid lazy use if the iteratee has a "length" value other than `1`.
          isLazy = useLazy = false;
        }
        var chainAll = this.__chain__,
            isHybrid = !!this.__actions__.length,
            isUnwrapped = retUnwrapped && !chainAll,
            onlyLazy = isLazy && !isHybrid;

        if (!retUnwrapped && useLazy) {
          value = onlyLazy ? value : new LazyWrapper(this);
          var result = func.apply(value, args);
          result.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });
          return new LodashWrapper(result, chainAll);
        }
        if (isUnwrapped && onlyLazy) {
          return func.apply(this, args);
        }
        result = this.thru(interceptor);
        return isUnwrapped ? (isTaker ? result.value()[0] : result.value()) : result;
      };
    });

    // Add `Array` methods to `lodash.prototype`.
    arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function(methodName) {
      var func = arrayProto[methodName],
          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
          retUnwrapped = /^(?:pop|shift)$/.test(methodName);

      lodash.prototype[methodName] = function() {
        var args = arguments;
        if (retUnwrapped && !this.__chain__) {
          var value = this.value();
          return func.apply(isArray(value) ? value : [], args);
        }
        return this[chainName](function(value) {
          return func.apply(isArray(value) ? value : [], args);
        });
      };
    });

    // Map minified method names to their real names.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var lodashFunc = lodash[methodName];
      if (lodashFunc) {
        var key = (lodashFunc.name + ''),
            names = realNames[key] || (realNames[key] = []);

        names.push({ 'name': methodName, 'func': lodashFunc });
      }
    });

    realNames[createHybrid(undefined, WRAP_BIND_KEY_FLAG).name] = [{
      'name': 'wrapper',
      'func': undefined
    }];

    // Add methods to `LazyWrapper`.
    LazyWrapper.prototype.clone = lazyClone;
    LazyWrapper.prototype.reverse = lazyReverse;
    LazyWrapper.prototype.value = lazyValue;

    // Add chain sequence methods to the `lodash` wrapper.
    lodash.prototype.at = wrapperAt;
    lodash.prototype.chain = wrapperChain;
    lodash.prototype.commit = wrapperCommit;
    lodash.prototype.next = wrapperNext;
    lodash.prototype.plant = wrapperPlant;
    lodash.prototype.reverse = wrapperReverse;
    lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;

    // Add lazy aliases.
    lodash.prototype.first = lodash.prototype.head;

    if (symIterator) {
      lodash.prototype[symIterator] = wrapperToIterator;
    }
    return lodash;
  });

  /*--------------------------------------------------------------------------*/

  // Export lodash.
  var _ = runInContext();

  // Some AMD build optimizers, like r.js, check for condition patterns like:
  if (typeof undefined == 'function' && typeof undefined.amd == 'object' && undefined.amd) {
    // Expose Lodash on the global object to prevent errors when Lodash is
    // loaded by a script tag in the presence of an AMD loader.
    // See http://requirejs.org/docs/errors.html#mismatch for more details.
    // Use `_.noConflict` to remove Lodash from the global object.
    root._ = _;

    // Define as an anonymous module so, through path mapping, it can be
    // referenced as the "underscore" module.
    
  }
  // Check for `exports` after `define` in case a build optimizer adds it.
  else if (freeModule) {
    // Export for Node.js.
    (freeModule.exports = _)._ = _;
    // Export for CommonJS support.
    freeExports._ = _;
  }
  else {
    // Export to the global object.
    root._ = _;
  }
}.call(commonjsGlobal));
});

var _class$2;
var _class2$1;
var _temp$2;

function _applyDecoratedDescriptor$1(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
        desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
        desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
        return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
        desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
        desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
        Object['define' + 'Property'](target, property, desc);
        desc = null;
    }

    return desc;
}

// import VASTIntegrator from '../ads/vast';
var DEFAULT$1 = playercore.playerconfig.DEFAULT;

var vastClient = new VASTClient({ WRAPPER_LIMIT: 10 });

var AD_STATES = {
    INIT: 'INIT',
    PENDING: 'PENDING',
    WATING: 'WATING',
    DISPOSE: 'DISPOSE'
};

var VastPlugin = (_class$2 = (_temp$2 = _class2$1 = function (_VCPlayerObject) {
    inherits(VastPlugin, _VCPlayerObject);

    function VastPlugin(props) {
        classCallCheck(this, VastPlugin);

        var _this = possibleConstructorReturn(this, (VastPlugin.__proto__ || Object.getPrototypeOf(VastPlugin)).call(this, props));

        _this.state = {
            adState: AD_STATES.INIT,
            adIntegrator: null,
            paused: false,
            restorePlayer: null
        };
        var player = _this.props.player;

        player.vastAd = _this;
        _this.firstAd = false;

        // override play/pause;
        // this._prepareForAd();
        // setup restore play content when ad ended
        // this._setUpRestorePlayer();
        _this._initAd();
        return _this;
    }

    /**
     * Vị trí chạy ad
     */

    /**
     * Định nghĩa kiểu của props
     * @type {Object}
     */


    createClass(VastPlugin, [{
        key: 'adPosition',
        value: function adPosition() {
            var type = this.props.type;

            return type;
        }
    }, {
        key: 'skipAd',
        value: function skipAd() {
            var adIntegrator = this.state.adIntegrator;


            if (!adIntegrator) {
                return;
            }

            adIntegrator.skipAd();
        }
    }, {
        key: 'clickThrough',
        value: function clickThrough() {
            var adIntegrator = this.state.adIntegrator;


            if (!adIntegrator) {
                return;
            }

            adIntegrator.clickThrough();
        }
    }, {
        key: 'getAdVolume',
        value: function getAdVolume() {
            var adIntegrator = this.state.adIntegrator;


            if (!adIntegrator) {
                return;
            }

            return adIntegrator.getAdVolume();
        }
    }, {
        key: 'getAdExpanded',
        value: function getAdExpanded() {
            var adIntegrator = this.state.adIntegrator;


            if (!adIntegrator) {
                return;
            }

            return adIntegrator.getAdExpanded();
        }
    }, {
        key: 'setAdVolume',
        value: function setAdVolume(volume) {
            var adIntegrator = this.state.adIntegrator;


            if (!adIntegrator) {
                return;
            }

            adIntegrator.setAdVolume(volume);
        }
    }, {
        key: 'adUnit',
        value: function adUnit() {
            var adIntegrator = this.state.adIntegrator;


            if (!adIntegrator) {
                return;
            }

            return adIntegrator;
        }
    }, {
        key: 'paused',
        value: function paused() {
            return this.state.paused;
        }
    }, {
        key: 'getPlayerAdUnit',
        value: function getPlayerAdUnit() {
            var adIntegrator = this.state.adIntegrator;

            return adIntegrator.getPlayerAdUnit();
        }
    }, {
        key: 'isPaused',
        value: function isPaused() {
            var adIntegrator = this.state.adIntegrator;

            return adIntegrator.isPaused();
        }
    }, {
        key: 'vastResponse',
        value: function vastResponse() {
            var vastResponse = this.state.vastResponse;

            return vastResponse;
        }
    }, {
        key: '_initAd',
        value: function _initAd() {
            var self = this;
            var player = this.props.player;

            // player.trigger(DEFAULT.EVENT.AD_START, this);

            player.on(DEFAULT$1.EVENT.USER_SKIP_AD, this.skipAd);

            Promise.resolve().then(function () {
                return self._setAdCancelTimeout();
            }).then(function () {
                return self._getVastResponse();
            }).then(function (vastResponse) {
                return self.playAd(vastResponse);
            }).then(function () {
                var _self$state = self.state,
                    restorePlayer = _self$state.restorePlayer,
                    adIntegrator = _self$state.adIntegrator;

                playercore.log.trace('VastPlugin > ad end');
                restorePlayer.snapshot().muted = adIntegrator.getPlayerAdUnit().muted();
                restorePlayer.snapshot().volume = adIntegrator.getPlayerAdUnit().volume();
                player.trigger(DEFAULT$1.EVENT.AD_END);
            }).catch(function (e) {
                playercore.log.trace('VastPlugin > end with error:', e);
                player.trigger(DEFAULT$1.EVENT.AD_END);
            });
        }
    }, {
        key: 'prepareForPlayAd',
        value: function prepareForPlayAd() {
            this._prepareForAd();
            this._setUpRestorePlayer();
        }
    }, {
        key: '_prepareForAd',
        value: function _prepareForAd() {
            var self = this;
            var _props = this.props,
                player = _props.player,
                preLoaded = _props.preLoaded;

            var origPlay = this.origPlay = player.play;
            var origPause = this.origPlay = player.pause;
            player.play = function (isOri) {
                var adIntegrator = self.state.adIntegrator;


                if (isOri) {
                    origPlay.apply(this, arguments);
                    return;
                }

                if (!adIntegrator) {
                    return;
                }

                self.setState({
                    paused: false
                });

                adIntegrator.resumeAd();
            };

            player.pause = function (isOri) {
                var adIntegrator = self.state.adIntegrator;


                if (isOri) {
                    origPause.apply(this, arguments);
                    return;
                }

                if (!adIntegrator) {
                    return;
                }

                self.setState({
                    paused: true
                });

                adIntegrator.pauseAd();
            };

            var oriCurrentTime = this.oriCurrentTime = player.currentTime;
            var oriDuration = this.oriDuration = player.duration;
            var oriMuted = this.oriMuted = player.muted;
            if (!playercore.agent.isIOS && preLoaded) {
                player.currentTime = function () {
                    var adIntegrator = self.state.adIntegrator;

                    return adIntegrator.getPlayerAdUnit().currentTime();
                };

                player.duration = function () {
                    var adIntegrator = self.state.adIntegrator;

                    return adIntegrator.getPlayerAdUnit().duration();
                };

                player.muted = function (isMute) {
                    var adIntegrator = self.state.adIntegrator;


                    if (typeof isMute === 'boolean') {
                        adIntegrator.getPlayerAdUnit().muted(isMute);
                        if (isMute) {
                            return self.setAdVolume(0);
                        } else {
                            return self.setAdVolume(0.5);
                        }
                    }

                    return adIntegrator.getPlayerAdUnit().muted();
                };
            }

            player.one(DEFAULT$1.EVENT.AD_END, function () {
                player.off(DEFAULT$1.EVENT.USER_SKIP_AD, self.skipAd);
                player.play = origPlay;
                player.pause = origPause;
                player.currentTime = oriCurrentTime;
                player.duration = oriDuration;
                player.muted = oriMuted;
            });
        }
    }, {
        key: 'playAd',
        value: function () {
            var _ref = asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(adChains) {
                var player, adState, adPod, error, result, i, vastResponse;
                return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                player = this.props.player;
                                adState = this.state.adState;
                                adPod = player.options().params.adPod;

                                if (!(adState !== AD_STATES.INIT)) {
                                    _context.next = 5;
                                    break;
                                }

                                return _context.abrupt('return');

                            case 5:
                                if (!(adChains && adChains.length)) {
                                    _context.next = 33;
                                    break;
                                }

                                error = void 0;
                                result = void 0;
                                i = 0;

                            case 9:
                                if (!(i < adChains.length)) {
                                    _context.next = 32;
                                    break;
                                }

                                vastResponse = adChains[i];
                                _context.prev = 11;

                                if (!(adPod === true)) {
                                    _context.next = 19;
                                    break;
                                }

                                player.trigger(DEFAULT$1.EVENT.AD_VASTRESPONSE, vastResponse);
                                _context.next = 16;
                                return this._playMutilAd(vastResponse);

                            case 16:
                                result = _context.sent;
                                _context.next = 24;
                                break;

                            case 19:
                                player.trigger(DEFAULT$1.EVENT.AD_VASTRESPONSE, vastResponse);
                                _context.next = 22;
                                return this._playOneAd(vastResponse);

                            case 22:
                                result = _context.sent;
                                return _context.abrupt('return', result);

                            case 24:
                                _context.next = 29;
                                break;

                            case 26:
                                _context.prev = 26;
                                _context.t0 = _context['catch'](11);

                                error = _context.t0;

                            case 29:
                                i++;
                                _context.next = 9;
                                break;

                            case 32:
                                return _context.abrupt('return', error);

                            case 33:
                                return _context.abrupt('return', this._playOneAd(adChains));

                            case 34:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _callee, this, [[11, 26]]);
            }));

            function playAd(_x) {
                return _ref.apply(this, arguments);
            }

            return playAd;
        }()
    }, {
        key: '_playMutilAd',
        value: function _playMutilAd(vastResponse) {
            var player = this.props.player;

            this.setState({
                adIntegrator: null,
                vastResponse: vastResponse
            });

            var vastResponse_ = lodash.cloneDeep(vastResponse);
            var adIntegrator = void 0;
            if (ImaIntegrator && this._isIMA(vastResponse_)) {
                adIntegrator = new ImaIntegrator(this.props);
            } else {
                adIntegrator = this._isVPAID(vastResponse_) ? new VPAIDIntegrator(this.props) : new VastTest(this.props);
            }

            this.setState({
                adIntegrator: adIntegrator
            });

            var vpaidStarted = false;
            player.one(DEFAULT$1.EVENT.VPAID_AD_START, function () {
                vpaidStarted = true;
            });

            return adIntegrator.playAd(vastResponse_).catch(function (e) {
                if (!vpaidStarted) {
                    throw e;
                }
            });
        }
    }, {
        key: '_checkPrerollVpaid',
        value: function _checkPrerollVpaid(vastResponse) {
            var _this2 = this;

            var _props2 = this.props,
                player = _props2.player,
                preLoaded = _props2.preLoaded,
                type = _props2.type,
                adsITVC = _props2.adsITVC;

            return new Promise(function (resolve) {
                if (adsITVC) {
                    resolve();
                    return;
                } else if (preLoaded && type === 'preroll' && _this2._isVPAID(vastResponse)) {
                    player.one('timeupdate', function () {
                        resolve();
                    });
                } else {
                    resolve();
                }
            });
        }
    }, {
        key: '_playOneAd',
        value: function _playOneAd(vastResponse) {
            var player = this.props.player;

            this.setState({
                vastResponse: vastResponse
            });
            var adIntegrator = void 0;
            var vastResponse_ = lodash.cloneDeep(vastResponse);

            if (ImaIntegrator && this._isIMA(vastResponse_)) {
                adIntegrator = new ImaIntegrator(this.props);
            } else {
                adIntegrator = this._isVPAID(vastResponse_) ? new VPAIDIntegrator(this.props) : new VastTest(this.props);
            }

            this.setState({
                adIntegrator: adIntegrator
            });
            player.trigger(DEFAULT$1.EVENT.AD_PLAY, vastResponse_);

            var vpaidStarted = false;
            player.one(DEFAULT$1.EVENT.VPAID_AD_START, function () {
                vpaidStarted = true;
            });

            return this._checkPrerollVpaid(vastResponse_).then(function () {
                return adIntegrator.playAd(vastResponse_).catch(function (e) {
                    if (!vpaidStarted) {
                        throw e;
                    }
                });
            });
        }
    }, {
        key: 'snapshot',
        value: function snapshot() {
            return this.state.restorePlayer.snapshot();
        }
    }, {
        key: '_setUpRestorePlayer',
        value: function _setUpRestorePlayer() {
            var _props3 = this.props,
                player = _props3.player,
                preLoaded = _props3.preLoaded;

            var restorePlayer = new RestorePlayer({ player: player, vastAd: this, preLoaded: preLoaded });
            this.setState({ restorePlayer: restorePlayer });
        }
    }, {
        key: '_setAdCancelTimeout',
        value: function _setAdCancelTimeout() {}
    }, {
        key: '_getVastResponse',
        value: function _getVastResponse() {
            var _props4 = this.props,
                adTagUrl = _props4.adTagUrl,
                adTagXML = _props4.adTagXML,
                vastResponse = _props4.vastResponse,
                ima = _props4.ima;


            if (ima) {
                return Promise.resolve({ ima: true, adTagUrl: ima });
            }

            if (vastResponse) {
                return Promise.resolve(vastResponse);
            }
            return VastPlugin.getVASTResponse({ adTagUrl: adTagUrl, adTagXML: adTagXML });
        }
    }, {
        key: '_isVPAID',
        value: function _isVPAID(vastResponse) {
            var i, len;
            var mediaFiles = vastResponse.mediaFiles;
            for (i = 0, len = mediaFiles.length; i < len; i++) {
                if (VastUtil.isVPAID(mediaFiles[i]) && mediaFiles[i].isSupported()) {
                    return true;
                }
            }
            return false;
        }
    }, {
        key: '_isIMA',
        value: function _isIMA(vastResponse) {
            return !!vastResponse.ima;
        }
    }], [{
        key: 'getVASTResponse',
        value: function getVASTResponse(_ref2) {
            var adTagUrl = _ref2.adTagUrl,
                adTagXML = _ref2.adTagXML,
                isPackageAds = _ref2.isPackageAds;

            return vastClient.getVASTResponse({ adTagUrl: adTagUrl, adTagXML: adTagXML, isPackageAds: isPackageAds });
        }
    }]);
    return VastPlugin;
}(VCPlayerObject$1), _class2$1.propTypes = {
    player: playercore.PropTypes.object.isRequired,
    type: playercore.PropTypes.string.isRequired,
    adTagUrl: playercore.PropTypes.string,
    adTagXML: playercore.PropTypes.object,
    adsITVC: playercore.PropTypes.bool,
    ima: playercore.PropTypes.string,
    preLoaded: playercore.PropTypes.bool,
    skipoffset: playercore.PropTypes.number,
    vastResponse: playercore.PropTypes.array
}, _class2$1.defaultProps = {
    timeout: 500,
    autostart: true
}, _temp$2), (_applyDecoratedDescriptor$1(_class$2.prototype, 'skipAd', [playercore.autobind], Object.getOwnPropertyDescriptor(_class$2.prototype, 'skipAd'), _class$2.prototype), _applyDecoratedDescriptor$1(_class$2.prototype, 'clickThrough', [playercore.autobind], Object.getOwnPropertyDescriptor(_class$2.prototype, 'clickThrough'), _class$2.prototype)), _class$2);

var _class$1;
var _temp$1;

var DefaultAdPlugin = (_temp$1 = _class$1 = function (_Plugin) {
    inherits(DefaultAdPlugin, _Plugin);
    createClass(DefaultAdPlugin, [{
        key: 'getDefaultProps',
        value: function getDefaultProps() {

            var defaultProps = this.constructor.defaultProps;

            var customize_data = {};

            return _extends({}, defaultProps, customize_data);
        }
    }]);

    function DefaultAdPlugin(props) {
        classCallCheck(this, DefaultAdPlugin);
        return possibleConstructorReturn(this, (DefaultAdPlugin.__proto__ || Object.getPrototypeOf(DefaultAdPlugin)).call(this, props));
    }

    /**
     * Init ad theo adTagUrl
     * @param  {Object}  options
     * @param  {String}  options.adTagUrl  Url của vast
     */


    createClass(DefaultAdPlugin, [{
        key: 'initAd',
        value: function initAd(_ref) {
            var adTagUrl = _ref.adTagUrl,
                adTagXML = _ref.adTagXML,
                vastResponse = _ref.vastResponse,
                ima = _ref.ima,
                type = _ref.type,
                skipoffset = _ref.skipoffset,
                preLoaded = _ref.preLoaded,
                adsITVC = _ref.adsITVC;

            var self = this;
            var player = this.props.player;

            var callOrigPlay = player.play;
            var firstCallPlay = false;

            player.play = function () {
                if (firstCallPlay) {
                    return;
                }

                firstCallPlay = true;
                player.play = callOrigPlay;
                self._initAd({ adTagUrl: adTagUrl, adTagXML: adTagXML, vastResponse: vastResponse, ima: ima, type: type, skipoffset: skipoffset, preLoaded: preLoaded, adsITVC: adsITVC });
            };

            player.play();
        }

        /**
         * Init ad  
         * @param  {Object}  options
         * @param  {String}  options.adTagUrl
         * @param  {Object}  options.vastResponse
         */

    }, {
        key: '_initAd',
        value: function _initAd(_ref2) {
            var adTagUrl = _ref2.adTagUrl,
                adTagXML = _ref2.adTagXML,
                vastResponse = _ref2.vastResponse,
                ima = _ref2.ima,
                type = _ref2.type,
                preLoaded = _ref2.preLoaded,
                skipoffset = _ref2.skipoffset,
                adsITVC = _ref2.adsITVC;
            var player = this.props.player;


            if (player.vastAd) {
                return;
            }

            new VastPlugin({
                player: player,
                adTagUrl: adTagUrl,
                adTagXML: adTagXML,
                vastResponse: vastResponse,
                ima: ima,
                type: type,
                skipoffset: skipoffset,
                preLoaded: preLoaded,
                adsITVC: adsITVC
            });
        }
    }, {
        key: 'getVastRespone',
        value: function getVastRespone(_ref3) {
            var adTagUrl = _ref3.adTagUrl,
                adTagXML = _ref3.adTagXML;

            return VastPlugin.getVASTResponse({ adTagUrl: adTagUrl, adTagXML: adTagXML });
        }
    }]);
    return DefaultAdPlugin;
}(playercore.Plugin), _class$1.defaultProps = {
    adsCancelTimeout: 5000
}, _temp$1);

var _class;
var _class2;
var _temp;

function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
        desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
        desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
        return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
        desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
        desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
        Object['define' + 'Property'](target, property, desc);
        desc = null;
    }

    return desc;
}

var AD_TYPE = {
    PREROLL: 'preroll',
    MIDROLL: 'midroll',
    POSTROLL: 'postroll'
};

var Player = playercore__default.getComponent('Player');
var DEFAULT = playercore.playerconfig.DEFAULT;
var AdsPlugin = (_class = (_temp = _class2 = function (_DefaultAdPlugin) {
    inherits(AdsPlugin, _DefaultAdPlugin);
    createClass(AdsPlugin, [{
        key: 'getDefaultProps',
        value: function getDefaultProps(props) {
            var player = props.player;

            var _player$options = player.options(),
                params = _player$options.params,
                plugins = _player$options.plugins;

            var ads = params.ads,
                vast = params.vast,
                ima = params.ima;


            var defaultProps = this.constructor.defaultProps;

            var customize_data = {};

            if (!plugins.kinghubAdmicroADSPlugin && Player.prototype.kinghubAdmicroADSPlugin) {
                customize_data.enableAd = false;
            }

            if (vast || ima) {
                customize_data.enableAd = true;
            }

            if (Player.prototype.adsVastPlugin) {
                customize_data.enableAd = false;
            }

            if (ads === false) {
                customize_data.enableAd = false;
            }

            return _extends({}, defaultProps, customize_data);
        }
    }]);

    function AdsPlugin(props) {
        classCallCheck(this, AdsPlugin);

        var _this = possibleConstructorReturn(this, (AdsPlugin.__proto__ || Object.getPrototypeOf(AdsPlugin)).call(this, props));

        var self = _this;
        var _this$props = _this.props,
            player = _this$props.player,
            enableAd = _this$props.enableAd;

        var _player$options2 = player.options(),
            params = _player$options2.params;

        // Kiểm tra xem có enable ad không


        if (!enableAd) {
            return possibleConstructorReturn(_this);
        }

        if (!params.noAdsLoad) {
            player.one('updateMediaInfo', function () {
                if (params.midroll) {
                    var adTagUrlMidroll = self._getVastInAdmicro({ type: AD_TYPE.MIDROLL });
                    self.getVastRespone({ adTagUrl: adTagUrlMidroll }).then(function (vast) {
                        if ((typeof vast === 'undefined' ? 'undefined' : _typeof(vast)) === 'object') {
                            self.setState({
                                midroll: vast
                            });
                        }
                    }).catch(function (err) {
                        console.log(err);
                    });
                }
                if (params.postroll) {
                    var adTagUrlPostroll = self._getVastInAdmicro({ type: AD_TYPE.POSTROLL });
                    self.getVastRespone({ adTagUrl: adTagUrlPostroll }).then(function (vast) {
                        if ((typeof vast === 'undefined' ? 'undefined' : _typeof(vast)) === 'object') {
                            self.setState({
                                postroll: vast
                            });
                        }
                    }).catch(function (err) {
                        console.log(err);
                    });
                }
                if (!params.nopre && playercore.agent.isIOS) {
                    var adTagUrlPreroll = self._getVastInAdmicro({ type: AD_TYPE.PREROLL });
                    self.getVastRespone({ adTagUrl: adTagUrlPreroll }).then(function (vast) {
                        if ((typeof vast === 'undefined' ? 'undefined' : _typeof(vast)) === 'object') {
                            self.setState({
                                preroll: vast
                            });
                        }
                    }).catch(function (err) {
                        console.log(err);
                    });
                }
            });
        }
        // player.on(DEFAULT.EVENT.AD_ORDER_START_MIDROLL, this.startMidroll);
        // player.on(DEFAULT.EVENT.AD_ORDER_START_POSTROLL, this.startPostroll);
        player.on('prepareMidrollVast', _this.handlePrepareMidroll);

        if (!params.noAdsLoad && !playercore.agent.isIOS) {
            player.on('preparePostrollVast', _this.preparePostroll);
            if (params.vid) {
                player.one('updateMediaInfo', _this.handleLoadAdPreroll);
            } else {
                player.one(DEFAULT.EVENT.PLAYER_READY, _this.handleLoadAdPreroll);
            }
            // this.handleLoadAdPreroll()
        } else {
            player.on(DEFAULT.EVENT.AD_ORDER_START_POSTROLL, _this.startPostroll);
            player.one('play', _this.preparePreroll);
        }

        return _this;
    }

    /**
     * Bước chuẩn bị để chạy preroll ad 
     * @return {[type]} [description]
     */


    createClass(AdsPlugin, [{
        key: 'preparePreroll',
        value: function preparePreroll() {
            var self = this;
            var vastResponse = void 0;
            var player = this.props.player;
            var preroll = this.state.preroll;

            var _player$options3 = player.options(),
                params = _player$options3.params;

            if (params.nopre) {
                return;
            }

            var ima = params.ima;

            if (preroll) {
                player.one('timeupdate', function () {
                    self.initAd({ adTagUrl: adTagUrl, vastResponse: preroll, ima: ima, type: AD_TYPE.PREROLL });
                });
                return;
            }

            var adTagUrl = self._getVastInAdmicro({ type: AD_TYPE.PREROLL, position: 0 });
            if (!adTagUrl) {
                return;
            }

            player.one('timeupdate', function () {
                self.initAd({ adTagUrl: adTagUrl, vastResponse: vastResponse, ima: ima, type: AD_TYPE.PREROLL });
            });
        }
    }, {
        key: 'preparePostroll',
        value: function preparePostroll() {
            var self = this;
            var preLoaded = true;
            var postroll = this.state.postroll;


            var adTagUrl = self._getVastInAdmicro({ type: AD_TYPE.POSTROLL, position: 0 });
            if (!adTagUrl) {
                return;
            }

            if (postroll) {
                this.initAd({ adTagUrl: adTagUrl, vastResponse: postroll, type: AD_TYPE.POSTROLL, preLoaded: preLoaded });
                this.setState({
                    postroll: false
                });
                return;
            }

            this.getVastRespone({ adTagUrl: adTagUrl }).then(function (vast) {
                var adTagUrl = void 0,
                    vastResponse = void 0;
                if (typeof vast === 'string') {
                    adTagUrl = vast;
                } else if ((typeof vast === 'undefined' ? 'undefined' : _typeof(vast)) === 'object') {
                    vastResponse = vast;
                } else {
                    return;
                }
                self.initAd({ adTagUrl: adTagUrl, vastResponse: vastResponse, type: AD_TYPE.POSTROLL, preLoaded: preLoaded });
            }).catch(function (err) {
                console.log(err);
            });
        }

        /**
         *  Load trước media của ads
         */

    }, {
        key: 'handleLoadAdPreroll',
        value: function handleLoadAdPreroll() {
            var self = this;
            var player = this.props.player;
            var preroll = this.state.preroll;

            var preLoaded = true;

            var _player$options4 = player.options(),
                params = _player$options4.params;

            if (params.nopre) {
                return;
            }

            var ima = params.ima;


            if (preroll) {
                player.one('timeupdate', function () {
                    self.initAd({ adTagUrl: adTagUrl, vastResponse: preroll, ima: ima, type: AD_TYPE.PREROLL });
                });
                return;
            }

            var adTagUrl = self._getVastInAdmicro({ type: AD_TYPE.PREROLL, position: 0 });
            if (!adTagUrl) {
                return;
            }

            this.getVastRespone({ adTagUrl: adTagUrl }).then(function (vast) {
                var adTagUrl = void 0,
                    vastResponse = void 0;
                if (typeof vast === 'string') {
                    adTagUrl = vast;
                } else if ((typeof vast === 'undefined' ? 'undefined' : _typeof(vast)) === 'object') {
                    vastResponse = vast;
                } else {
                    return;
                }
                self.initAd({ adTagUrl: adTagUrl, vastResponse: vastResponse, ima: ima, type: AD_TYPE.PREROLL, preLoaded: preLoaded });
            }).catch(function (err) {
                console.log(err);
            });
        }
    }, {
        key: 'startMidroll',
        value: function startMidroll(evt, vast) {
            var adTagUrl = void 0,
                vastResponse = void 0;
            if (typeof vast === 'string') {
                adTagUrl = vast;
            } else if ((typeof vast === 'undefined' ? 'undefined' : _typeof(vast)) === 'object') {
                vastResponse = vast;
            } else {
                return;
            }
            this.initAd({ adTagUrl: adTagUrl, vastResponse: vastResponse, type: AD_TYPE.MIDROLL });
        }
    }, {
        key: 'handlePrepareMidroll',
        value: function handlePrepareMidroll(event, index) {
            var player = this.props.player;

            var self = this;
            var midroll = this.state.midroll;

            var preLoaded = true;

            var _player$options5 = player.options(),
                params = _player$options5.params;

            var adTagUrl = this._getVastInAdmicro({ type: AD_TYPE.MIDROLL, position: index });

            if (!adTagUrl) {
                player.trigger(DEFAULT.EVENT.AD_MIDROLL_VASTRESPONSE);
                return;
            }

            if (midroll) {
                player.trigger(DEFAULT.EVENT.AD_MIDROLL_VASTRESPONSE, midroll);
                if (params.noAdsLoad || playercore.agent.isIOS) {
                    player.one(DEFAULT.EVENT.AD_ORDER_START_MIDROLL, self.startMidroll);
                    return;
                }
                this.initAd({ adTagUrl: adTagUrl, vastResponse: midroll, type: AD_TYPE.MIDROLL, preLoaded: preLoaded });
                this.setState({
                    midroll: false
                });
                return;
            }

            this.getVastRespone({ adTagUrl: adTagUrl }).then(function (vast) {
                player.trigger(DEFAULT.EVENT.AD_MIDROLL_VASTRESPONSE, vast);
                var adTagUrl = void 0,
                    vastResponse = void 0;
                if (typeof vast === 'string') {
                    adTagUrl = vast;
                } else if ((typeof vast === 'undefined' ? 'undefined' : _typeof(vast)) === 'object') {
                    vastResponse = vast;
                } else {
                    return;
                }
                if (params.noAdsLoad || playercore.agent.isIOS) {
                    player.one(DEFAULT.EVENT.AD_ORDER_START_MIDROLL, self.startMidroll);
                    return;
                }
                self.initAd({ adTagUrl: adTagUrl, vastResponse: vastResponse, type: AD_TYPE.MIDROLL, preLoaded: preLoaded });
            }).catch(function () {
                player.trigger(DEFAULT.EVENT.AD_MIDROLL_VASTRESPONSE);
            });
        }
    }, {
        key: 'startPostroll',
        value: function startPostroll() {
            var adTagUrl = this._getVastInAdmicro({ type: AD_TYPE.POSTROLL, position: 10 });
            if (adTagUrl) {
                this._initAd({ adTagUrl: adTagUrl, type: 'postroll' });
            }
        }

        /**
         * Lấy vast url từ admicro plugin
         * @return {String|null}
         */

    }, {
        key: '_getVastInAdmicro',
        value: function _getVastInAdmicro() {
            var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
            var player = this.props.player;

            var _player$options6 = player.options(),
                params = _player$options6.params;

            if (Player.prototype.kinghubAdmicroADSPlugin) {
                return Player.prototype.kinghubAdmicroADSPlugin.call(player, options);
            } else if (params.vast) {
                return params.vast;
            }
        }
    }]);
    return AdsPlugin;
}(DefaultAdPlugin), _class2.defaultProps = {
    adsCancelTimeout: 5000,
    enableAd: true
}, _temp), (_applyDecoratedDescriptor(_class.prototype, 'preparePreroll', [playercore.autobind], Object.getOwnPropertyDescriptor(_class.prototype, 'preparePreroll'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'preparePostroll', [playercore.autobind], Object.getOwnPropertyDescriptor(_class.prototype, 'preparePostroll'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'handleLoadAdPreroll', [playercore.autobind], Object.getOwnPropertyDescriptor(_class.prototype, 'handleLoadAdPreroll'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'startMidroll', [playercore.autobind], Object.getOwnPropertyDescriptor(_class.prototype, 'startMidroll'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'handlePrepareMidroll', [playercore.autobind], Object.getOwnPropertyDescriptor(_class.prototype, 'handlePrepareMidroll'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'startPostroll', [playercore.autobind], Object.getOwnPropertyDescriptor(_class.prototype, 'startPostroll'), _class.prototype)), _class);

var _class$16;
var _class2$5;
var _temp2$1;

function _applyDecoratedDescriptor$6(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
        desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
        desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
        return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
        desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
        desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
        Object['define' + 'Property'](target, property, desc);
        desc = null;
    }

    return desc;
}

var DEFAULT$8 = playercore.playerconfig.DEFAULT;


var playername = "Kenh14Player";

/**
 * @class SkipToggle
 */
var SkipToggle = (_class$16 = (_temp2$1 = _class2$5 = function (_Component) {
    inherits(SkipToggle, _Component);

    function SkipToggle() {
        var _ref;

        var _temp, _this, _ret;

        classCallCheck(this, SkipToggle);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = SkipToggle.__proto__ || Object.getPrototypeOf(SkipToggle)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
            timeLeft: 6,
            started: false,
            skipped: false
        }, _temp), possibleConstructorReturn(_this, _ret);
    }

    createClass(SkipToggle, [{
        key: 'componentDidMount',
        value: function componentDidMount() {
            //let {player} = this.props;
            //player.on('timeupdate', this.update);
            this.intervalRemainingTime_ = setInterval(this.update, 200);
        }
    }, {
        key: 'componentWillUnmount',
        value: function componentWillUnmount() {
            //let {player} = this.props;
            //player.off('timeupdate', this.update);
            clearInterval(this.intervalRemainingTime_);
        }
    }, {
        key: '_getAdDuration',
        value: function _getAdDuration() {
            var player = this.props.player;

            var adUnit = player.vastAd.adUnit();
            var self = this;
            adUnit.getAdDuration().then(function (duration) {
                self.adDuration = duration;
            });

            // start test iab
            var vasResponse = player.vastAd.vastResponse();
            var bid = vasResponse.ads[0].id;

            if (bid === 543706) {
                this.skipOffset = 8;
            }

            // end test iab
        }

        /**
        * Update thời gian còn lại mà client có thể skip ad
        */

    }, {
        key: 'update',
        value: function update() {
            var _props = this.props,
                player = _props.player,
                skipOffset = _props.skipOffset;


            if (!player.vastAd) {
                return;
            }

            var adUnit = player.vastAd.adUnit();
            var self = this;

            if (!this.adDuration) {
                this._getAdDuration();
                return;
            }

            this.skipOffset = adUnit.getSkipOffSet();

            // start test iab
            skipOffset = this.skipOffset || skipOffset;

            // end test iab

            adUnit.getAdRemainingTime().then(function (remainingTime) {
                var timeLeft = Math.ceil(skipOffset + remainingTime - self.adDuration);
                self.setState({
                    timeLeft: timeLeft,
                    started: true
                });
            });
        }
    }, {
        key: '_skipAd',
        value: function _skipAd(evt) {
            evt.preventDefault();
            var _state = this.state,
                timeLeft = _state.timeLeft,
                skipped = _state.skipped;

            if (timeLeft > 0 || skipped) {
                return;
            }

            this.setState({
                skipped: true
            });

            playercore.log.trace('<SkipToggle._skipAd>');
            var player = this.props.player;

            player.trigger(DEFAULT$8.EVENT.USER_SKIP_AD);
        }
    }, {
        key: 'render',
        value: function render() {
            var adCanSkip = void 0;
            var player = this.props.player;
            var _state2 = this.state,
                timeLeft = _state2.timeLeft,
                skipped = _state2.skipped,
                started = _state2.started;

            var label = timeLeft > 0 ? timeLeft + ' gi\xE2y' : 'Bỏ Qua';
            if (label === 'Bỏ Qua') {
                adCanSkip = 'ad-canskip';
            }

            if (player.options().params.noAdSkip) {
                return null;
            }

            if (skipped || !started) {
                return null;
            }

            return React__default.createElement(
                'button',
                {
                    className: 'ad-skip ' + adCanSkip + ' ' + playername + '-button',
                    onClick: this._skipAd
                },
                label
            );
        }
    }]);
    return SkipToggle;
}(React.Component), _class2$5.propTypes = {
    player: playercore.PropTypes.object.isRequired,
    skipOffset: playercore.PropTypes.number
}, _class2$5.defaultProps = {
    skipOffset: 6
}, _temp2$1), (_applyDecoratedDescriptor$6(_class$16.prototype, 'update', [playercore.autobind], Object.getOwnPropertyDescriptor(_class$16.prototype, 'update'), _class$16.prototype), _applyDecoratedDescriptor$6(_class$16.prototype, '_skipAd', [playercore.autobind], Object.getOwnPropertyDescriptor(_class$16.prototype, '_skipAd'), _class$16.prototype)), _class$16);

var _class$17;
var _class2$6;
var _temp2$2;

function _applyDecoratedDescriptor$7(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
        desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
        desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
        return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
        desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
        desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
        Object['define' + 'Property'](target, property, desc);
        desc = null;
    }

    return desc;
}

var DEFAULT$9 = playercore.playerconfig.DEFAULT;

/**
 * @class ClickThrough
 */

var ClickThrough = (_class$17 = (_temp2$2 = _class2$6 = function (_Component) {
    inherits(ClickThrough, _Component);

    function ClickThrough() {
        var _ref;

        var _temp, _this, _ret;

        classCallCheck(this, ClickThrough);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = ClickThrough.__proto__ || Object.getPrototypeOf(ClickThrough)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
            url: null
        }, _temp), possibleConstructorReturn(_this, _ret);
    }

    createClass(ClickThrough, [{
        key: 'componentDidMount',
        value: function componentDidMount() {
            var player = this.props.player;

            var type = player.vastAd.adUnit().type;
            if (type !== 'VPAID') {
                player.trigger(DEFAULT$9.EVENT.VAST_AD_VIDEO_SHOW);
            }
        }
    }, {
        key: 'updateBlocker',
        value: function updateBlocker(url) {
            this.setState({
                url: url
            });
        }
    }, {
        key: '_clickthrough',
        value: function _clickthrough(evt) {
            var player = this.props.player;

            var adUnit = player.vastAd.adUnit();
            var paused = adUnit.isPaused();
            if (paused) {
                player.play();
                evt.stopPropagation();
                return false;
            }

            adUnit.clickThrough();
        }
    }, {
        key: 'render',
        value: function render() {
            var url = this.state.url;


            if (!url) {
                return null;
            }

            return React__default.createElement('a', {
                className: 'ad-clickthrough-blocker',
                onClick: this._clickthrough,
                href: url,
                target: '_blank',
                rel: 'noopener noreferrer'
            });
        }
    }]);
    return ClickThrough;
}(React.Component), _class2$6.propTypes = {
    player: playercore.PropTypes.object.isRequired
}, _temp2$2), (_applyDecoratedDescriptor$7(_class$17.prototype, 'updateBlocker', [playercore.autobind], Object.getOwnPropertyDescriptor(_class$17.prototype, 'updateBlocker'), _class$17.prototype), _applyDecoratedDescriptor$7(_class$17.prototype, '_clickthrough', [playercore.autobind], Object.getOwnPropertyDescriptor(_class$17.prototype, '_clickthrough'), _class$17.prototype)), _class$17);

var _class$19;
var _class2$7;
var _temp2$4;

function _applyDecoratedDescriptor$8(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
        desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
        desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
        return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
        desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
        desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
        Object['define' + 'Property'](target, property, desc);
        desc = null;
    }

    return desc;
}

var playername$1 = "Kenh14Player";

var DEFAULT$11 = playercore.playerconfig.DEFAULT;
var AdBtnMute = (_class$19 = (_temp2$4 = _class2$7 = function (_Component) {
    inherits(AdBtnMute, _Component);

    function AdBtnMute() {
        var _ref;

        var _temp, _this, _ret;

        classCallCheck(this, AdBtnMute);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = AdBtnMute.__proto__ || Object.getPrototypeOf(AdBtnMute)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
            muted: true
        }, _temp), possibleConstructorReturn(_this, _ret);
    }

    createClass(AdBtnMute, [{
        key: 'componentDidMount',
        value: function componentDidMount() {
            var player = this.props.player;

            var self = this;
            this.type = player.vastAd.adUnit().type;
            this.update = this.update.bind(this);
            this._handleAdEnd = this._handleAdEnd.bind(this);

            var PlayerAdUnit = player.vastAd.getPlayerAdUnit();

            player.on(DEFAULT$11.EVENT.AD_END, this._handleAdEnd);

            var vastAd = player.vastAd;
            var snapshot = vastAd.snapshot();

            var volume = snapshot.muted ? 0 : snapshot.volume;
            try {
                vastAd.setAdVolume(volume).then(function () {
                    vastAd.getAdVolume().then(function (volume) {
                        self.setState({
                            firstVolume: volume
                        });
                    });
                });
            } catch (e) {
                //ignore
            }
            var isMuted = snapshot.muted;
            this.setState({ muted: isMuted });
            player.setTimeout(function () {
                self.setState({
                    firstVolume: volume
                });
            }, 1000);

            PlayerAdUnit.on('volumechange', this.update);
            this.update();
        }
    }, {
        key: '_handleAdEnd',
        value: function _handleAdEnd() {
            // let {player} = this.props;
            // PlayerAdUnit.off('volumechange', this.update);
        }
    }, {
        key: 'update',
        value: function update() {
            var self = this;
            var player = this.props.player;

            var vastAd = player.vastAd;
            var PlayerAdUnit = vastAd.getPlayerAdUnit();

            vastAd.getAdVolume().then(function (volume) {
                var mute = PlayerAdUnit.muted();
                if (volume === 0 || mute) {
                    self.setState({
                        muted: true
                    });
                } else {
                    self.setState({
                        muted: false
                    });
                }
            });
        }
    }, {
        key: 'handleClick',
        value: function handleClick(e) {
            e.preventDefault();
            var player = this.props.player;
            var _state = this.state,
                firstVolume = _state.firstVolume,
                muted = _state.muted;

            var vastAd = player.vastAd;
            var PlayerAdUnit = vastAd.getPlayerAdUnit();

            vastAd.getAdVolume().then(function (volume) {
                var volume_ = firstVolume === 0 ? 0.5 : firstVolume;
                PlayerAdUnit.muted(!muted);
                if (volume === 0 || muted) {
                    vastAd.setAdVolume(volume_);
                } else {
                    vastAd.setAdVolume(0);
                }
            });
        }
    }, {
        key: 'render',
        value: function render() {
            var _this2 = this;

            var player = this.props.player;
            var muted = this.state.muted;

            var width = player.el_.clientWidth;

            if (player.options().params.noAdMute) {
                return null;
            }

            if (!player.options().params.adMuteToggle && player.vastAd.adUnit().type === 'VPAID') {
                return null;
            }

            if (width <= 170) {
                return null;
            }
            return React__default.createElement(
                'div',
                { className: playername$1 + '-ad-btn-mute', onClick: function onClick(e) {
                        return _this2.handleClick(e);
                    } },
                React__default.createElement(
                    'button',
                    null,
                    React__default.createElement('span', { className: playername$1 + '-ad-qmtwbs-base' }),
                    React__default.createElement('span', { className: playername$1 + '-ad-qmtwbs-level' })
                ),
                muted ? React__default.createElement('span', { className: playername$1 + '-ad-line-mute' }) : null
            );
        }
    }]);
    return AdBtnMute;
}(React.Component), _class2$7.propTypes = {
    player: playercore.PropTypes.object.isRequired
}, _temp2$4), (_applyDecoratedDescriptor$8(_class$19.prototype, 'handleClick', [playercore.autobind], Object.getOwnPropertyDescriptor(_class$19.prototype, 'handleClick'), _class$19.prototype)), _class$19);

var _class$18;
var _temp2$3;

// import AdPlayToggle from './AdPlayToggle';
// import AdFullScreenToggle from './AdFullScreenToggle';

var DEFAULT$10 = playercore.playerconfig.DEFAULT;
/**
 * @class AdControlBar
 */

var AdControlBar$1 = (_temp2$3 = _class$18 = function (_Component) {
    inherits(AdControlBar, _Component);

    function AdControlBar() {
        var _ref;

        var _temp, _this, _ret;

        classCallCheck(this, AdControlBar);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = AdControlBar.__proto__ || Object.getPrototypeOf(AdControlBar)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
            url: null
        }, _temp), possibleConstructorReturn(_this, _ret);
    }

    createClass(AdControlBar, [{
        key: 'componentDidMount',
        value: function componentDidMount() {
            var player = this.props.player;

            var type = player.vastAd.adUnit().type;
            if (type !== 'VPAID') {
                player.trigger(DEFAULT$10.EVENT.VAST_AD_VIDEO_SHOW);
            }
        }
    }, {
        key: 'render',
        value: function render() {
            var player = this.props.player;


            return React__default.createElement(
                'div',
                { className: 'Ad-controlBar' },
                React__default.createElement(AdBtnMute, { player: player })
            );
        }
    }]);
    return AdControlBar;
}(React.Component), _class$18.propTypes = {
    player: playercore.PropTypes.object.isRequired
}, _temp2$3);

var _class$20;
var _class2$8;
var _temp2$5;

function _applyDecoratedDescriptor$9(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
        desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
        desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
        return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
        desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
        desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
        Object['define' + 'Property'](target, property, desc);
        desc = null;
    }

    return desc;
}

var DEFAULT$12 = playercore.playerconfig.DEFAULT;

/**
 * @class AdThumbnail
 */

var AdThumbnail = (_class$20 = (_temp2$5 = _class2$8 = function (_Component) {
    inherits(AdThumbnail, _Component);

    function AdThumbnail() {
        var _ref;

        var _temp, _this, _ret;

        classCallCheck(this, AdThumbnail);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = AdThumbnail.__proto__ || Object.getPrototypeOf(AdThumbnail)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
            is_show: false,
            thumb_query: _this.props.player.options().params.poster
        }, _temp), possibleConstructorReturn(_this, _ret);
    }

    createClass(AdThumbnail, [{
        key: 'componentDidMount',
        value: function componentDidMount() {
            var player = this.props.player;

            player.on(DEFAULT$12.EVENT.AD_END, this.handleOnAdEnd);
        }
    }, {
        key: 'handleOnAdEnd',
        value: function handleOnAdEnd() {
            this.setState({
                is_show: true
            });
        }
    }, {
        key: 'render',
        value: function render() {
            var _state = this.state,
                is_show = _state.is_show,
                thumb_query = _state.thumb_query;


            if (!is_show) {
                return null;
            }

            var thumb = thumb_query;

            thumb = decodeURIComponent(thumb);
            thumb = thumb.replace(/([^:])(\/\/)/g, '$1/');

            var style = {
                backgroundImage: 'url(\'' + thumb + '\')'
            };

            return React__default.createElement('div', { style: style, className: 'ad-thumbnail' });
        }
    }]);
    return AdThumbnail;
}(React.Component), _class2$8.propTypes = {
    player: playercore.PropTypes.object.isRequired
}, _temp2$5), (_applyDecoratedDescriptor$9(_class$20.prototype, 'handleOnAdEnd', [playercore.autobind], Object.getOwnPropertyDescriptor(_class$20.prototype, 'handleOnAdEnd'), _class$20.prototype)), _class$20);

var _class$15;
var _class2$4;
var _temp2;

function _applyDecoratedDescriptor$5(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
        desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
        desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
        return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
        desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
        desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
        Object['define' + 'Property'](target, property, desc);
        desc = null;
    }

    return desc;
}

//import AdMuteToggle from './AdMuteToggle.jsx';
var DEFAULT$7 = playercore.playerconfig.DEFAULT;
var Ad$3 = (_class$15 = (_temp2 = _class2$4 = function (_Component) {
    inherits(Ad, _Component);

    function Ad() {
        var _ref;

        var _temp, _this, _ret;

        classCallCheck(this, Ad);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = Ad.__proto__ || Object.getPrototypeOf(Ad)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
            isShow: false,
            is_Loop: false
        }, _temp), possibleConstructorReturn(_this, _ret);
    }

    createClass(Ad, [{
        key: 'componentDidMount',
        value: function componentDidMount() {
            var player = this.props.player;

            player.on(DEFAULT$7.EVENT.AD_START, this._handleAdStart);
            player.on(DEFAULT$7.EVENT.AD_END, this._handleAdEnd);
            player.on(DEFAULT$7.EVENT.USER_SKIP_AD, this._handleAdSkip);
            player.on(DEFAULT$7.EVENT.VAST_AD_VIDEO_COMPLETE, this._handleAdMediaEnd);
            player.on(DEFAULT$7.EVENT.VPAID_AD_VIDEO_COMPLETE, this._handleAdMediaEnd);

            player.on(DEFAULT$7.EVENT.VAST_AD_VIDEO_START, this._handleVastStart);
            player.on(DEFAULT$7.EVENT.VPAID_AD_START, this._handleVpaidStart);
            this.hasAttributeLoop();
        }
    }, {
        key: 'hasAttributeLoop',
        value: function hasAttributeLoop() {
            var player = this.props.player;

            if (document.getElementById('' + player.id_).hasAttribute('loop')) {
                this.setState({
                    is_Loop: true
                });
            }
        }
    }, {
        key: 'componentWillUnmount',
        value: function componentWillUnmount() {
            var player = this.props.player;

            player.off(DEFAULT$7.EVENT.AD_START, this._handleAdStart);
            player.off(DEFAULT$7.EVENT.AD_END, this._handleAdEnd);
            player.off(DEFAULT$7.EVENT.USER_SKIP_AD, this._handleAdSkip);
            player.off(DEFAULT$7.EVENT.VAST_AD_VIDEO_COMPLETE, this._handleAdMediaEnd);
            player.off(DEFAULT$7.EVENT.VPAID_AD_VIDEO_COMPLETE, this._handleAdMediaEnd);

            player.off(DEFAULT$7.EVENT.VAST_AD_VIDEO_START, this._handleVastStart);
            player.off(DEFAULT$7.EVENT.VPAID_AD_START, this._handleVpaidStart);
        }
    }, {
        key: '_handleAdStart',
        value: function _handleAdStart() {}
    }, {
        key: '_handleAdMediaEnd',
        value: function _handleAdMediaEnd() {
            this.setState({
                isShow: false
            });
        }
    }, {
        key: '_handleAdSkip',
        value: function _handleAdSkip() {
            this.setState({
                isShow: false
            });
        }
    }, {
        key: '_handleAdEnd',
        value: function _handleAdEnd() {
            this.setState({
                isShow: false
            });
        }
    }, {
        key: '_handleVastStart',
        value: function _handleVastStart() {
            this.setState({
                isShow: true
            });
        }
    }, {
        key: '_handleVpaidStart',
        value: function _handleVpaidStart() {
            this.setState({
                isShow: true
            });
        }
    }, {
        key: 'render',
        value: function render() {
            var _this2 = this;

            var _state = this.state,
                isShow = _state.isShow,
                is_Loop = _state.is_Loop;
            var player = this.props.player;
            var adThumbnail = player.options().params.adThumbnail;


            if (!isShow) {
                if (adThumbnail && !is_Loop) {
                    return React__default.createElement(
                        'div',
                        { className: 'ad-container', style: { width: '100%', height: '100%' } },
                        React__default.createElement(AdThumbnail, { key: 'adThumbail', player: this.props.player, ref: function ref(c) {
                                _this2.adThumbnail = c;
                            } })
                    );
                } else {
                    return null;
                }
            }

            return React__default.createElement(
                'div',
                { className: 'ad-container', style: { width: '100%', height: '100%' } },
                React__default.createElement(ClickThrough, { key: 'clickThrough', player: this.props.player, ref: function ref(c) {
                        _this2.clickThrough = c;
                    } }),
                React__default.createElement(SkipToggle, { key: 'skipToggle', player: this.props.player, ref: function ref(c) {
                        _this2.skipToggle = c;
                    } }),
                React__default.createElement(AdControlBar$1, { key: 'adControlBar', player: this.props.player, ref: function ref(c) {
                        _this2.adControlBar = c;
                    } }),
                React__default.createElement(AdThumbnail, { key: 'adThumbail', player: this.props.player, ref: function ref(c) {
                        _this2.adThumbnail = c;
                    } })
            );
        }
    }]);
    return Ad;
}(React.Component), _class2$4.propTypes = {
    player: playercore.PropTypes.object.isRequired
}, _temp2), (_applyDecoratedDescriptor$5(_class$15.prototype, '_handleAdStart', [playercore.autobind], Object.getOwnPropertyDescriptor(_class$15.prototype, '_handleAdStart'), _class$15.prototype), _applyDecoratedDescriptor$5(_class$15.prototype, '_handleAdMediaEnd', [playercore.autobind], Object.getOwnPropertyDescriptor(_class$15.prototype, '_handleAdMediaEnd'), _class$15.prototype), _applyDecoratedDescriptor$5(_class$15.prototype, '_handleAdSkip', [playercore.autobind], Object.getOwnPropertyDescriptor(_class$15.prototype, '_handleAdSkip'), _class$15.prototype), _applyDecoratedDescriptor$5(_class$15.prototype, '_handleAdEnd', [playercore.autobind], Object.getOwnPropertyDescriptor(_class$15.prototype, '_handleAdEnd'), _class$15.prototype), _applyDecoratedDescriptor$5(_class$15.prototype, '_handleVastStart', [playercore.autobind], Object.getOwnPropertyDescriptor(_class$15.prototype, '_handleVastStart'), _class$15.prototype), _applyDecoratedDescriptor$5(_class$15.prototype, '_handleVpaidStart', [playercore.autobind], Object.getOwnPropertyDescriptor(_class$15.prototype, '_handleVpaidStart'), _class$15.prototype)), _class$15);

// const {DEFAULT} = playerconfig; 

// const AD_TYPE = {
//     PREROLL: 'preroll',
//     MIDROLL: 'midroll',
//     POSTROLL: 'postroll'
// };

playercore__default.Vast = VastPlugin;

var AdsPlayerPlugin = function AdsPlayerPlugin() {
    var player = this;
    player.AdsPlugin = new AdsPlugin({ player: player });

    // player.AdsPlugin.initAd({ adTagUrl: 'http://localhost:8080/public/vast/vpaid_vpaid.xml', preLoaded: true,type: AD_TYPE.PREROLL , adsITVC : true});

    // player.on(ad:play, function(evt,vast){
    //     console.log(vast.ads[0].id);
    // });

    player.one('ready', function () {
        var _this = this;

        var ele = React__default.createElement(Ad$3, { key: 'ad', player: player, ref: function ref(c) {
                _this.container.ad = c;
            } });
        player.container.addChild(ele);
        var overlayAd = document.createElement('div');
        overlayAd.style.background = 'rgba(0,0,0,0.7)';
        overlayAd.style.transition = 'all 2s ease 0s';
        overlayAd.style.opacity = 0;
        Dom.addClass(overlayAd, 'overlay-ad');
        player.overlay.append(overlayAd);
    });
};

playercore__default.registerPlugin('AdsPlayerPlugin', AdsPlayerPlugin);

})));


 })();